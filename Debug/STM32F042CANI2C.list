
STM32F042CANI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005474  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005534  08005534  00015534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a4  080055a4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080055a4  080055a4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055a4  080055a4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080055ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000024  080055d0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080055d0  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d713  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d73  00000000  00000000  0002d75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  0002f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  00030310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014cc9  00000000  00000000  00031050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a22b  00000000  00000000  00045d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074ae1  00000000  00000000  0004ff44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4a25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  000c4aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800551c 	.word	0x0800551c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	0800551c 	.word	0x0800551c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fd01 	bl	8000c38 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fc59 	bl	8000af8 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fcf3 	bl	8000c38 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fce9 	bl	8000c38 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fc7b 	bl	8000b70 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fc71 	bl	8000b70 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f8c1 	bl	800042c <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f843 	bl	8000340 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f8b3 	bl	800042c <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f8a9 	bl	800042c <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f851 	bl	8000390 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f847 	bl	8000390 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_f2uiz>:
 8000310:	219e      	movs	r1, #158	; 0x9e
 8000312:	b510      	push	{r4, lr}
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	1c04      	adds	r4, r0, #0
 8000318:	f7ff fff0 	bl	80002fc <__aeabi_fcmpge>
 800031c:	2800      	cmp	r0, #0
 800031e:	d103      	bne.n	8000328 <__aeabi_f2uiz+0x18>
 8000320:	1c20      	adds	r0, r4, #0
 8000322:	f000 fbc9 	bl	8000ab8 <__aeabi_f2iz>
 8000326:	bd10      	pop	{r4, pc}
 8000328:	219e      	movs	r1, #158	; 0x9e
 800032a:	1c20      	adds	r0, r4, #0
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	f000 f9ff 	bl	8000730 <__aeabi_fsub>
 8000332:	f000 fbc1 	bl	8000ab8 <__aeabi_f2iz>
 8000336:	2380      	movs	r3, #128	; 0x80
 8000338:	061b      	lsls	r3, r3, #24
 800033a:	469c      	mov	ip, r3
 800033c:	4460      	add	r0, ip
 800033e:	e7f2      	b.n	8000326 <__aeabi_f2uiz+0x16>

08000340 <__eqsf2>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	0042      	lsls	r2, r0, #1
 8000344:	024e      	lsls	r6, r1, #9
 8000346:	004c      	lsls	r4, r1, #1
 8000348:	0245      	lsls	r5, r0, #9
 800034a:	0a6d      	lsrs	r5, r5, #9
 800034c:	0e12      	lsrs	r2, r2, #24
 800034e:	0fc3      	lsrs	r3, r0, #31
 8000350:	0a76      	lsrs	r6, r6, #9
 8000352:	0e24      	lsrs	r4, r4, #24
 8000354:	0fc9      	lsrs	r1, r1, #31
 8000356:	2aff      	cmp	r2, #255	; 0xff
 8000358:	d00f      	beq.n	800037a <__eqsf2+0x3a>
 800035a:	2cff      	cmp	r4, #255	; 0xff
 800035c:	d011      	beq.n	8000382 <__eqsf2+0x42>
 800035e:	2001      	movs	r0, #1
 8000360:	42a2      	cmp	r2, r4
 8000362:	d000      	beq.n	8000366 <__eqsf2+0x26>
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	42b5      	cmp	r5, r6
 8000368:	d1fc      	bne.n	8000364 <__eqsf2+0x24>
 800036a:	428b      	cmp	r3, r1
 800036c:	d00d      	beq.n	800038a <__eqsf2+0x4a>
 800036e:	2a00      	cmp	r2, #0
 8000370:	d1f8      	bne.n	8000364 <__eqsf2+0x24>
 8000372:	0028      	movs	r0, r5
 8000374:	1e45      	subs	r5, r0, #1
 8000376:	41a8      	sbcs	r0, r5
 8000378:	e7f4      	b.n	8000364 <__eqsf2+0x24>
 800037a:	2001      	movs	r0, #1
 800037c:	2d00      	cmp	r5, #0
 800037e:	d1f1      	bne.n	8000364 <__eqsf2+0x24>
 8000380:	e7eb      	b.n	800035a <__eqsf2+0x1a>
 8000382:	2001      	movs	r0, #1
 8000384:	2e00      	cmp	r6, #0
 8000386:	d1ed      	bne.n	8000364 <__eqsf2+0x24>
 8000388:	e7e9      	b.n	800035e <__eqsf2+0x1e>
 800038a:	2000      	movs	r0, #0
 800038c:	e7ea      	b.n	8000364 <__eqsf2+0x24>
 800038e:	46c0      	nop			; (mov r8, r8)

08000390 <__gesf2>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	004a      	lsls	r2, r1, #1
 8000394:	024e      	lsls	r6, r1, #9
 8000396:	0245      	lsls	r5, r0, #9
 8000398:	0044      	lsls	r4, r0, #1
 800039a:	0a6d      	lsrs	r5, r5, #9
 800039c:	0e24      	lsrs	r4, r4, #24
 800039e:	0fc3      	lsrs	r3, r0, #31
 80003a0:	0a76      	lsrs	r6, r6, #9
 80003a2:	0e12      	lsrs	r2, r2, #24
 80003a4:	0fc9      	lsrs	r1, r1, #31
 80003a6:	2cff      	cmp	r4, #255	; 0xff
 80003a8:	d015      	beq.n	80003d6 <__gesf2+0x46>
 80003aa:	2aff      	cmp	r2, #255	; 0xff
 80003ac:	d00e      	beq.n	80003cc <__gesf2+0x3c>
 80003ae:	2c00      	cmp	r4, #0
 80003b0:	d115      	bne.n	80003de <__gesf2+0x4e>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	d101      	bne.n	80003ba <__gesf2+0x2a>
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d01c      	beq.n	80003f4 <__gesf2+0x64>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d014      	beq.n	80003e8 <__gesf2+0x58>
 80003be:	428b      	cmp	r3, r1
 80003c0:	d027      	beq.n	8000412 <__gesf2+0x82>
 80003c2:	2002      	movs	r0, #2
 80003c4:	3b01      	subs	r3, #1
 80003c6:	4018      	ands	r0, r3
 80003c8:	3801      	subs	r0, #1
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d0ee      	beq.n	80003ae <__gesf2+0x1e>
 80003d0:	2002      	movs	r0, #2
 80003d2:	4240      	negs	r0, r0
 80003d4:	e7f9      	b.n	80003ca <__gesf2+0x3a>
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d1fa      	bne.n	80003d0 <__gesf2+0x40>
 80003da:	2aff      	cmp	r2, #255	; 0xff
 80003dc:	d00e      	beq.n	80003fc <__gesf2+0x6c>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	d10e      	bne.n	8000400 <__gesf2+0x70>
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0ed      	beq.n	80003c2 <__gesf2+0x32>
 80003e6:	e00b      	b.n	8000400 <__gesf2+0x70>
 80003e8:	2301      	movs	r3, #1
 80003ea:	3901      	subs	r1, #1
 80003ec:	4399      	bics	r1, r3
 80003ee:	0008      	movs	r0, r1
 80003f0:	3001      	adds	r0, #1
 80003f2:	e7ea      	b.n	80003ca <__gesf2+0x3a>
 80003f4:	2000      	movs	r0, #0
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e7      	beq.n	80003ca <__gesf2+0x3a>
 80003fa:	e7e2      	b.n	80003c2 <__gesf2+0x32>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d1e7      	bne.n	80003d0 <__gesf2+0x40>
 8000400:	428b      	cmp	r3, r1
 8000402:	d1de      	bne.n	80003c2 <__gesf2+0x32>
 8000404:	4294      	cmp	r4, r2
 8000406:	dd05      	ble.n	8000414 <__gesf2+0x84>
 8000408:	2102      	movs	r1, #2
 800040a:	1e58      	subs	r0, r3, #1
 800040c:	4008      	ands	r0, r1
 800040e:	3801      	subs	r0, #1
 8000410:	e7db      	b.n	80003ca <__gesf2+0x3a>
 8000412:	2400      	movs	r4, #0
 8000414:	42a2      	cmp	r2, r4
 8000416:	dc04      	bgt.n	8000422 <__gesf2+0x92>
 8000418:	42b5      	cmp	r5, r6
 800041a:	d8d2      	bhi.n	80003c2 <__gesf2+0x32>
 800041c:	2000      	movs	r0, #0
 800041e:	42b5      	cmp	r5, r6
 8000420:	d2d3      	bcs.n	80003ca <__gesf2+0x3a>
 8000422:	1e58      	subs	r0, r3, #1
 8000424:	2301      	movs	r3, #1
 8000426:	4398      	bics	r0, r3
 8000428:	3001      	adds	r0, #1
 800042a:	e7ce      	b.n	80003ca <__gesf2+0x3a>

0800042c <__lesf2>:
 800042c:	b530      	push	{r4, r5, lr}
 800042e:	0042      	lsls	r2, r0, #1
 8000430:	0244      	lsls	r4, r0, #9
 8000432:	024d      	lsls	r5, r1, #9
 8000434:	0fc3      	lsrs	r3, r0, #31
 8000436:	0048      	lsls	r0, r1, #1
 8000438:	0a64      	lsrs	r4, r4, #9
 800043a:	0e12      	lsrs	r2, r2, #24
 800043c:	0a6d      	lsrs	r5, r5, #9
 800043e:	0e00      	lsrs	r0, r0, #24
 8000440:	0fc9      	lsrs	r1, r1, #31
 8000442:	2aff      	cmp	r2, #255	; 0xff
 8000444:	d012      	beq.n	800046c <__lesf2+0x40>
 8000446:	28ff      	cmp	r0, #255	; 0xff
 8000448:	d00c      	beq.n	8000464 <__lesf2+0x38>
 800044a:	2a00      	cmp	r2, #0
 800044c:	d112      	bne.n	8000474 <__lesf2+0x48>
 800044e:	2800      	cmp	r0, #0
 8000450:	d119      	bne.n	8000486 <__lesf2+0x5a>
 8000452:	2d00      	cmp	r5, #0
 8000454:	d117      	bne.n	8000486 <__lesf2+0x5a>
 8000456:	2c00      	cmp	r4, #0
 8000458:	d02b      	beq.n	80004b2 <__lesf2+0x86>
 800045a:	2002      	movs	r0, #2
 800045c:	3b01      	subs	r3, #1
 800045e:	4018      	ands	r0, r3
 8000460:	3801      	subs	r0, #1
 8000462:	e026      	b.n	80004b2 <__lesf2+0x86>
 8000464:	2d00      	cmp	r5, #0
 8000466:	d0f0      	beq.n	800044a <__lesf2+0x1e>
 8000468:	2002      	movs	r0, #2
 800046a:	e022      	b.n	80004b2 <__lesf2+0x86>
 800046c:	2c00      	cmp	r4, #0
 800046e:	d1fb      	bne.n	8000468 <__lesf2+0x3c>
 8000470:	28ff      	cmp	r0, #255	; 0xff
 8000472:	d01f      	beq.n	80004b4 <__lesf2+0x88>
 8000474:	2800      	cmp	r0, #0
 8000476:	d11f      	bne.n	80004b8 <__lesf2+0x8c>
 8000478:	2d00      	cmp	r5, #0
 800047a:	d11d      	bne.n	80004b8 <__lesf2+0x8c>
 800047c:	2002      	movs	r0, #2
 800047e:	3b01      	subs	r3, #1
 8000480:	4018      	ands	r0, r3
 8000482:	3801      	subs	r0, #1
 8000484:	e015      	b.n	80004b2 <__lesf2+0x86>
 8000486:	2c00      	cmp	r4, #0
 8000488:	d00e      	beq.n	80004a8 <__lesf2+0x7c>
 800048a:	428b      	cmp	r3, r1
 800048c:	d1e5      	bne.n	800045a <__lesf2+0x2e>
 800048e:	2200      	movs	r2, #0
 8000490:	4290      	cmp	r0, r2
 8000492:	dc04      	bgt.n	800049e <__lesf2+0x72>
 8000494:	42ac      	cmp	r4, r5
 8000496:	d8e0      	bhi.n	800045a <__lesf2+0x2e>
 8000498:	2000      	movs	r0, #0
 800049a:	42ac      	cmp	r4, r5
 800049c:	d209      	bcs.n	80004b2 <__lesf2+0x86>
 800049e:	1e58      	subs	r0, r3, #1
 80004a0:	2301      	movs	r3, #1
 80004a2:	4398      	bics	r0, r3
 80004a4:	3001      	adds	r0, #1
 80004a6:	e004      	b.n	80004b2 <__lesf2+0x86>
 80004a8:	2301      	movs	r3, #1
 80004aa:	3901      	subs	r1, #1
 80004ac:	4399      	bics	r1, r3
 80004ae:	0008      	movs	r0, r1
 80004b0:	3001      	adds	r0, #1
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d1d7      	bne.n	8000468 <__lesf2+0x3c>
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d1ce      	bne.n	800045a <__lesf2+0x2e>
 80004bc:	4282      	cmp	r2, r0
 80004be:	dde7      	ble.n	8000490 <__lesf2+0x64>
 80004c0:	2102      	movs	r1, #2
 80004c2:	1e58      	subs	r0, r3, #1
 80004c4:	4008      	ands	r0, r1
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7f3      	b.n	80004b2 <__lesf2+0x86>
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fmul>:
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	464e      	mov	r6, r9
 80004d0:	4657      	mov	r7, sl
 80004d2:	4645      	mov	r5, r8
 80004d4:	46de      	mov	lr, fp
 80004d6:	b5e0      	push	{r5, r6, r7, lr}
 80004d8:	0243      	lsls	r3, r0, #9
 80004da:	0a5b      	lsrs	r3, r3, #9
 80004dc:	0045      	lsls	r5, r0, #1
 80004de:	b083      	sub	sp, #12
 80004e0:	1c0f      	adds	r7, r1, #0
 80004e2:	4699      	mov	r9, r3
 80004e4:	0e2d      	lsrs	r5, r5, #24
 80004e6:	0fc6      	lsrs	r6, r0, #31
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d057      	beq.n	800059c <__aeabi_fmul+0xd0>
 80004ec:	2dff      	cmp	r5, #255	; 0xff
 80004ee:	d024      	beq.n	800053a <__aeabi_fmul+0x6e>
 80004f0:	2080      	movs	r0, #128	; 0x80
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	04c0      	lsls	r0, r0, #19
 80004f6:	4318      	orrs	r0, r3
 80004f8:	2300      	movs	r3, #0
 80004fa:	4681      	mov	r9, r0
 80004fc:	469a      	mov	sl, r3
 80004fe:	469b      	mov	fp, r3
 8000500:	3d7f      	subs	r5, #127	; 0x7f
 8000502:	027c      	lsls	r4, r7, #9
 8000504:	007a      	lsls	r2, r7, #1
 8000506:	0ffb      	lsrs	r3, r7, #31
 8000508:	0a64      	lsrs	r4, r4, #9
 800050a:	0e12      	lsrs	r2, r2, #24
 800050c:	4698      	mov	r8, r3
 800050e:	d023      	beq.n	8000558 <__aeabi_fmul+0x8c>
 8000510:	2aff      	cmp	r2, #255	; 0xff
 8000512:	d04b      	beq.n	80005ac <__aeabi_fmul+0xe0>
 8000514:	00e3      	lsls	r3, r4, #3
 8000516:	2480      	movs	r4, #128	; 0x80
 8000518:	2000      	movs	r0, #0
 800051a:	04e4      	lsls	r4, r4, #19
 800051c:	3a7f      	subs	r2, #127	; 0x7f
 800051e:	431c      	orrs	r4, r3
 8000520:	18ad      	adds	r5, r5, r2
 8000522:	1c6b      	adds	r3, r5, #1
 8000524:	4647      	mov	r7, r8
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	4653      	mov	r3, sl
 800052a:	4077      	eors	r7, r6
 800052c:	003a      	movs	r2, r7
 800052e:	2b0f      	cmp	r3, #15
 8000530:	d848      	bhi.n	80005c4 <__aeabi_fmul+0xf8>
 8000532:	497d      	ldr	r1, [pc, #500]	; (8000728 <__aeabi_fmul+0x25c>)
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	58cb      	ldr	r3, [r1, r3]
 8000538:	469f      	mov	pc, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d000      	beq.n	8000540 <__aeabi_fmul+0x74>
 800053e:	e085      	b.n	800064c <__aeabi_fmul+0x180>
 8000540:	3308      	adds	r3, #8
 8000542:	469a      	mov	sl, r3
 8000544:	3b06      	subs	r3, #6
 8000546:	469b      	mov	fp, r3
 8000548:	027c      	lsls	r4, r7, #9
 800054a:	007a      	lsls	r2, r7, #1
 800054c:	0ffb      	lsrs	r3, r7, #31
 800054e:	25ff      	movs	r5, #255	; 0xff
 8000550:	0a64      	lsrs	r4, r4, #9
 8000552:	0e12      	lsrs	r2, r2, #24
 8000554:	4698      	mov	r8, r3
 8000556:	d1db      	bne.n	8000510 <__aeabi_fmul+0x44>
 8000558:	2c00      	cmp	r4, #0
 800055a:	d000      	beq.n	800055e <__aeabi_fmul+0x92>
 800055c:	e090      	b.n	8000680 <__aeabi_fmul+0x1b4>
 800055e:	4652      	mov	r2, sl
 8000560:	2301      	movs	r3, #1
 8000562:	431a      	orrs	r2, r3
 8000564:	4692      	mov	sl, r2
 8000566:	2001      	movs	r0, #1
 8000568:	e7db      	b.n	8000522 <__aeabi_fmul+0x56>
 800056a:	464c      	mov	r4, r9
 800056c:	4658      	mov	r0, fp
 800056e:	0017      	movs	r7, r2
 8000570:	2802      	cmp	r0, #2
 8000572:	d024      	beq.n	80005be <__aeabi_fmul+0xf2>
 8000574:	2803      	cmp	r0, #3
 8000576:	d100      	bne.n	800057a <__aeabi_fmul+0xae>
 8000578:	e0cf      	b.n	800071a <__aeabi_fmul+0x24e>
 800057a:	2200      	movs	r2, #0
 800057c:	2300      	movs	r3, #0
 800057e:	2801      	cmp	r0, #1
 8000580:	d14d      	bne.n	800061e <__aeabi_fmul+0x152>
 8000582:	0258      	lsls	r0, r3, #9
 8000584:	05d2      	lsls	r2, r2, #23
 8000586:	0a40      	lsrs	r0, r0, #9
 8000588:	07ff      	lsls	r7, r7, #31
 800058a:	4310      	orrs	r0, r2
 800058c:	4338      	orrs	r0, r7
 800058e:	b003      	add	sp, #12
 8000590:	bc3c      	pop	{r2, r3, r4, r5}
 8000592:	4690      	mov	r8, r2
 8000594:	4699      	mov	r9, r3
 8000596:	46a2      	mov	sl, r4
 8000598:	46ab      	mov	fp, r5
 800059a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059c:	2b00      	cmp	r3, #0
 800059e:	d15b      	bne.n	8000658 <__aeabi_fmul+0x18c>
 80005a0:	2304      	movs	r3, #4
 80005a2:	469a      	mov	sl, r3
 80005a4:	3b03      	subs	r3, #3
 80005a6:	2500      	movs	r5, #0
 80005a8:	469b      	mov	fp, r3
 80005aa:	e7aa      	b.n	8000502 <__aeabi_fmul+0x36>
 80005ac:	35ff      	adds	r5, #255	; 0xff
 80005ae:	2c00      	cmp	r4, #0
 80005b0:	d160      	bne.n	8000674 <__aeabi_fmul+0x1a8>
 80005b2:	4652      	mov	r2, sl
 80005b4:	2302      	movs	r3, #2
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4692      	mov	sl, r2
 80005ba:	2002      	movs	r0, #2
 80005bc:	e7b1      	b.n	8000522 <__aeabi_fmul+0x56>
 80005be:	22ff      	movs	r2, #255	; 0xff
 80005c0:	2300      	movs	r3, #0
 80005c2:	e7de      	b.n	8000582 <__aeabi_fmul+0xb6>
 80005c4:	464b      	mov	r3, r9
 80005c6:	0c1b      	lsrs	r3, r3, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	464b      	mov	r3, r9
 80005cc:	0426      	lsls	r6, r4, #16
 80005ce:	0c36      	lsrs	r6, r6, #16
 80005d0:	0418      	lsls	r0, r3, #16
 80005d2:	4661      	mov	r1, ip
 80005d4:	0033      	movs	r3, r6
 80005d6:	0c22      	lsrs	r2, r4, #16
 80005d8:	4664      	mov	r4, ip
 80005da:	0c00      	lsrs	r0, r0, #16
 80005dc:	4343      	muls	r3, r0
 80005de:	434e      	muls	r6, r1
 80005e0:	4350      	muls	r0, r2
 80005e2:	4354      	muls	r4, r2
 80005e4:	1980      	adds	r0, r0, r6
 80005e6:	0c1a      	lsrs	r2, r3, #16
 80005e8:	1812      	adds	r2, r2, r0
 80005ea:	4296      	cmp	r6, r2
 80005ec:	d903      	bls.n	80005f6 <__aeabi_fmul+0x12a>
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	0249      	lsls	r1, r1, #9
 80005f2:	468c      	mov	ip, r1
 80005f4:	4464      	add	r4, ip
 80005f6:	041b      	lsls	r3, r3, #16
 80005f8:	0c1b      	lsrs	r3, r3, #16
 80005fa:	0410      	lsls	r0, r2, #16
 80005fc:	18c0      	adds	r0, r0, r3
 80005fe:	0183      	lsls	r3, r0, #6
 8000600:	1e5e      	subs	r6, r3, #1
 8000602:	41b3      	sbcs	r3, r6
 8000604:	0e80      	lsrs	r0, r0, #26
 8000606:	4318      	orrs	r0, r3
 8000608:	0c13      	lsrs	r3, r2, #16
 800060a:	191b      	adds	r3, r3, r4
 800060c:	019b      	lsls	r3, r3, #6
 800060e:	4303      	orrs	r3, r0
 8000610:	001c      	movs	r4, r3
 8000612:	0123      	lsls	r3, r4, #4
 8000614:	d579      	bpl.n	800070a <__aeabi_fmul+0x23e>
 8000616:	2301      	movs	r3, #1
 8000618:	0862      	lsrs	r2, r4, #1
 800061a:	401c      	ands	r4, r3
 800061c:	4314      	orrs	r4, r2
 800061e:	9a01      	ldr	r2, [sp, #4]
 8000620:	327f      	adds	r2, #127	; 0x7f
 8000622:	2a00      	cmp	r2, #0
 8000624:	dd4d      	ble.n	80006c2 <__aeabi_fmul+0x1f6>
 8000626:	0763      	lsls	r3, r4, #29
 8000628:	d004      	beq.n	8000634 <__aeabi_fmul+0x168>
 800062a:	230f      	movs	r3, #15
 800062c:	4023      	ands	r3, r4
 800062e:	2b04      	cmp	r3, #4
 8000630:	d000      	beq.n	8000634 <__aeabi_fmul+0x168>
 8000632:	3404      	adds	r4, #4
 8000634:	0123      	lsls	r3, r4, #4
 8000636:	d503      	bpl.n	8000640 <__aeabi_fmul+0x174>
 8000638:	4b3c      	ldr	r3, [pc, #240]	; (800072c <__aeabi_fmul+0x260>)
 800063a:	9a01      	ldr	r2, [sp, #4]
 800063c:	401c      	ands	r4, r3
 800063e:	3280      	adds	r2, #128	; 0x80
 8000640:	2afe      	cmp	r2, #254	; 0xfe
 8000642:	dcbc      	bgt.n	80005be <__aeabi_fmul+0xf2>
 8000644:	01a3      	lsls	r3, r4, #6
 8000646:	0a5b      	lsrs	r3, r3, #9
 8000648:	b2d2      	uxtb	r2, r2
 800064a:	e79a      	b.n	8000582 <__aeabi_fmul+0xb6>
 800064c:	230c      	movs	r3, #12
 800064e:	469a      	mov	sl, r3
 8000650:	3b09      	subs	r3, #9
 8000652:	25ff      	movs	r5, #255	; 0xff
 8000654:	469b      	mov	fp, r3
 8000656:	e754      	b.n	8000502 <__aeabi_fmul+0x36>
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fba7 	bl	8000dac <__clzsi2>
 800065e:	464a      	mov	r2, r9
 8000660:	1f43      	subs	r3, r0, #5
 8000662:	2576      	movs	r5, #118	; 0x76
 8000664:	409a      	lsls	r2, r3
 8000666:	2300      	movs	r3, #0
 8000668:	426d      	negs	r5, r5
 800066a:	4691      	mov	r9, r2
 800066c:	1a2d      	subs	r5, r5, r0
 800066e:	469a      	mov	sl, r3
 8000670:	469b      	mov	fp, r3
 8000672:	e746      	b.n	8000502 <__aeabi_fmul+0x36>
 8000674:	4652      	mov	r2, sl
 8000676:	2303      	movs	r3, #3
 8000678:	431a      	orrs	r2, r3
 800067a:	4692      	mov	sl, r2
 800067c:	2003      	movs	r0, #3
 800067e:	e750      	b.n	8000522 <__aeabi_fmul+0x56>
 8000680:	0020      	movs	r0, r4
 8000682:	f000 fb93 	bl	8000dac <__clzsi2>
 8000686:	1f43      	subs	r3, r0, #5
 8000688:	1a2d      	subs	r5, r5, r0
 800068a:	409c      	lsls	r4, r3
 800068c:	3d76      	subs	r5, #118	; 0x76
 800068e:	2000      	movs	r0, #0
 8000690:	e747      	b.n	8000522 <__aeabi_fmul+0x56>
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	2700      	movs	r7, #0
 8000696:	03db      	lsls	r3, r3, #15
 8000698:	22ff      	movs	r2, #255	; 0xff
 800069a:	e772      	b.n	8000582 <__aeabi_fmul+0xb6>
 800069c:	4642      	mov	r2, r8
 800069e:	e766      	b.n	800056e <__aeabi_fmul+0xa2>
 80006a0:	464c      	mov	r4, r9
 80006a2:	0032      	movs	r2, r6
 80006a4:	4658      	mov	r0, fp
 80006a6:	e762      	b.n	800056e <__aeabi_fmul+0xa2>
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	464a      	mov	r2, r9
 80006ac:	03db      	lsls	r3, r3, #15
 80006ae:	421a      	tst	r2, r3
 80006b0:	d022      	beq.n	80006f8 <__aeabi_fmul+0x22c>
 80006b2:	421c      	tst	r4, r3
 80006b4:	d120      	bne.n	80006f8 <__aeabi_fmul+0x22c>
 80006b6:	4323      	orrs	r3, r4
 80006b8:	025b      	lsls	r3, r3, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	4647      	mov	r7, r8
 80006be:	22ff      	movs	r2, #255	; 0xff
 80006c0:	e75f      	b.n	8000582 <__aeabi_fmul+0xb6>
 80006c2:	2301      	movs	r3, #1
 80006c4:	1a9a      	subs	r2, r3, r2
 80006c6:	2a1b      	cmp	r2, #27
 80006c8:	dc21      	bgt.n	800070e <__aeabi_fmul+0x242>
 80006ca:	0023      	movs	r3, r4
 80006cc:	9901      	ldr	r1, [sp, #4]
 80006ce:	40d3      	lsrs	r3, r2
 80006d0:	319e      	adds	r1, #158	; 0x9e
 80006d2:	408c      	lsls	r4, r1
 80006d4:	001a      	movs	r2, r3
 80006d6:	0023      	movs	r3, r4
 80006d8:	1e5c      	subs	r4, r3, #1
 80006da:	41a3      	sbcs	r3, r4
 80006dc:	4313      	orrs	r3, r2
 80006de:	075a      	lsls	r2, r3, #29
 80006e0:	d004      	beq.n	80006ec <__aeabi_fmul+0x220>
 80006e2:	220f      	movs	r2, #15
 80006e4:	401a      	ands	r2, r3
 80006e6:	2a04      	cmp	r2, #4
 80006e8:	d000      	beq.n	80006ec <__aeabi_fmul+0x220>
 80006ea:	3304      	adds	r3, #4
 80006ec:	015a      	lsls	r2, r3, #5
 80006ee:	d411      	bmi.n	8000714 <__aeabi_fmul+0x248>
 80006f0:	019b      	lsls	r3, r3, #6
 80006f2:	0a5b      	lsrs	r3, r3, #9
 80006f4:	2200      	movs	r2, #0
 80006f6:	e744      	b.n	8000582 <__aeabi_fmul+0xb6>
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	464a      	mov	r2, r9
 80006fc:	03db      	lsls	r3, r3, #15
 80006fe:	4313      	orrs	r3, r2
 8000700:	025b      	lsls	r3, r3, #9
 8000702:	0a5b      	lsrs	r3, r3, #9
 8000704:	0037      	movs	r7, r6
 8000706:	22ff      	movs	r2, #255	; 0xff
 8000708:	e73b      	b.n	8000582 <__aeabi_fmul+0xb6>
 800070a:	9501      	str	r5, [sp, #4]
 800070c:	e787      	b.n	800061e <__aeabi_fmul+0x152>
 800070e:	2200      	movs	r2, #0
 8000710:	2300      	movs	r3, #0
 8000712:	e736      	b.n	8000582 <__aeabi_fmul+0xb6>
 8000714:	2201      	movs	r2, #1
 8000716:	2300      	movs	r3, #0
 8000718:	e733      	b.n	8000582 <__aeabi_fmul+0xb6>
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	03db      	lsls	r3, r3, #15
 800071e:	4323      	orrs	r3, r4
 8000720:	025b      	lsls	r3, r3, #9
 8000722:	0a5b      	lsrs	r3, r3, #9
 8000724:	22ff      	movs	r2, #255	; 0xff
 8000726:	e72c      	b.n	8000582 <__aeabi_fmul+0xb6>
 8000728:	08005554 	.word	0x08005554
 800072c:	f7ffffff 	.word	0xf7ffffff

08000730 <__aeabi_fsub>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	4647      	mov	r7, r8
 8000734:	46ce      	mov	lr, r9
 8000736:	0044      	lsls	r4, r0, #1
 8000738:	0fc2      	lsrs	r2, r0, #31
 800073a:	b580      	push	{r7, lr}
 800073c:	0247      	lsls	r7, r0, #9
 800073e:	0248      	lsls	r0, r1, #9
 8000740:	0a40      	lsrs	r0, r0, #9
 8000742:	4684      	mov	ip, r0
 8000744:	4666      	mov	r6, ip
 8000746:	0048      	lsls	r0, r1, #1
 8000748:	0a7f      	lsrs	r7, r7, #9
 800074a:	0e24      	lsrs	r4, r4, #24
 800074c:	00f6      	lsls	r6, r6, #3
 800074e:	0025      	movs	r5, r4
 8000750:	4690      	mov	r8, r2
 8000752:	00fb      	lsls	r3, r7, #3
 8000754:	0e00      	lsrs	r0, r0, #24
 8000756:	0fc9      	lsrs	r1, r1, #31
 8000758:	46b1      	mov	r9, r6
 800075a:	28ff      	cmp	r0, #255	; 0xff
 800075c:	d100      	bne.n	8000760 <__aeabi_fsub+0x30>
 800075e:	e085      	b.n	800086c <__aeabi_fsub+0x13c>
 8000760:	2601      	movs	r6, #1
 8000762:	4071      	eors	r1, r6
 8000764:	1a26      	subs	r6, r4, r0
 8000766:	4291      	cmp	r1, r2
 8000768:	d057      	beq.n	800081a <__aeabi_fsub+0xea>
 800076a:	2e00      	cmp	r6, #0
 800076c:	dd43      	ble.n	80007f6 <__aeabi_fsub+0xc6>
 800076e:	2800      	cmp	r0, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_fsub+0x44>
 8000772:	e07f      	b.n	8000874 <__aeabi_fsub+0x144>
 8000774:	4649      	mov	r1, r9
 8000776:	2900      	cmp	r1, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fsub+0x4c>
 800077a:	e0aa      	b.n	80008d2 <__aeabi_fsub+0x1a2>
 800077c:	3e01      	subs	r6, #1
 800077e:	2e00      	cmp	r6, #0
 8000780:	d000      	beq.n	8000784 <__aeabi_fsub+0x54>
 8000782:	e0f7      	b.n	8000974 <__aeabi_fsub+0x244>
 8000784:	1a5b      	subs	r3, r3, r1
 8000786:	015a      	lsls	r2, r3, #5
 8000788:	d400      	bmi.n	800078c <__aeabi_fsub+0x5c>
 800078a:	e08b      	b.n	80008a4 <__aeabi_fsub+0x174>
 800078c:	019b      	lsls	r3, r3, #6
 800078e:	099c      	lsrs	r4, r3, #6
 8000790:	0020      	movs	r0, r4
 8000792:	f000 fb0b 	bl	8000dac <__clzsi2>
 8000796:	3805      	subs	r0, #5
 8000798:	4084      	lsls	r4, r0
 800079a:	4285      	cmp	r5, r0
 800079c:	dd00      	ble.n	80007a0 <__aeabi_fsub+0x70>
 800079e:	e0d3      	b.n	8000948 <__aeabi_fsub+0x218>
 80007a0:	1b45      	subs	r5, r0, r5
 80007a2:	0023      	movs	r3, r4
 80007a4:	2020      	movs	r0, #32
 80007a6:	3501      	adds	r5, #1
 80007a8:	40eb      	lsrs	r3, r5
 80007aa:	1b45      	subs	r5, r0, r5
 80007ac:	40ac      	lsls	r4, r5
 80007ae:	1e62      	subs	r2, r4, #1
 80007b0:	4194      	sbcs	r4, r2
 80007b2:	4323      	orrs	r3, r4
 80007b4:	2407      	movs	r4, #7
 80007b6:	2500      	movs	r5, #0
 80007b8:	401c      	ands	r4, r3
 80007ba:	2201      	movs	r2, #1
 80007bc:	4641      	mov	r1, r8
 80007be:	400a      	ands	r2, r1
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d004      	beq.n	80007ce <__aeabi_fsub+0x9e>
 80007c4:	210f      	movs	r1, #15
 80007c6:	4019      	ands	r1, r3
 80007c8:	2904      	cmp	r1, #4
 80007ca:	d000      	beq.n	80007ce <__aeabi_fsub+0x9e>
 80007cc:	3304      	adds	r3, #4
 80007ce:	0159      	lsls	r1, r3, #5
 80007d0:	d400      	bmi.n	80007d4 <__aeabi_fsub+0xa4>
 80007d2:	e080      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 80007d4:	3501      	adds	r5, #1
 80007d6:	b2ec      	uxtb	r4, r5
 80007d8:	2dff      	cmp	r5, #255	; 0xff
 80007da:	d000      	beq.n	80007de <__aeabi_fsub+0xae>
 80007dc:	e0a3      	b.n	8000926 <__aeabi_fsub+0x1f6>
 80007de:	24ff      	movs	r4, #255	; 0xff
 80007e0:	2300      	movs	r3, #0
 80007e2:	025b      	lsls	r3, r3, #9
 80007e4:	05e4      	lsls	r4, r4, #23
 80007e6:	0a58      	lsrs	r0, r3, #9
 80007e8:	07d2      	lsls	r2, r2, #31
 80007ea:	4320      	orrs	r0, r4
 80007ec:	4310      	orrs	r0, r2
 80007ee:	bc0c      	pop	{r2, r3}
 80007f0:	4690      	mov	r8, r2
 80007f2:	4699      	mov	r9, r3
 80007f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d174      	bne.n	80008e4 <__aeabi_fsub+0x1b4>
 80007fa:	1c60      	adds	r0, r4, #1
 80007fc:	b2c0      	uxtb	r0, r0
 80007fe:	2801      	cmp	r0, #1
 8000800:	dc00      	bgt.n	8000804 <__aeabi_fsub+0xd4>
 8000802:	e0a7      	b.n	8000954 <__aeabi_fsub+0x224>
 8000804:	464a      	mov	r2, r9
 8000806:	1a9c      	subs	r4, r3, r2
 8000808:	0162      	lsls	r2, r4, #5
 800080a:	d500      	bpl.n	800080e <__aeabi_fsub+0xde>
 800080c:	e0b6      	b.n	800097c <__aeabi_fsub+0x24c>
 800080e:	2c00      	cmp	r4, #0
 8000810:	d1be      	bne.n	8000790 <__aeabi_fsub+0x60>
 8000812:	2200      	movs	r2, #0
 8000814:	2400      	movs	r4, #0
 8000816:	2300      	movs	r3, #0
 8000818:	e7e3      	b.n	80007e2 <__aeabi_fsub+0xb2>
 800081a:	2e00      	cmp	r6, #0
 800081c:	dc00      	bgt.n	8000820 <__aeabi_fsub+0xf0>
 800081e:	e085      	b.n	800092c <__aeabi_fsub+0x1fc>
 8000820:	2800      	cmp	r0, #0
 8000822:	d046      	beq.n	80008b2 <__aeabi_fsub+0x182>
 8000824:	2cff      	cmp	r4, #255	; 0xff
 8000826:	d049      	beq.n	80008bc <__aeabi_fsub+0x18c>
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	4648      	mov	r0, r9
 800082c:	04d2      	lsls	r2, r2, #19
 800082e:	4310      	orrs	r0, r2
 8000830:	4681      	mov	r9, r0
 8000832:	2201      	movs	r2, #1
 8000834:	2e1b      	cmp	r6, #27
 8000836:	dc09      	bgt.n	800084c <__aeabi_fsub+0x11c>
 8000838:	2020      	movs	r0, #32
 800083a:	464c      	mov	r4, r9
 800083c:	1b80      	subs	r0, r0, r6
 800083e:	4084      	lsls	r4, r0
 8000840:	464a      	mov	r2, r9
 8000842:	0020      	movs	r0, r4
 8000844:	40f2      	lsrs	r2, r6
 8000846:	1e44      	subs	r4, r0, #1
 8000848:	41a0      	sbcs	r0, r4
 800084a:	4302      	orrs	r2, r0
 800084c:	189b      	adds	r3, r3, r2
 800084e:	015a      	lsls	r2, r3, #5
 8000850:	d528      	bpl.n	80008a4 <__aeabi_fsub+0x174>
 8000852:	3501      	adds	r5, #1
 8000854:	2dff      	cmp	r5, #255	; 0xff
 8000856:	d100      	bne.n	800085a <__aeabi_fsub+0x12a>
 8000858:	e0a8      	b.n	80009ac <__aeabi_fsub+0x27c>
 800085a:	2201      	movs	r2, #1
 800085c:	2407      	movs	r4, #7
 800085e:	4994      	ldr	r1, [pc, #592]	; (8000ab0 <__aeabi_fsub+0x380>)
 8000860:	401a      	ands	r2, r3
 8000862:	085b      	lsrs	r3, r3, #1
 8000864:	400b      	ands	r3, r1
 8000866:	4313      	orrs	r3, r2
 8000868:	401c      	ands	r4, r3
 800086a:	e7a6      	b.n	80007ba <__aeabi_fsub+0x8a>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fsub+0x142>
 8000870:	e778      	b.n	8000764 <__aeabi_fsub+0x34>
 8000872:	e775      	b.n	8000760 <__aeabi_fsub+0x30>
 8000874:	2cff      	cmp	r4, #255	; 0xff
 8000876:	d054      	beq.n	8000922 <__aeabi_fsub+0x1f2>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	4649      	mov	r1, r9
 800087c:	04d2      	lsls	r2, r2, #19
 800087e:	4311      	orrs	r1, r2
 8000880:	4689      	mov	r9, r1
 8000882:	2201      	movs	r2, #1
 8000884:	2e1b      	cmp	r6, #27
 8000886:	dc09      	bgt.n	800089c <__aeabi_fsub+0x16c>
 8000888:	2120      	movs	r1, #32
 800088a:	4648      	mov	r0, r9
 800088c:	1b89      	subs	r1, r1, r6
 800088e:	4088      	lsls	r0, r1
 8000890:	464a      	mov	r2, r9
 8000892:	0001      	movs	r1, r0
 8000894:	40f2      	lsrs	r2, r6
 8000896:	1e48      	subs	r0, r1, #1
 8000898:	4181      	sbcs	r1, r0
 800089a:	430a      	orrs	r2, r1
 800089c:	1a9b      	subs	r3, r3, r2
 800089e:	015a      	lsls	r2, r3, #5
 80008a0:	d500      	bpl.n	80008a4 <__aeabi_fsub+0x174>
 80008a2:	e773      	b.n	800078c <__aeabi_fsub+0x5c>
 80008a4:	2201      	movs	r2, #1
 80008a6:	4641      	mov	r1, r8
 80008a8:	400a      	ands	r2, r1
 80008aa:	0759      	lsls	r1, r3, #29
 80008ac:	d000      	beq.n	80008b0 <__aeabi_fsub+0x180>
 80008ae:	e789      	b.n	80007c4 <__aeabi_fsub+0x94>
 80008b0:	e011      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 80008b2:	4648      	mov	r0, r9
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d158      	bne.n	800096a <__aeabi_fsub+0x23a>
 80008b8:	2cff      	cmp	r4, #255	; 0xff
 80008ba:	d10c      	bne.n	80008d6 <__aeabi_fsub+0x1a6>
 80008bc:	08db      	lsrs	r3, r3, #3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fsub+0x194>
 80008c2:	e78c      	b.n	80007de <__aeabi_fsub+0xae>
 80008c4:	2080      	movs	r0, #128	; 0x80
 80008c6:	03c0      	lsls	r0, r0, #15
 80008c8:	4303      	orrs	r3, r0
 80008ca:	025b      	lsls	r3, r3, #9
 80008cc:	0a5b      	lsrs	r3, r3, #9
 80008ce:	24ff      	movs	r4, #255	; 0xff
 80008d0:	e787      	b.n	80007e2 <__aeabi_fsub+0xb2>
 80008d2:	2cff      	cmp	r4, #255	; 0xff
 80008d4:	d025      	beq.n	8000922 <__aeabi_fsub+0x1f2>
 80008d6:	08db      	lsrs	r3, r3, #3
 80008d8:	2dff      	cmp	r5, #255	; 0xff
 80008da:	d0f0      	beq.n	80008be <__aeabi_fsub+0x18e>
 80008dc:	025b      	lsls	r3, r3, #9
 80008de:	0a5b      	lsrs	r3, r3, #9
 80008e0:	b2ec      	uxtb	r4, r5
 80008e2:	e77e      	b.n	80007e2 <__aeabi_fsub+0xb2>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d04d      	beq.n	8000984 <__aeabi_fsub+0x254>
 80008e8:	28ff      	cmp	r0, #255	; 0xff
 80008ea:	d018      	beq.n	800091e <__aeabi_fsub+0x1ee>
 80008ec:	2480      	movs	r4, #128	; 0x80
 80008ee:	04e4      	lsls	r4, r4, #19
 80008f0:	4272      	negs	r2, r6
 80008f2:	4323      	orrs	r3, r4
 80008f4:	2a1b      	cmp	r2, #27
 80008f6:	dd00      	ble.n	80008fa <__aeabi_fsub+0x1ca>
 80008f8:	e0c4      	b.n	8000a84 <__aeabi_fsub+0x354>
 80008fa:	001c      	movs	r4, r3
 80008fc:	2520      	movs	r5, #32
 80008fe:	40d4      	lsrs	r4, r2
 8000900:	1aaa      	subs	r2, r5, r2
 8000902:	4093      	lsls	r3, r2
 8000904:	1e5a      	subs	r2, r3, #1
 8000906:	4193      	sbcs	r3, r2
 8000908:	4323      	orrs	r3, r4
 800090a:	464a      	mov	r2, r9
 800090c:	0005      	movs	r5, r0
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	4688      	mov	r8, r1
 8000912:	e738      	b.n	8000786 <__aeabi_fsub+0x56>
 8000914:	1c72      	adds	r2, r6, #1
 8000916:	d0f8      	beq.n	800090a <__aeabi_fsub+0x1da>
 8000918:	43f2      	mvns	r2, r6
 800091a:	28ff      	cmp	r0, #255	; 0xff
 800091c:	d1ea      	bne.n	80008f4 <__aeabi_fsub+0x1c4>
 800091e:	000a      	movs	r2, r1
 8000920:	464b      	mov	r3, r9
 8000922:	25ff      	movs	r5, #255	; 0xff
 8000924:	e7d7      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 8000926:	019b      	lsls	r3, r3, #6
 8000928:	0a5b      	lsrs	r3, r3, #9
 800092a:	e75a      	b.n	80007e2 <__aeabi_fsub+0xb2>
 800092c:	2e00      	cmp	r6, #0
 800092e:	d141      	bne.n	80009b4 <__aeabi_fsub+0x284>
 8000930:	1c65      	adds	r5, r4, #1
 8000932:	b2e9      	uxtb	r1, r5
 8000934:	2901      	cmp	r1, #1
 8000936:	dd45      	ble.n	80009c4 <__aeabi_fsub+0x294>
 8000938:	2dff      	cmp	r5, #255	; 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fsub+0x20e>
 800093c:	e74f      	b.n	80007de <__aeabi_fsub+0xae>
 800093e:	2407      	movs	r4, #7
 8000940:	444b      	add	r3, r9
 8000942:	085b      	lsrs	r3, r3, #1
 8000944:	401c      	ands	r4, r3
 8000946:	e738      	b.n	80007ba <__aeabi_fsub+0x8a>
 8000948:	2207      	movs	r2, #7
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <__aeabi_fsub+0x384>)
 800094c:	1a2d      	subs	r5, r5, r0
 800094e:	4023      	ands	r3, r4
 8000950:	4014      	ands	r4, r2
 8000952:	e732      	b.n	80007ba <__aeabi_fsub+0x8a>
 8000954:	2c00      	cmp	r4, #0
 8000956:	d11d      	bne.n	8000994 <__aeabi_fsub+0x264>
 8000958:	2b00      	cmp	r3, #0
 800095a:	d17a      	bne.n	8000a52 <__aeabi_fsub+0x322>
 800095c:	464b      	mov	r3, r9
 800095e:	2b00      	cmp	r3, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x234>
 8000962:	e091      	b.n	8000a88 <__aeabi_fsub+0x358>
 8000964:	000a      	movs	r2, r1
 8000966:	2500      	movs	r5, #0
 8000968:	e7b5      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 800096a:	3e01      	subs	r6, #1
 800096c:	2e00      	cmp	r6, #0
 800096e:	d119      	bne.n	80009a4 <__aeabi_fsub+0x274>
 8000970:	444b      	add	r3, r9
 8000972:	e76c      	b.n	800084e <__aeabi_fsub+0x11e>
 8000974:	2cff      	cmp	r4, #255	; 0xff
 8000976:	d184      	bne.n	8000882 <__aeabi_fsub+0x152>
 8000978:	25ff      	movs	r5, #255	; 0xff
 800097a:	e7ac      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 800097c:	464a      	mov	r2, r9
 800097e:	4688      	mov	r8, r1
 8000980:	1ad4      	subs	r4, r2, r3
 8000982:	e705      	b.n	8000790 <__aeabi_fsub+0x60>
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1c5      	bne.n	8000914 <__aeabi_fsub+0x1e4>
 8000988:	000a      	movs	r2, r1
 800098a:	28ff      	cmp	r0, #255	; 0xff
 800098c:	d0c8      	beq.n	8000920 <__aeabi_fsub+0x1f0>
 800098e:	0005      	movs	r5, r0
 8000990:	464b      	mov	r3, r9
 8000992:	e7a0      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d149      	bne.n	8000a2c <__aeabi_fsub+0x2fc>
 8000998:	464b      	mov	r3, r9
 800099a:	2b00      	cmp	r3, #0
 800099c:	d077      	beq.n	8000a8e <__aeabi_fsub+0x35e>
 800099e:	000a      	movs	r2, r1
 80009a0:	25ff      	movs	r5, #255	; 0xff
 80009a2:	e798      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 80009a4:	2cff      	cmp	r4, #255	; 0xff
 80009a6:	d000      	beq.n	80009aa <__aeabi_fsub+0x27a>
 80009a8:	e743      	b.n	8000832 <__aeabi_fsub+0x102>
 80009aa:	e787      	b.n	80008bc <__aeabi_fsub+0x18c>
 80009ac:	000a      	movs	r2, r1
 80009ae:	24ff      	movs	r4, #255	; 0xff
 80009b0:	2300      	movs	r3, #0
 80009b2:	e716      	b.n	80007e2 <__aeabi_fsub+0xb2>
 80009b4:	2c00      	cmp	r4, #0
 80009b6:	d115      	bne.n	80009e4 <__aeabi_fsub+0x2b4>
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d157      	bne.n	8000a6c <__aeabi_fsub+0x33c>
 80009bc:	28ff      	cmp	r0, #255	; 0xff
 80009be:	d1e6      	bne.n	800098e <__aeabi_fsub+0x25e>
 80009c0:	464b      	mov	r3, r9
 80009c2:	e77b      	b.n	80008bc <__aeabi_fsub+0x18c>
 80009c4:	2c00      	cmp	r4, #0
 80009c6:	d120      	bne.n	8000a0a <__aeabi_fsub+0x2da>
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d057      	beq.n	8000a7c <__aeabi_fsub+0x34c>
 80009cc:	4649      	mov	r1, r9
 80009ce:	2900      	cmp	r1, #0
 80009d0:	d053      	beq.n	8000a7a <__aeabi_fsub+0x34a>
 80009d2:	444b      	add	r3, r9
 80009d4:	015a      	lsls	r2, r3, #5
 80009d6:	d568      	bpl.n	8000aaa <__aeabi_fsub+0x37a>
 80009d8:	2407      	movs	r4, #7
 80009da:	4a36      	ldr	r2, [pc, #216]	; (8000ab4 <__aeabi_fsub+0x384>)
 80009dc:	401c      	ands	r4, r3
 80009de:	2501      	movs	r5, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	e6ea      	b.n	80007ba <__aeabi_fsub+0x8a>
 80009e4:	28ff      	cmp	r0, #255	; 0xff
 80009e6:	d0eb      	beq.n	80009c0 <__aeabi_fsub+0x290>
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	04d2      	lsls	r2, r2, #19
 80009ec:	4276      	negs	r6, r6
 80009ee:	4313      	orrs	r3, r2
 80009f0:	2e1b      	cmp	r6, #27
 80009f2:	dc53      	bgt.n	8000a9c <__aeabi_fsub+0x36c>
 80009f4:	2520      	movs	r5, #32
 80009f6:	1bad      	subs	r5, r5, r6
 80009f8:	001a      	movs	r2, r3
 80009fa:	40ab      	lsls	r3, r5
 80009fc:	40f2      	lsrs	r2, r6
 80009fe:	1e5c      	subs	r4, r3, #1
 8000a00:	41a3      	sbcs	r3, r4
 8000a02:	4313      	orrs	r3, r2
 8000a04:	444b      	add	r3, r9
 8000a06:	0005      	movs	r5, r0
 8000a08:	e721      	b.n	800084e <__aeabi_fsub+0x11e>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0d8      	beq.n	80009c0 <__aeabi_fsub+0x290>
 8000a0e:	4649      	mov	r1, r9
 8000a10:	2900      	cmp	r1, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fsub+0x2e6>
 8000a14:	e752      	b.n	80008bc <__aeabi_fsub+0x18c>
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	03c9      	lsls	r1, r1, #15
 8000a1a:	420f      	tst	r7, r1
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0x2f0>
 8000a1e:	e74d      	b.n	80008bc <__aeabi_fsub+0x18c>
 8000a20:	4660      	mov	r0, ip
 8000a22:	4208      	tst	r0, r1
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fsub+0x2f8>
 8000a26:	e749      	b.n	80008bc <__aeabi_fsub+0x18c>
 8000a28:	464b      	mov	r3, r9
 8000a2a:	e747      	b.n	80008bc <__aeabi_fsub+0x18c>
 8000a2c:	4648      	mov	r0, r9
 8000a2e:	25ff      	movs	r5, #255	; 0xff
 8000a30:	2800      	cmp	r0, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fsub+0x306>
 8000a34:	e74f      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	03d2      	lsls	r2, r2, #15
 8000a3a:	4217      	tst	r7, r2
 8000a3c:	d004      	beq.n	8000a48 <__aeabi_fsub+0x318>
 8000a3e:	4660      	mov	r0, ip
 8000a40:	4210      	tst	r0, r2
 8000a42:	d101      	bne.n	8000a48 <__aeabi_fsub+0x318>
 8000a44:	464b      	mov	r3, r9
 8000a46:	4688      	mov	r8, r1
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	25ff      	movs	r5, #255	; 0xff
 8000a4e:	400a      	ands	r2, r1
 8000a50:	e741      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 8000a52:	4648      	mov	r0, r9
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d01f      	beq.n	8000a98 <__aeabi_fsub+0x368>
 8000a58:	1a1a      	subs	r2, r3, r0
 8000a5a:	0150      	lsls	r0, r2, #5
 8000a5c:	d520      	bpl.n	8000aa0 <__aeabi_fsub+0x370>
 8000a5e:	464a      	mov	r2, r9
 8000a60:	2407      	movs	r4, #7
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	401c      	ands	r4, r3
 8000a66:	4688      	mov	r8, r1
 8000a68:	2500      	movs	r5, #0
 8000a6a:	e6a6      	b.n	80007ba <__aeabi_fsub+0x8a>
 8000a6c:	1c74      	adds	r4, r6, #1
 8000a6e:	d0c9      	beq.n	8000a04 <__aeabi_fsub+0x2d4>
 8000a70:	43f6      	mvns	r6, r6
 8000a72:	28ff      	cmp	r0, #255	; 0xff
 8000a74:	d1bc      	bne.n	80009f0 <__aeabi_fsub+0x2c0>
 8000a76:	464b      	mov	r3, r9
 8000a78:	e720      	b.n	80008bc <__aeabi_fsub+0x18c>
 8000a7a:	4699      	mov	r9, r3
 8000a7c:	464b      	mov	r3, r9
 8000a7e:	2500      	movs	r5, #0
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	e72b      	b.n	80008dc <__aeabi_fsub+0x1ac>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e740      	b.n	800090a <__aeabi_fsub+0x1da>
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e6a9      	b.n	80007e2 <__aeabi_fsub+0xb2>
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	2200      	movs	r2, #0
 8000a92:	03db      	lsls	r3, r3, #15
 8000a94:	24ff      	movs	r4, #255	; 0xff
 8000a96:	e6a4      	b.n	80007e2 <__aeabi_fsub+0xb2>
 8000a98:	2500      	movs	r5, #0
 8000a9a:	e71c      	b.n	80008d6 <__aeabi_fsub+0x1a6>
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e7b1      	b.n	8000a04 <__aeabi_fsub+0x2d4>
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d0f1      	beq.n	8000a88 <__aeabi_fsub+0x358>
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	2500      	movs	r5, #0
 8000aa8:	e6fc      	b.n	80008a4 <__aeabi_fsub+0x174>
 8000aaa:	2500      	movs	r5, #0
 8000aac:	e6fa      	b.n	80008a4 <__aeabi_fsub+0x174>
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	7dffffff 	.word	0x7dffffff
 8000ab4:	fbffffff 	.word	0xfbffffff

08000ab8 <__aeabi_f2iz>:
 8000ab8:	0241      	lsls	r1, r0, #9
 8000aba:	0042      	lsls	r2, r0, #1
 8000abc:	0fc3      	lsrs	r3, r0, #31
 8000abe:	0a49      	lsrs	r1, r1, #9
 8000ac0:	0e12      	lsrs	r2, r2, #24
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2a7e      	cmp	r2, #126	; 0x7e
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_f2iz+0x2c>
 8000ac8:	2a9d      	cmp	r2, #157	; 0x9d
 8000aca:	d80c      	bhi.n	8000ae6 <__aeabi_f2iz+0x2e>
 8000acc:	2080      	movs	r0, #128	; 0x80
 8000ace:	0400      	lsls	r0, r0, #16
 8000ad0:	4301      	orrs	r1, r0
 8000ad2:	2a95      	cmp	r2, #149	; 0x95
 8000ad4:	dc0a      	bgt.n	8000aec <__aeabi_f2iz+0x34>
 8000ad6:	2096      	movs	r0, #150	; 0x96
 8000ad8:	1a82      	subs	r2, r0, r2
 8000ada:	40d1      	lsrs	r1, r2
 8000adc:	4248      	negs	r0, r1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_f2iz+0x2c>
 8000ae2:	0008      	movs	r0, r1
 8000ae4:	4770      	bx	lr
 8000ae6:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <__aeabi_f2iz+0x3c>)
 8000ae8:	1898      	adds	r0, r3, r2
 8000aea:	e7fb      	b.n	8000ae4 <__aeabi_f2iz+0x2c>
 8000aec:	3a96      	subs	r2, #150	; 0x96
 8000aee:	4091      	lsls	r1, r2
 8000af0:	e7f4      	b.n	8000adc <__aeabi_f2iz+0x24>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	7fffffff 	.word	0x7fffffff

08000af8 <__eqdf2>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	464f      	mov	r7, r9
 8000afc:	4646      	mov	r6, r8
 8000afe:	46d6      	mov	lr, sl
 8000b00:	4684      	mov	ip, r0
 8000b02:	b5c0      	push	{r6, r7, lr}
 8000b04:	4680      	mov	r8, r0
 8000b06:	4e19      	ldr	r6, [pc, #100]	; (8000b6c <__eqdf2+0x74>)
 8000b08:	0318      	lsls	r0, r3, #12
 8000b0a:	030f      	lsls	r7, r1, #12
 8000b0c:	004d      	lsls	r5, r1, #1
 8000b0e:	0b00      	lsrs	r0, r0, #12
 8000b10:	005c      	lsls	r4, r3, #1
 8000b12:	4682      	mov	sl, r0
 8000b14:	0b3f      	lsrs	r7, r7, #12
 8000b16:	0d6d      	lsrs	r5, r5, #21
 8000b18:	0fc9      	lsrs	r1, r1, #31
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	0d64      	lsrs	r4, r4, #21
 8000b1e:	0fdb      	lsrs	r3, r3, #31
 8000b20:	2001      	movs	r0, #1
 8000b22:	42b5      	cmp	r5, r6
 8000b24:	d00a      	beq.n	8000b3c <__eqdf2+0x44>
 8000b26:	42b4      	cmp	r4, r6
 8000b28:	d003      	beq.n	8000b32 <__eqdf2+0x3a>
 8000b2a:	42a5      	cmp	r5, r4
 8000b2c:	d101      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b2e:	4557      	cmp	r7, sl
 8000b30:	d00c      	beq.n	8000b4c <__eqdf2+0x54>
 8000b32:	bc1c      	pop	{r2, r3, r4}
 8000b34:	4690      	mov	r8, r2
 8000b36:	4699      	mov	r9, r3
 8000b38:	46a2      	mov	sl, r4
 8000b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3c:	4666      	mov	r6, ip
 8000b3e:	433e      	orrs	r6, r7
 8000b40:	d1f7      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b42:	42ac      	cmp	r4, r5
 8000b44:	d1f5      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b46:	4654      	mov	r4, sl
 8000b48:	4314      	orrs	r4, r2
 8000b4a:	d1f2      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	45c8      	cmp	r8, r9
 8000b50:	d1ef      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d007      	beq.n	8000b66 <__eqdf2+0x6e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d1eb      	bne.n	8000b32 <__eqdf2+0x3a>
 8000b5a:	4663      	mov	r3, ip
 8000b5c:	431f      	orrs	r7, r3
 8000b5e:	0038      	movs	r0, r7
 8000b60:	1e47      	subs	r7, r0, #1
 8000b62:	41b8      	sbcs	r0, r7
 8000b64:	e7e5      	b.n	8000b32 <__eqdf2+0x3a>
 8000b66:	2000      	movs	r0, #0
 8000b68:	e7e3      	b.n	8000b32 <__eqdf2+0x3a>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	000007ff 	.word	0x000007ff

08000b70 <__gedf2>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	464f      	mov	r7, r9
 8000b74:	4646      	mov	r6, r8
 8000b76:	46d6      	mov	lr, sl
 8000b78:	004d      	lsls	r5, r1, #1
 8000b7a:	b5c0      	push	{r6, r7, lr}
 8000b7c:	030e      	lsls	r6, r1, #12
 8000b7e:	0fc9      	lsrs	r1, r1, #31
 8000b80:	468a      	mov	sl, r1
 8000b82:	492c      	ldr	r1, [pc, #176]	; (8000c34 <__gedf2+0xc4>)
 8000b84:	031f      	lsls	r7, r3, #12
 8000b86:	005c      	lsls	r4, r3, #1
 8000b88:	4680      	mov	r8, r0
 8000b8a:	0b36      	lsrs	r6, r6, #12
 8000b8c:	0d6d      	lsrs	r5, r5, #21
 8000b8e:	4691      	mov	r9, r2
 8000b90:	0b3f      	lsrs	r7, r7, #12
 8000b92:	0d64      	lsrs	r4, r4, #21
 8000b94:	0fdb      	lsrs	r3, r3, #31
 8000b96:	428d      	cmp	r5, r1
 8000b98:	d01e      	beq.n	8000bd8 <__gedf2+0x68>
 8000b9a:	428c      	cmp	r4, r1
 8000b9c:	d016      	beq.n	8000bcc <__gedf2+0x5c>
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d11e      	bne.n	8000be0 <__gedf2+0x70>
 8000ba2:	4330      	orrs	r0, r6
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d101      	bne.n	8000bae <__gedf2+0x3e>
 8000baa:	433a      	orrs	r2, r7
 8000bac:	d023      	beq.n	8000bf6 <__gedf2+0x86>
 8000bae:	4662      	mov	r2, ip
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d01a      	beq.n	8000bea <__gedf2+0x7a>
 8000bb4:	459a      	cmp	sl, r3
 8000bb6:	d029      	beq.n	8000c0c <__gedf2+0x9c>
 8000bb8:	4651      	mov	r1, sl
 8000bba:	2002      	movs	r0, #2
 8000bbc:	3901      	subs	r1, #1
 8000bbe:	4008      	ands	r0, r1
 8000bc0:	3801      	subs	r0, #1
 8000bc2:	bc1c      	pop	{r2, r3, r4}
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	46a2      	mov	sl, r4
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	0039      	movs	r1, r7
 8000bce:	4311      	orrs	r1, r2
 8000bd0:	d0e5      	beq.n	8000b9e <__gedf2+0x2e>
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	e7f4      	b.n	8000bc2 <__gedf2+0x52>
 8000bd8:	4330      	orrs	r0, r6
 8000bda:	d1fa      	bne.n	8000bd2 <__gedf2+0x62>
 8000bdc:	42ac      	cmp	r4, r5
 8000bde:	d00f      	beq.n	8000c00 <__gedf2+0x90>
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d10f      	bne.n	8000c04 <__gedf2+0x94>
 8000be4:	433a      	orrs	r2, r7
 8000be6:	d0e7      	beq.n	8000bb8 <__gedf2+0x48>
 8000be8:	e00c      	b.n	8000c04 <__gedf2+0x94>
 8000bea:	2201      	movs	r2, #1
 8000bec:	3b01      	subs	r3, #1
 8000bee:	4393      	bics	r3, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	3001      	adds	r0, #1
 8000bf4:	e7e5      	b.n	8000bc2 <__gedf2+0x52>
 8000bf6:	4663      	mov	r3, ip
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0e1      	beq.n	8000bc2 <__gedf2+0x52>
 8000bfe:	e7db      	b.n	8000bb8 <__gedf2+0x48>
 8000c00:	433a      	orrs	r2, r7
 8000c02:	d1e6      	bne.n	8000bd2 <__gedf2+0x62>
 8000c04:	459a      	cmp	sl, r3
 8000c06:	d1d7      	bne.n	8000bb8 <__gedf2+0x48>
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	dcd5      	bgt.n	8000bb8 <__gedf2+0x48>
 8000c0c:	42a5      	cmp	r5, r4
 8000c0e:	db05      	blt.n	8000c1c <__gedf2+0xac>
 8000c10:	42be      	cmp	r6, r7
 8000c12:	d8d1      	bhi.n	8000bb8 <__gedf2+0x48>
 8000c14:	d008      	beq.n	8000c28 <__gedf2+0xb8>
 8000c16:	2000      	movs	r0, #0
 8000c18:	42be      	cmp	r6, r7
 8000c1a:	d2d2      	bcs.n	8000bc2 <__gedf2+0x52>
 8000c1c:	4650      	mov	r0, sl
 8000c1e:	2301      	movs	r3, #1
 8000c20:	3801      	subs	r0, #1
 8000c22:	4398      	bics	r0, r3
 8000c24:	3001      	adds	r0, #1
 8000c26:	e7cc      	b.n	8000bc2 <__gedf2+0x52>
 8000c28:	45c8      	cmp	r8, r9
 8000c2a:	d8c5      	bhi.n	8000bb8 <__gedf2+0x48>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	45c8      	cmp	r8, r9
 8000c30:	d3f4      	bcc.n	8000c1c <__gedf2+0xac>
 8000c32:	e7c6      	b.n	8000bc2 <__gedf2+0x52>
 8000c34:	000007ff 	.word	0x000007ff

08000c38 <__ledf2>:
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	464f      	mov	r7, r9
 8000c3c:	4646      	mov	r6, r8
 8000c3e:	46d6      	mov	lr, sl
 8000c40:	004d      	lsls	r5, r1, #1
 8000c42:	b5c0      	push	{r6, r7, lr}
 8000c44:	030e      	lsls	r6, r1, #12
 8000c46:	0fc9      	lsrs	r1, r1, #31
 8000c48:	468a      	mov	sl, r1
 8000c4a:	492e      	ldr	r1, [pc, #184]	; (8000d04 <__ledf2+0xcc>)
 8000c4c:	031f      	lsls	r7, r3, #12
 8000c4e:	005c      	lsls	r4, r3, #1
 8000c50:	4680      	mov	r8, r0
 8000c52:	0b36      	lsrs	r6, r6, #12
 8000c54:	0d6d      	lsrs	r5, r5, #21
 8000c56:	4691      	mov	r9, r2
 8000c58:	0b3f      	lsrs	r7, r7, #12
 8000c5a:	0d64      	lsrs	r4, r4, #21
 8000c5c:	0fdb      	lsrs	r3, r3, #31
 8000c5e:	428d      	cmp	r5, r1
 8000c60:	d018      	beq.n	8000c94 <__ledf2+0x5c>
 8000c62:	428c      	cmp	r4, r1
 8000c64:	d011      	beq.n	8000c8a <__ledf2+0x52>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d118      	bne.n	8000c9c <__ledf2+0x64>
 8000c6a:	4330      	orrs	r0, r6
 8000c6c:	4684      	mov	ip, r0
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d11e      	bne.n	8000cb0 <__ledf2+0x78>
 8000c72:	433a      	orrs	r2, r7
 8000c74:	d11c      	bne.n	8000cb0 <__ledf2+0x78>
 8000c76:	4663      	mov	r3, ip
 8000c78:	2000      	movs	r0, #0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d030      	beq.n	8000ce0 <__ledf2+0xa8>
 8000c7e:	4651      	mov	r1, sl
 8000c80:	2002      	movs	r0, #2
 8000c82:	3901      	subs	r1, #1
 8000c84:	4008      	ands	r0, r1
 8000c86:	3801      	subs	r0, #1
 8000c88:	e02a      	b.n	8000ce0 <__ledf2+0xa8>
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	4311      	orrs	r1, r2
 8000c8e:	d0ea      	beq.n	8000c66 <__ledf2+0x2e>
 8000c90:	2002      	movs	r0, #2
 8000c92:	e025      	b.n	8000ce0 <__ledf2+0xa8>
 8000c94:	4330      	orrs	r0, r6
 8000c96:	d1fb      	bne.n	8000c90 <__ledf2+0x58>
 8000c98:	42ac      	cmp	r4, r5
 8000c9a:	d026      	beq.n	8000cea <__ledf2+0xb2>
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d126      	bne.n	8000cee <__ledf2+0xb6>
 8000ca0:	433a      	orrs	r2, r7
 8000ca2:	d124      	bne.n	8000cee <__ledf2+0xb6>
 8000ca4:	4651      	mov	r1, sl
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	3901      	subs	r1, #1
 8000caa:	4008      	ands	r0, r1
 8000cac:	3801      	subs	r0, #1
 8000cae:	e017      	b.n	8000ce0 <__ledf2+0xa8>
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	d00f      	beq.n	8000cd6 <__ledf2+0x9e>
 8000cb6:	459a      	cmp	sl, r3
 8000cb8:	d1e1      	bne.n	8000c7e <__ledf2+0x46>
 8000cba:	42a5      	cmp	r5, r4
 8000cbc:	db05      	blt.n	8000cca <__ledf2+0x92>
 8000cbe:	42be      	cmp	r6, r7
 8000cc0:	d8dd      	bhi.n	8000c7e <__ledf2+0x46>
 8000cc2:	d019      	beq.n	8000cf8 <__ledf2+0xc0>
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	42be      	cmp	r6, r7
 8000cc8:	d20a      	bcs.n	8000ce0 <__ledf2+0xa8>
 8000cca:	4650      	mov	r0, sl
 8000ccc:	2301      	movs	r3, #1
 8000cce:	3801      	subs	r0, #1
 8000cd0:	4398      	bics	r0, r3
 8000cd2:	3001      	adds	r0, #1
 8000cd4:	e004      	b.n	8000ce0 <__ledf2+0xa8>
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4393      	bics	r3, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	3001      	adds	r0, #1
 8000ce0:	bc1c      	pop	{r2, r3, r4}
 8000ce2:	4690      	mov	r8, r2
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	46a2      	mov	sl, r4
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	433a      	orrs	r2, r7
 8000cec:	d1d0      	bne.n	8000c90 <__ledf2+0x58>
 8000cee:	459a      	cmp	sl, r3
 8000cf0:	d1c5      	bne.n	8000c7e <__ledf2+0x46>
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	dcc3      	bgt.n	8000c7e <__ledf2+0x46>
 8000cf6:	e7e0      	b.n	8000cba <__ledf2+0x82>
 8000cf8:	45c8      	cmp	r8, r9
 8000cfa:	d8c0      	bhi.n	8000c7e <__ledf2+0x46>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	45c8      	cmp	r8, r9
 8000d00:	d3e3      	bcc.n	8000cca <__ledf2+0x92>
 8000d02:	e7ed      	b.n	8000ce0 <__ledf2+0xa8>
 8000d04:	000007ff 	.word	0x000007ff

08000d08 <__aeabi_f2d>:
 8000d08:	0041      	lsls	r1, r0, #1
 8000d0a:	0e09      	lsrs	r1, r1, #24
 8000d0c:	1c4b      	adds	r3, r1, #1
 8000d0e:	b570      	push	{r4, r5, r6, lr}
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	0246      	lsls	r6, r0, #9
 8000d14:	0a75      	lsrs	r5, r6, #9
 8000d16:	0fc4      	lsrs	r4, r0, #31
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	dd14      	ble.n	8000d46 <__aeabi_f2d+0x3e>
 8000d1c:	23e0      	movs	r3, #224	; 0xe0
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	076d      	lsls	r5, r5, #29
 8000d22:	0b36      	lsrs	r6, r6, #12
 8000d24:	18cb      	adds	r3, r1, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	0d0a      	lsrs	r2, r1, #20
 8000d2a:	0028      	movs	r0, r5
 8000d2c:	0512      	lsls	r2, r2, #20
 8000d2e:	4d1c      	ldr	r5, [pc, #112]	; (8000da0 <__aeabi_f2d+0x98>)
 8000d30:	4332      	orrs	r2, r6
 8000d32:	055b      	lsls	r3, r3, #21
 8000d34:	402a      	ands	r2, r5
 8000d36:	085b      	lsrs	r3, r3, #1
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	07e4      	lsls	r4, r4, #31
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	4323      	orrs	r3, r4
 8000d42:	0019      	movs	r1, r3
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d114      	bne.n	8000d74 <__aeabi_f2d+0x6c>
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d01e      	beq.n	8000d8c <__aeabi_f2d+0x84>
 8000d4e:	0028      	movs	r0, r5
 8000d50:	f000 f82c 	bl	8000dac <__clzsi2>
 8000d54:	280a      	cmp	r0, #10
 8000d56:	dc1c      	bgt.n	8000d92 <__aeabi_f2d+0x8a>
 8000d58:	230b      	movs	r3, #11
 8000d5a:	002a      	movs	r2, r5
 8000d5c:	1a1b      	subs	r3, r3, r0
 8000d5e:	40da      	lsrs	r2, r3
 8000d60:	0003      	movs	r3, r0
 8000d62:	3315      	adds	r3, #21
 8000d64:	409d      	lsls	r5, r3
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <__aeabi_f2d+0x9c>)
 8000d68:	0312      	lsls	r2, r2, #12
 8000d6a:	1a1b      	subs	r3, r3, r0
 8000d6c:	055b      	lsls	r3, r3, #21
 8000d6e:	0b16      	lsrs	r6, r2, #12
 8000d70:	0d5b      	lsrs	r3, r3, #21
 8000d72:	e7d8      	b.n	8000d26 <__aeabi_f2d+0x1e>
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d006      	beq.n	8000d86 <__aeabi_f2d+0x7e>
 8000d78:	0b32      	lsrs	r2, r6, #12
 8000d7a:	2680      	movs	r6, #128	; 0x80
 8000d7c:	0336      	lsls	r6, r6, #12
 8000d7e:	076d      	lsls	r5, r5, #29
 8000d80:	4316      	orrs	r6, r2
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <__aeabi_f2d+0xa0>)
 8000d84:	e7cf      	b.n	8000d26 <__aeabi_f2d+0x1e>
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <__aeabi_f2d+0xa0>)
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e7cc      	b.n	8000d26 <__aeabi_f2d+0x1e>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	2600      	movs	r6, #0
 8000d90:	e7c9      	b.n	8000d26 <__aeabi_f2d+0x1e>
 8000d92:	0003      	movs	r3, r0
 8000d94:	002a      	movs	r2, r5
 8000d96:	3b0b      	subs	r3, #11
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	2500      	movs	r5, #0
 8000d9c:	e7e3      	b.n	8000d66 <__aeabi_f2d+0x5e>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	800fffff 	.word	0x800fffff
 8000da4:	00000389 	.word	0x00000389
 8000da8:	000007ff 	.word	0x000007ff

08000dac <__clzsi2>:
 8000dac:	211c      	movs	r1, #28
 8000dae:	2301      	movs	r3, #1
 8000db0:	041b      	lsls	r3, r3, #16
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d301      	bcc.n	8000dba <__clzsi2+0xe>
 8000db6:	0c00      	lsrs	r0, r0, #16
 8000db8:	3910      	subs	r1, #16
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	d301      	bcc.n	8000dc4 <__clzsi2+0x18>
 8000dc0:	0a00      	lsrs	r0, r0, #8
 8000dc2:	3908      	subs	r1, #8
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	4298      	cmp	r0, r3
 8000dc8:	d301      	bcc.n	8000dce <__clzsi2+0x22>
 8000dca:	0900      	lsrs	r0, r0, #4
 8000dcc:	3904      	subs	r1, #4
 8000dce:	a202      	add	r2, pc, #8	; (adr r2, 8000dd8 <__clzsi2+0x2c>)
 8000dd0:	5c10      	ldrb	r0, [r2, r0]
 8000dd2:	1840      	adds	r0, r0, r1
 8000dd4:	4770      	bx	lr
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	02020304 	.word	0x02020304
 8000ddc:	01010101 	.word	0x01010101
	...

08000de8 <VL53L0X_init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X_init(struct VL53L0X* dev)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (dev->io_2v8)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00e      	beq.n	8000e16 <VL53L0X_init+0x2e>
  {
    VL53L0X_writeReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, VL53L0X_readReg(dev, VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01 ); // set bit 0
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2189      	movs	r1, #137	; 0x89
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 fbd7 	bl	80015b0 <VL53L0X_readReg>
 8000e02:	0003      	movs	r3, r0
 8000e04:	001a      	movs	r2, r3
 8000e06:	2301      	movs	r3, #1
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2189      	movs	r1, #137	; 0x89
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 fb33 	bl	800147c <VL53L0X_writeReg>
  }

  // "Set I2C standard mode"
  VL53L0X_writeReg(dev, 0x88, 0x00);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2188      	movs	r1, #136	; 0x88
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 fb2d 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2201      	movs	r2, #1
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fb27 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	21ff      	movs	r1, #255	; 0xff
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fb21 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 fb1b 	bl	800147c <VL53L0X_writeReg>
  dev->stop_variable = VL53L0X_readReg(dev, 0x91);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2191      	movs	r1, #145	; 0x91
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fbb0 	bl	80015b0 <VL53L0X_readReg>
 8000e50:	0003      	movs	r3, r0
 8000e52:	001a      	movs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	741a      	strb	r2, [r3, #16]
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fb0c 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	21ff      	movs	r1, #255	; 0xff
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f000 fb06 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 fb00 	bl	800147c <VL53L0X_writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  VL53L0X_writeReg(dev, MSRC_CONFIG_CONTROL, VL53L0X_readReg(dev,  MSRC_CONFIG_CONTROL) | 0x12);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2160      	movs	r1, #96	; 0x60
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fb95 	bl	80015b0 <VL53L0X_readReg>
 8000e86:	0003      	movs	r3, r0
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2160      	movs	r1, #96	; 0x60
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 faf1 	bl	800147c <VL53L0X_writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(dev, 0.25);
 8000e9a:	22fa      	movs	r2, #250	; 0xfa
 8000e9c:	0592      	lsls	r2, r2, #22
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	1c11      	adds	r1, r2, #0
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f000 fc46 	bl	8001734 <VL53L0X_setSignalRateLimit>

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	2101      	movs	r1, #1
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 fae4 	bl	800147c <VL53L0X_writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(dev, &spad_count, &spad_type_is_aperture)) { return false; }
 8000eb4:	2313      	movs	r3, #19
 8000eb6:	18fa      	adds	r2, r7, r3
 8000eb8:	2314      	movs	r3, #20
 8000eba:	18f9      	adds	r1, r7, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 f83c 	bl	8001f3c <VL53L0X_getSpadInfo>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	2301      	movs	r3, #1
 8000eca:	4053      	eors	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <VL53L0X_init+0xee>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e2cd      	b.n	8001472 <VL53L0X_init+0x68a>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  VL53L0X_readMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	18fa      	adds	r2, r7, r3
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	2306      	movs	r3, #6
 8000ede:	21b0      	movs	r1, #176	; 0xb0
 8000ee0:	f000 fbf8 	bl	80016d4 <VL53L0X_readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	21ff      	movs	r1, #255	; 0xff
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 fac6 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	214f      	movs	r1, #79	; 0x4f
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fac0 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	222c      	movs	r2, #44	; 0x2c
 8000f00:	214e      	movs	r1, #78	; 0x4e
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 faba 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	21ff      	movs	r1, #255	; 0xff
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 fab4 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	22b4      	movs	r2, #180	; 0xb4
 8000f18:	21b6      	movs	r1, #182	; 0xb6
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 faae 	bl	800147c <VL53L0X_writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8000f20:	2313      	movs	r3, #19
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <VL53L0X_init+0x146>
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	e000      	b.n	8000f30 <VL53L0X_init+0x148>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2315      	movs	r3, #21
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	701a      	strb	r2, [r3, #0]
  uint8_t spads_enabled = 0;
 8000f36:	2317      	movs	r3, #23
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < 48; i++)
 8000f3e:	2316      	movs	r3, #22
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e049      	b.n	8000fdc <VL53L0X_init+0x1f4>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8000f48:	2316      	movs	r3, #22
 8000f4a:	18fa      	adds	r2, r7, r3
 8000f4c:	2315      	movs	r3, #21
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d307      	bcc.n	8000f68 <VL53L0X_init+0x180>
 8000f58:	2314      	movs	r3, #20
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2217      	movs	r2, #23
 8000f60:	18ba      	adds	r2, r7, r2
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d11a      	bne.n	8000f9e <VL53L0X_init+0x1b6>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8000f68:	2116      	movs	r1, #22
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	b2d8      	uxtb	r0, r3
 8000f72:	0002      	movs	r2, r0
 8000f74:	240c      	movs	r4, #12
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	5c9b      	ldrb	r3, [r3, r2]
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	187a      	adds	r2, r7, r1
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	2107      	movs	r1, #7
 8000f82:	400a      	ands	r2, r1
 8000f84:	2101      	movs	r1, #1
 8000f86:	4091      	lsls	r1, r2
 8000f88:	000a      	movs	r2, r1
 8000f8a:	b252      	sxtb	r2, r2
 8000f8c:	43d2      	mvns	r2, r2
 8000f8e:	b252      	sxtb	r2, r2
 8000f90:	4013      	ands	r3, r2
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	0002      	movs	r2, r0
 8000f96:	b2d9      	uxtb	r1, r3
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	5499      	strb	r1, [r3, r2]
 8000f9c:	e018      	b.n	8000fd0 <VL53L0X_init+0x1e8>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8000f9e:	2016      	movs	r0, #22
 8000fa0:	183b      	adds	r3, r7, r0
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	001a      	movs	r2, r3
 8000faa:	230c      	movs	r3, #12
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	5c9b      	ldrb	r3, [r3, r2]
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	183b      	adds	r3, r7, r0
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	4013      	ands	r3, r2
 8000fba:	4119      	asrs	r1, r3
 8000fbc:	000b      	movs	r3, r1
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d005      	beq.n	8000fd0 <VL53L0X_init+0x1e8>
    {
      spads_enabled++;
 8000fc4:	2117      	movs	r1, #23
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	3201      	adds	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 48; i++)
 8000fd0:	2116      	movs	r1, #22
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	3201      	adds	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	2316      	movs	r3, #22
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fe4:	d9b0      	bls.n	8000f48 <VL53L0X_init+0x160>
    }
  }

  VL53L0X_writeMulti(dev, GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	18fa      	adds	r2, r7, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	2306      	movs	r3, #6
 8000fee:	21b0      	movs	r1, #176	; 0xb0
 8000ff0:	f000 fb34 	bl	800165c <VL53L0X_writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	21ff      	movs	r1, #255	; 0xff
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 fa3e 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	0018      	movs	r0, r3
 8001008:	f000 fa38 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	21ff      	movs	r1, #255	; 0xff
 8001012:	0018      	movs	r0, r3
 8001014:	f000 fa32 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x09, 0x00);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	2109      	movs	r1, #9
 800101e:	0018      	movs	r0, r3
 8001020:	f000 fa2c 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x10, 0x00);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	2110      	movs	r1, #16
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fa26 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x11, 0x00);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	2111      	movs	r1, #17
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fa20 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x24, 0x01);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	2124      	movs	r1, #36	; 0x24
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fa1a 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x25, 0xFF);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	22ff      	movs	r2, #255	; 0xff
 800104c:	2125      	movs	r1, #37	; 0x25
 800104e:	0018      	movs	r0, r3
 8001050:	f000 fa14 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x75, 0x00);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	2175      	movs	r1, #117	; 0x75
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fa0e 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	21ff      	movs	r1, #255	; 0xff
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fa08 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4E, 0x2C);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	222c      	movs	r2, #44	; 0x2c
 8001070:	214e      	movs	r1, #78	; 0x4e
 8001072:	0018      	movs	r0, r3
 8001074:	f000 fa02 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x48, 0x00);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	2148      	movs	r1, #72	; 0x48
 800107e:	0018      	movs	r0, r3
 8001080:	f000 f9fc 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x30, 0x20);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2220      	movs	r2, #32
 8001088:	2130      	movs	r1, #48	; 0x30
 800108a:	0018      	movs	r0, r3
 800108c:	f000 f9f6 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	21ff      	movs	r1, #255	; 0xff
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f9f0 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x30, 0x09);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2209      	movs	r2, #9
 80010a0:	2130      	movs	r1, #48	; 0x30
 80010a2:	0018      	movs	r0, r3
 80010a4:	f000 f9ea 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x54, 0x00);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	2154      	movs	r1, #84	; 0x54
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 f9e4 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x31, 0x04);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	2131      	movs	r1, #49	; 0x31
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 f9de 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x32, 0x03);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2203      	movs	r2, #3
 80010c4:	2132      	movs	r1, #50	; 0x32
 80010c6:	0018      	movs	r0, r3
 80010c8:	f000 f9d8 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x40, 0x83);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2283      	movs	r2, #131	; 0x83
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 f9d2 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x46, 0x25);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2225      	movs	r2, #37	; 0x25
 80010dc:	2146      	movs	r1, #70	; 0x46
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 f9cc 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x60, 0x00);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	2160      	movs	r1, #96	; 0x60
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 f9c6 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x27, 0x00);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	2127      	movs	r1, #39	; 0x27
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f9c0 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x50, 0x06);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2206      	movs	r2, #6
 8001100:	2150      	movs	r1, #80	; 0x50
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f9ba 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x51, 0x00);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	2151      	movs	r1, #81	; 0x51
 800110e:	0018      	movs	r0, r3
 8001110:	f000 f9b4 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x52, 0x96);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2296      	movs	r2, #150	; 0x96
 8001118:	2152      	movs	r1, #82	; 0x52
 800111a:	0018      	movs	r0, r3
 800111c:	f000 f9ae 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x56, 0x08);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2208      	movs	r2, #8
 8001124:	2156      	movs	r1, #86	; 0x56
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f9a8 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x57, 0x30);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	2157      	movs	r1, #87	; 0x57
 8001132:	0018      	movs	r0, r3
 8001134:	f000 f9a2 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x61, 0x00);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	2161      	movs	r1, #97	; 0x61
 800113e:	0018      	movs	r0, r3
 8001140:	f000 f99c 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x62, 0x00);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	2162      	movs	r1, #98	; 0x62
 800114a:	0018      	movs	r0, r3
 800114c:	f000 f996 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x64, 0x00);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	2164      	movs	r1, #100	; 0x64
 8001156:	0018      	movs	r0, r3
 8001158:	f000 f990 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x65, 0x00);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	2165      	movs	r1, #101	; 0x65
 8001162:	0018      	movs	r0, r3
 8001164:	f000 f98a 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x66, 0xA0);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	22a0      	movs	r2, #160	; 0xa0
 800116c:	2166      	movs	r1, #102	; 0x66
 800116e:	0018      	movs	r0, r3
 8001170:	f000 f984 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	21ff      	movs	r1, #255	; 0xff
 800117a:	0018      	movs	r0, r3
 800117c:	f000 f97e 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x22, 0x32);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2232      	movs	r2, #50	; 0x32
 8001184:	2122      	movs	r1, #34	; 0x22
 8001186:	0018      	movs	r0, r3
 8001188:	f000 f978 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x47, 0x14);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2214      	movs	r2, #20
 8001190:	2147      	movs	r1, #71	; 0x47
 8001192:	0018      	movs	r0, r3
 8001194:	f000 f972 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x49, 0xFF);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	2149      	movs	r1, #73	; 0x49
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 f96c 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4A, 0x00);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	214a      	movs	r1, #74	; 0x4a
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 f966 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	21ff      	movs	r1, #255	; 0xff
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f960 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x7A, 0x0A);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	220a      	movs	r2, #10
 80011c0:	217a      	movs	r1, #122	; 0x7a
 80011c2:	0018      	movs	r0, r3
 80011c4:	f000 f95a 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x7B, 0x00);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	217b      	movs	r1, #123	; 0x7b
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 f954 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x78, 0x21);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2221      	movs	r2, #33	; 0x21
 80011d8:	2178      	movs	r1, #120	; 0x78
 80011da:	0018      	movs	r0, r3
 80011dc:	f000 f94e 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	21ff      	movs	r1, #255	; 0xff
 80011e6:	0018      	movs	r0, r3
 80011e8:	f000 f948 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x23, 0x34);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2234      	movs	r2, #52	; 0x34
 80011f0:	2123      	movs	r1, #35	; 0x23
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 f942 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x42, 0x00);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	2142      	movs	r1, #66	; 0x42
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 f93c 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x44, 0xFF);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	2144      	movs	r1, #68	; 0x44
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f936 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x45, 0x26);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2226      	movs	r2, #38	; 0x26
 8001214:	2145      	movs	r1, #69	; 0x45
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f930 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x46, 0x05);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2205      	movs	r2, #5
 8001220:	2146      	movs	r1, #70	; 0x46
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f92a 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x40, 0x40);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2240      	movs	r2, #64	; 0x40
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	0018      	movs	r0, r3
 8001230:	f000 f924 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x0E, 0x06);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2206      	movs	r2, #6
 8001238:	210e      	movs	r1, #14
 800123a:	0018      	movs	r0, r3
 800123c:	f000 f91e 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x20, 0x1A);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	221a      	movs	r2, #26
 8001244:	2120      	movs	r1, #32
 8001246:	0018      	movs	r0, r3
 8001248:	f000 f918 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x43, 0x40);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2240      	movs	r2, #64	; 0x40
 8001250:	2143      	movs	r1, #67	; 0x43
 8001252:	0018      	movs	r0, r3
 8001254:	f000 f912 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	21ff      	movs	r1, #255	; 0xff
 800125e:	0018      	movs	r0, r3
 8001260:	f000 f90c 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x34, 0x03);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2203      	movs	r2, #3
 8001268:	2134      	movs	r1, #52	; 0x34
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f906 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x35, 0x44);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2244      	movs	r2, #68	; 0x44
 8001274:	2135      	movs	r1, #53	; 0x35
 8001276:	0018      	movs	r0, r3
 8001278:	f000 f900 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	21ff      	movs	r1, #255	; 0xff
 8001282:	0018      	movs	r0, r3
 8001284:	f000 f8fa 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x31, 0x04);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2204      	movs	r2, #4
 800128c:	2131      	movs	r1, #49	; 0x31
 800128e:	0018      	movs	r0, r3
 8001290:	f000 f8f4 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4B, 0x09);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2209      	movs	r2, #9
 8001298:	214b      	movs	r1, #75	; 0x4b
 800129a:	0018      	movs	r0, r3
 800129c:	f000 f8ee 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4C, 0x05);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2205      	movs	r2, #5
 80012a4:	214c      	movs	r1, #76	; 0x4c
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 f8e8 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x4D, 0x04);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2204      	movs	r2, #4
 80012b0:	214d      	movs	r1, #77	; 0x4d
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 f8e2 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	21ff      	movs	r1, #255	; 0xff
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 f8dc 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x44, 0x00);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	2144      	movs	r1, #68	; 0x44
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 f8d6 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x45, 0x20);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2220      	movs	r2, #32
 80012d4:	2145      	movs	r1, #69	; 0x45
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f8d0 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x47, 0x08);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2208      	movs	r2, #8
 80012e0:	2147      	movs	r1, #71	; 0x47
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f8ca 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x48, 0x28);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2228      	movs	r2, #40	; 0x28
 80012ec:	2148      	movs	r1, #72	; 0x48
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 f8c4 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x67, 0x00);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	2167      	movs	r1, #103	; 0x67
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 f8be 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x70, 0x04);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2204      	movs	r2, #4
 8001304:	2170      	movs	r1, #112	; 0x70
 8001306:	0018      	movs	r0, r3
 8001308:	f000 f8b8 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x71, 0x01);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	2171      	movs	r1, #113	; 0x71
 8001312:	0018      	movs	r0, r3
 8001314:	f000 f8b2 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x72, 0xFE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	22fe      	movs	r2, #254	; 0xfe
 800131c:	2172      	movs	r1, #114	; 0x72
 800131e:	0018      	movs	r0, r3
 8001320:	f000 f8ac 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x76, 0x00);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	2176      	movs	r1, #118	; 0x76
 800132a:	0018      	movs	r0, r3
 800132c:	f000 f8a6 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x77, 0x00);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	2177      	movs	r1, #119	; 0x77
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f8a0 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	21ff      	movs	r1, #255	; 0xff
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f89a 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x0D, 0x01);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	210d      	movs	r1, #13
 800134e:	0018      	movs	r0, r3
 8001350:	f000 f894 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	21ff      	movs	r1, #255	; 0xff
 800135a:	0018      	movs	r0, r3
 800135c:	f000 f88e 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x01);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	0018      	movs	r0, r3
 8001368:	f000 f888 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x01, 0xF8);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	22f8      	movs	r2, #248	; 0xf8
 8001370:	2101      	movs	r1, #1
 8001372:	0018      	movs	r0, r3
 8001374:	f000 f882 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	21ff      	movs	r1, #255	; 0xff
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f87c 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x8E, 0x01);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	218e      	movs	r1, #142	; 0x8e
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f876 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	2100      	movs	r1, #0
 8001396:	0018      	movs	r0, r3
 8001398:	f000 f870 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	21ff      	movs	r1, #255	; 0xff
 80013a2:	0018      	movs	r0, r3
 80013a4:	f000 f86a 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f864 	bl	800147c <VL53L0X_writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2204      	movs	r2, #4
 80013b8:	210a      	movs	r1, #10
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 f85e 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, GPIO_HV_MUX_ACTIVE_HIGH, VL53L0X_readReg(dev,  GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2184      	movs	r1, #132	; 0x84
 80013c4:	0018      	movs	r0, r3
 80013c6:	f000 f8f3 	bl	80015b0 <VL53L0X_readReg>
 80013ca:	0003      	movs	r3, r0
 80013cc:	001a      	movs	r2, r3
 80013ce:	2310      	movs	r3, #16
 80013d0:	439a      	bics	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2184      	movs	r1, #132	; 0x84
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 f84e 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	210b      	movs	r1, #11
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 f848 	bl	800147c <VL53L0X_writeReg>

  // -- VL53L0X_SetGpioConfig() end

  dev->measurement_timing_budget_us = VL53L0X_getMeasurementTimingBudget(dev);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 fa9e 	bl	8001930 <VL53L0X_getMeasurementTimingBudget>
 80013f4:	0002      	movs	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	615a      	str	r2, [r3, #20]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	22e8      	movs	r2, #232	; 0xe8
 80013fe:	2101      	movs	r1, #1
 8001400:	0018      	movs	r0, r3
 8001402:	f000 f83b 	bl	800147c <VL53L0X_writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
 VL53L0X_setMeasurementTimingBudget(dev, dev->measurement_timing_budget_us);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0011      	movs	r1, r2
 800140e:	0018      	movs	r0, r3
 8001410:	f000 f9c0 	bl	8001794 <VL53L0X_setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	2101      	movs	r1, #1
 800141a:	0018      	movs	r0, r3
 800141c:	f000 f82e 	bl	800147c <VL53L0X_writeReg>
  if (!VL53L0X_performSingleRefCalibration(dev, 0x40)) { return false; }
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2140      	movs	r1, #64	; 0x40
 8001424:	0018      	movs	r0, r3
 8001426:	f000 ffb1 	bl	800238c <VL53L0X_performSingleRefCalibration>
 800142a:	0003      	movs	r3, r0
 800142c:	001a      	movs	r2, r3
 800142e:	2301      	movs	r3, #1
 8001430:	4053      	eors	r3, r2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <VL53L0X_init+0x654>
 8001438:	2300      	movs	r3, #0
 800143a:	e01a      	b.n	8001472 <VL53L0X_init+0x68a>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x02);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	2101      	movs	r1, #1
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f81a 	bl	800147c <VL53L0X_writeReg>
  if (!VL53L0X_performSingleRefCalibration(dev, 0x00)) { return false; }
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2100      	movs	r1, #0
 800144c:	0018      	movs	r0, r3
 800144e:	f000 ff9d 	bl	800238c <VL53L0X_performSingleRefCalibration>
 8001452:	0003      	movs	r3, r0
 8001454:	001a      	movs	r2, r3
 8001456:	2301      	movs	r3, #1
 8001458:	4053      	eors	r3, r2
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <VL53L0X_init+0x67c>
 8001460:	2300      	movs	r3, #0
 8001462:	e006      	b.n	8001472 <VL53L0X_init+0x68a>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	22e8      	movs	r2, #232	; 0xe8
 8001468:	2101      	movs	r1, #1
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f806 	bl	800147c <VL53L0X_writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 8001470:	2301      	movs	r3, #1
}
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b007      	add	sp, #28
 8001478:	bd90      	pop	{r4, r7, pc}
	...

0800147c <VL53L0X_writeReg>:

// Write an 8-bit register
void VL53L0X_writeReg(struct VL53L0X* dev, uint8_t reg, uint8_t value)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af02      	add	r7, sp, #8
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	0008      	movs	r0, r1
 8001486:	0011      	movs	r1, r2
 8001488:	1cfb      	adds	r3, r7, #3
 800148a:	1c02      	adds	r2, r0, #0
 800148c:	701a      	strb	r2, [r3, #0]
 800148e:	1cbb      	adds	r3, r7, #2
 8001490:	1c0a      	adds	r2, r1, #0
 8001492:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = reg;
 8001494:	200c      	movs	r0, #12
 8001496:	183b      	adds	r3, r7, r0
 8001498:	1cfa      	adds	r2, r7, #3
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	701a      	strb	r2, [r3, #0]
	buf[1] = value;
 800149e:	183b      	adds	r3, r7, r0
 80014a0:	1cba      	adds	r2, r7, #2
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	705a      	strb	r2, [r3, #1]
	//dev->last_status = i2c_write(dev->address, buf, 2);
	dev->last_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), buf, 2, 1000);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	18db      	adds	r3, r3, r3
 80014ae:	b299      	uxth	r1, r3
 80014b0:	183a      	adds	r2, r7, r0
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <VL53L0X_writeReg+0x54>)
 80014b4:	23fa      	movs	r3, #250	; 0xfa
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2302      	movs	r3, #2
 80014bc:	f002 f9e8 	bl	8003890 <HAL_I2C_Master_Transmit>
 80014c0:	0003      	movs	r3, r0
 80014c2:	001a      	movs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	701a      	strb	r2, [r3, #0]
	if (dev->last_status != HAL_OK) {
		//I2C_ClearBusyFlagErratum(&hi2c1, 1000);
	}
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b004      	add	sp, #16
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000074 	.word	0x20000074

080014d4 <VL53L0X_writeReg16Bit>:

// Write a 16-bit register
void VL53L0X_writeReg16Bit(struct VL53L0X* dev, uint8_t reg, uint16_t value)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	0008      	movs	r0, r1
 80014de:	0011      	movs	r1, r2
 80014e0:	1cfb      	adds	r3, r7, #3
 80014e2:	1c02      	adds	r2, r0, #0
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	003b      	movs	r3, r7
 80014e8:	1c0a      	adds	r2, r1, #0
 80014ea:	801a      	strh	r2, [r3, #0]
	uint8_t buf[3];
	buf[0] = reg;
 80014ec:	200c      	movs	r0, #12
 80014ee:	183b      	adds	r3, r7, r0
 80014f0:	1cfa      	adds	r2, r7, #3
 80014f2:	7812      	ldrb	r2, [r2, #0]
 80014f4:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t) (value >> 8);
 80014f6:	003b      	movs	r3, r7
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	183b      	adds	r3, r7, r0
 8001502:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t) (value & 0xFF);
 8001504:	003b      	movs	r3, r7
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	183b      	adds	r3, r7, r0
 800150c:	709a      	strb	r2, [r3, #2]
	//dev->last_status = i2c_write(dev->address, buf, 3);
	dev->last_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), buf, 3, 1000);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	789b      	ldrb	r3, [r3, #2]
 8001512:	b29b      	uxth	r3, r3
 8001514:	18db      	adds	r3, r3, r3
 8001516:	b299      	uxth	r1, r3
 8001518:	183a      	adds	r2, r7, r0
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <VL53L0X_writeReg16Bit+0x64>)
 800151c:	23fa      	movs	r3, #250	; 0xfa
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2303      	movs	r3, #3
 8001524:	f002 f9b4 	bl	8003890 <HAL_I2C_Master_Transmit>
 8001528:	0003      	movs	r3, r0
 800152a:	001a      	movs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	701a      	strb	r2, [r3, #0]
	if (dev->last_status != HAL_OK) {
		//I2C_ClearBusyFlagErratum(&hi2c1, 1000);
	}
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b004      	add	sp, #16
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000074 	.word	0x20000074

0800153c <VL53L0X_writeReg32Bit>:

// Write a 32-bit register
void VL53L0X_writeReg32Bit(struct VL53L0X* dev, uint8_t reg, uint32_t value)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	200b      	movs	r0, #11
 8001548:	183b      	adds	r3, r7, r0
 800154a:	1c0a      	adds	r2, r1, #0
 800154c:	701a      	strb	r2, [r3, #0]
	uint8_t buf[5];
	buf[0] = reg;
 800154e:	2110      	movs	r1, #16
 8001550:	187b      	adds	r3, r7, r1
 8001552:	183a      	adds	r2, r7, r0
 8001554:	7812      	ldrb	r2, [r2, #0]
 8001556:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t) (value >> 24);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	0e1b      	lsrs	r3, r3, #24
 800155c:	b2da      	uxtb	r2, r3
 800155e:	187b      	adds	r3, r7, r1
 8001560:	705a      	strb	r2, [r3, #1]
	buf[2] = (uint8_t) (value >> 16);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	0c1b      	lsrs	r3, r3, #16
 8001566:	b2da      	uxtb	r2, r3
 8001568:	187b      	adds	r3, r7, r1
 800156a:	709a      	strb	r2, [r3, #2]
	buf[3] = (uint8_t) (value >> 8);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b2da      	uxtb	r2, r3
 8001572:	187b      	adds	r3, r7, r1
 8001574:	70da      	strb	r2, [r3, #3]
	buf[4] = (uint8_t) (value & 0xFF);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	0008      	movs	r0, r1
 800157c:	187b      	adds	r3, r7, r1
 800157e:	711a      	strb	r2, [r3, #4]
	//dev->last_status = i2c_write(dev->address, buf, 5);
	dev->last_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), buf, 5, 1000);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	789b      	ldrb	r3, [r3, #2]
 8001584:	b29b      	uxth	r3, r3
 8001586:	18db      	adds	r3, r3, r3
 8001588:	b299      	uxth	r1, r3
 800158a:	183a      	adds	r2, r7, r0
 800158c:	4807      	ldr	r0, [pc, #28]	; (80015ac <VL53L0X_writeReg32Bit+0x70>)
 800158e:	23fa      	movs	r3, #250	; 0xfa
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2305      	movs	r3, #5
 8001596:	f002 f97b 	bl	8003890 <HAL_I2C_Master_Transmit>
 800159a:	0003      	movs	r3, r0
 800159c:	001a      	movs	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	701a      	strb	r2, [r3, #0]
	if (dev->last_status != HAL_OK) {
		//I2C_ClearBusyFlagErratum(&hi2c1, 1000);
	}
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b006      	add	sp, #24
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	20000074 	.word	0x20000074

080015b0 <VL53L0X_readReg>:

// Read an 8-bit register
uint8_t VL53L0X_readReg(struct VL53L0X* dev, uint8_t reg)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af04      	add	r7, sp, #16
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	000a      	movs	r2, r1
 80015ba:	1cfb      	adds	r3, r7, #3
 80015bc:	701a      	strb	r2, [r3, #0]
  uint8_t value;
  //i2c_write(dev->address, &reg, 1);
  //dev->last_status = i2c_read(dev->address, &value, 1);
  dev->last_status = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(dev->address << 1), reg, 1, &value, 1, 1000);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	789b      	ldrb	r3, [r3, #2]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	18db      	adds	r3, r3, r3
 80015c6:	b299      	uxth	r1, r3
 80015c8:	1cfb      	adds	r3, r7, #3
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <VL53L0X_readReg+0x4c>)
 80015d0:	23fa      	movs	r3, #250	; 0xfa
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	240f      	movs	r4, #15
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f002 fa5d 	bl	8003aa0 <HAL_I2C_Mem_Read>
 80015e6:	0003      	movs	r3, r0
 80015e8:	001a      	movs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	701a      	strb	r2, [r3, #0]
  //HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
  if (dev->last_status != HAL_OK) {
	  //I2C_ClearBusyFlagErratum(&hi2c1, 1000);
  }
  return value;
 80015ee:	193b      	adds	r3, r7, r4
 80015f0:	781b      	ldrb	r3, [r3, #0]
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b005      	add	sp, #20
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	20000074 	.word	0x20000074

08001600 <VL53L0X_readReg16Bit>:

// Read a 16-bit register
uint16_t VL53L0X_readReg16Bit(struct VL53L0X* dev, uint8_t reg)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	000a      	movs	r2, r1
 800160a:	1cfb      	adds	r3, r7, #3
 800160c:	701a      	strb	r2, [r3, #0]
  uint16_t value;
  uint8_t buff[2];
  VL53L0X_readMulti(dev, reg, buff, 2);
 800160e:	2108      	movs	r1, #8
 8001610:	000c      	movs	r4, r1
 8001612:	187a      	adds	r2, r7, r1
 8001614:	1cfb      	adds	r3, r7, #3
 8001616:	7819      	ldrb	r1, [r3, #0]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	2302      	movs	r3, #2
 800161c:	f000 f85a 	bl	80016d4 <VL53L0X_readMulti>
  uint16_t tmp;
  tmp = buff[0];
 8001620:	0021      	movs	r1, r4
 8001622:	187b      	adds	r3, r7, r1
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	200e      	movs	r0, #14
 8001628:	183b      	adds	r3, r7, r0
 800162a:	801a      	strh	r2, [r3, #0]
  tmp <<= 8;
 800162c:	183b      	adds	r3, r7, r0
 800162e:	183a      	adds	r2, r7, r0
 8001630:	8812      	ldrh	r2, [r2, #0]
 8001632:	0212      	lsls	r2, r2, #8
 8001634:	801a      	strh	r2, [r3, #0]
  tmp |= buff[1];
 8001636:	187b      	adds	r3, r7, r1
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	b299      	uxth	r1, r3
 800163c:	183b      	adds	r3, r7, r0
 800163e:	183a      	adds	r2, r7, r0
 8001640:	8812      	ldrh	r2, [r2, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	801a      	strh	r2, [r3, #0]
  value = tmp;
 8001646:	210c      	movs	r1, #12
 8001648:	187b      	adds	r3, r7, r1
 800164a:	183a      	adds	r2, r7, r0
 800164c:	8812      	ldrh	r2, [r2, #0]
 800164e:	801a      	strh	r2, [r3, #0]
  if (dev->last_status != HAL_OK) {
	  //I2C_ClearBusyFlagErratum(&hi2c1, 1000);
  }
  return value;
 8001650:	187b      	adds	r3, r7, r1
 8001652:	881b      	ldrh	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b005      	add	sp, #20
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <VL53L0X_writeMulti>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X_writeMulti(struct VL53L0X* dev, uint8_t reg, uint8_t* src, uint8_t count)
{
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	0008      	movs	r0, r1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	0019      	movs	r1, r3
 800166a:	240b      	movs	r4, #11
 800166c:	193b      	adds	r3, r7, r4
 800166e:	1c02      	adds	r2, r0, #0
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	250a      	movs	r5, #10
 8001674:	197b      	adds	r3, r7, r5
 8001676:	1c0a      	adds	r2, r1, #0
 8001678:	701a      	strb	r2, [r3, #0]
	//i2c_write(dev->address, &reg, 1);
	//dev->last_status = i2c_write(dev->address, src, count);
	uint8_t data_index[1];
	data_index[0] = reg;
 800167a:	2014      	movs	r0, #20
 800167c:	183b      	adds	r3, r7, r0
 800167e:	193a      	adds	r2, r7, r4
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	701a      	strb	r2, [r3, #0]
	//xSemaphoreTake(xMutexI2C, portMAX_DELAY);
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), data_index, 1, 1000);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	789b      	ldrb	r3, [r3, #2]
 8001688:	b29b      	uxth	r3, r3
 800168a:	18db      	adds	r3, r3, r3
 800168c:	b299      	uxth	r1, r3
 800168e:	183a      	adds	r2, r7, r0
 8001690:	480f      	ldr	r0, [pc, #60]	; (80016d0 <VL53L0X_writeMulti+0x74>)
 8001692:	23fa      	movs	r3, #250	; 0xfa
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2301      	movs	r3, #1
 800169a:	f002 f8f9 	bl	8003890 <HAL_I2C_Master_Transmit>
	dev->last_status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(dev->address << 1), src, count, 1000);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	789b      	ldrb	r3, [r3, #2]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	18db      	adds	r3, r3, r3
 80016a6:	b299      	uxth	r1, r3
 80016a8:	197b      	adds	r3, r7, r5
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b29c      	uxth	r4, r3
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <VL53L0X_writeMulti+0x74>)
 80016b2:	23fa      	movs	r3, #250	; 0xfa
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	0023      	movs	r3, r4
 80016ba:	f002 f8e9 	bl	8003890 <HAL_I2C_Master_Transmit>
 80016be:	0003      	movs	r3, r0
 80016c0:	001a      	movs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	701a      	strb	r2, [r3, #0]
	if (dev->last_status != HAL_OK) {
	  	 //I2C_ClearBusyFlagErratum(&hi2c1, 1000);
	}
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b006      	add	sp, #24
 80016cc:	bdb0      	pop	{r4, r5, r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	20000074 	.word	0x20000074

080016d4 <VL53L0X_readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X_readMulti(struct VL53L0X* dev, uint8_t reg, uint8_t * dst, uint8_t count)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af04      	add	r7, sp, #16
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	0008      	movs	r0, r1
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	0019      	movs	r1, r3
 80016e2:	240b      	movs	r4, #11
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	1c02      	adds	r2, r0, #0
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	200a      	movs	r0, #10
 80016ec:	183b      	adds	r3, r7, r0
 80016ee:	1c0a      	adds	r2, r1, #0
 80016f0:	701a      	strb	r2, [r3, #0]
	//i2c_write(dev->address, &reg, 1);
	dev->last_status = HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(dev->address << 1), reg, 1, dst, count, 1000);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	789b      	ldrb	r3, [r3, #2]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	18db      	adds	r3, r3, r3
 80016fa:	b299      	uxth	r1, r3
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29c      	uxth	r4, r3
 8001702:	183b      	adds	r3, r7, r0
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <VL53L0X_readMulti+0x5c>)
 800170a:	22fa      	movs	r2, #250	; 0xfa
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	9202      	str	r2, [sp, #8]
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	0022      	movs	r2, r4
 800171a:	f002 f9c1 	bl	8003aa0 <HAL_I2C_Mem_Read>
 800171e:	0003      	movs	r3, r0
 8001720:	001a      	movs	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	701a      	strb	r2, [r3, #0]
	if (dev->last_status != HAL_OK) {
	  	 //I2C_ClearBusyFlagErratum(&hi2c1, 1000);
	}
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b005      	add	sp, #20
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	20000074 	.word	0x20000074

08001734 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X_setSignalRateLimit(struct VL53L0X* dev, float limit_Mcps)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 800173e:	2100      	movs	r1, #0
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7fe fdbd 	bl	80002c0 <__aeabi_fcmplt>
 8001746:	1e03      	subs	r3, r0, #0
 8001748:	d108      	bne.n	800175c <VL53L0X_setSignalRateLimit+0x28>
 800174a:	6838      	ldr	r0, [r7, #0]
 800174c:	f7ff fadc 	bl	8000d08 <__aeabi_f2d>
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <VL53L0X_setSignalRateLimit+0x58>)
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <VL53L0X_setSignalRateLimit+0x5c>)
 8001754:	f7fe fd8e 	bl	8000274 <__aeabi_dcmpgt>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d001      	beq.n	8001760 <VL53L0X_setSignalRateLimit+0x2c>
 800175c:	2300      	movs	r3, #0
 800175e:	e010      	b.n	8001782 <VL53L0X_setSignalRateLimit+0x4e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001760:	2186      	movs	r1, #134	; 0x86
 8001762:	05c9      	lsls	r1, r1, #23
 8001764:	6838      	ldr	r0, [r7, #0]
 8001766:	f7fe feb1 	bl	80004cc <__aeabi_fmul>
 800176a:	1c03      	adds	r3, r0, #0
 800176c:	1c18      	adds	r0, r3, #0
 800176e:	f7fe fdcf 	bl	8000310 <__aeabi_f2uiz>
 8001772:	0003      	movs	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2144      	movs	r1, #68	; 0x44
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff feaa 	bl	80014d4 <VL53L0X_writeReg16Bit>
  return true;
 8001780:	2301      	movs	r3, #1
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	0a3d70a4 	.word	0x0a3d70a4
 8001790:	407fffd7 	.word	0x407fffd7

08001794 <VL53L0X_setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X_setMeasurementTimingBudget(struct VL53L0X* dev, uint32_t budget_us)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b093      	sub	sp, #76	; 0x4c
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  struct VL53L0X_SequenceStepEnables enables;
  struct VL53L0X_SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800179e:	2340      	movs	r3, #64	; 0x40
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	22a5      	movs	r2, #165	; 0xa5
 80017a4:	00d2      	lsls	r2, r2, #3
 80017a6:	801a      	strh	r2, [r3, #0]
  uint16_t const EndOverhead        = 960;
 80017a8:	233e      	movs	r3, #62	; 0x3e
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	22f0      	movs	r2, #240	; 0xf0
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	801a      	strh	r2, [r3, #0]
  uint16_t const MsrcOverhead       = 660;
 80017b2:	233c      	movs	r3, #60	; 0x3c
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	22a5      	movs	r2, #165	; 0xa5
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	801a      	strh	r2, [r3, #0]
  uint16_t const TccOverhead        = 590;
 80017bc:	233a      	movs	r3, #58	; 0x3a
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <VL53L0X_setMeasurementTimingBudget+0x18c>)
 80017c2:	801a      	strh	r2, [r3, #0]
  uint16_t const DssOverhead        = 690;
 80017c4:	2338      	movs	r3, #56	; 0x38
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	4a56      	ldr	r2, [pc, #344]	; (8001924 <VL53L0X_setMeasurementTimingBudget+0x190>)
 80017ca:	801a      	strh	r2, [r3, #0]
  uint16_t const PreRangeOverhead   = 660;
 80017cc:	2336      	movs	r3, #54	; 0x36
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	22a5      	movs	r2, #165	; 0xa5
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	801a      	strh	r2, [r3, #0]
  uint16_t const FinalRangeOverhead = 550;
 80017d6:	2334      	movs	r3, #52	; 0x34
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	4a53      	ldr	r2, [pc, #332]	; (8001928 <VL53L0X_setMeasurementTimingBudget+0x194>)
 80017dc:	801a      	strh	r2, [r3, #0]

  uint32_t const MinTimingBudget = 20000;
 80017de:	4b53      	ldr	r3, [pc, #332]	; (800192c <VL53L0X_setMeasurementTimingBudget+0x198>)
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d201      	bcs.n	80017ee <VL53L0X_setMeasurementTimingBudget+0x5a>
 80017ea:	2300      	movs	r3, #0
 80017ec:	e093      	b.n	8001916 <VL53L0X_setMeasurementTimingBudget+0x182>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80017ee:	2340      	movs	r3, #64	; 0x40
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	881a      	ldrh	r2, [r3, #0]
 80017f4:	233e      	movs	r3, #62	; 0x3e
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	18d3      	adds	r3, r2, r3
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44

  VL53L0X_getSequenceStepEnables(dev, &enables);
 80017fe:	2424      	movs	r4, #36	; 0x24
 8001800:	193a      	adds	r2, r7, r4
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0011      	movs	r1, r2
 8001806:	0018      	movs	r0, r3
 8001808:	f000 fc54 	bl	80020b4 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 800180c:	230c      	movs	r3, #12
 800180e:	18fa      	adds	r2, r7, r3
 8001810:	1939      	adds	r1, r7, r4
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0018      	movs	r0, r3
 8001816:	f000 fc9d 	bl	8002154 <VL53L0X_getSequenceStepTimeouts>

  if (enables.tcc)
 800181a:	193b      	adds	r3, r7, r4
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <VL53L0X_setMeasurementTimingBudget+0xa2>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001822:	230c      	movs	r3, #12
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	233a      	movs	r3, #58	; 0x3a
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	18d3      	adds	r3, r2, r3
 8001830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001832:	18d3      	adds	r3, r2, r3
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 8001836:	2324      	movs	r3, #36	; 0x24
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <VL53L0X_setMeasurementTimingBudget+0xc4>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001840:	230c      	movs	r3, #12
 8001842:	18fb      	adds	r3, r7, r3
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	2338      	movs	r3, #56	; 0x38
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001852:	18d3      	adds	r3, r2, r3
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
 8001856:	e00e      	b.n	8001876 <VL53L0X_setMeasurementTimingBudget+0xe2>
  }
  else if (enables.msrc)
 8001858:	2324      	movs	r3, #36	; 0x24
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	785b      	ldrb	r3, [r3, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <VL53L0X_setMeasurementTimingBudget+0xe2>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8001862:	230c      	movs	r3, #12
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	233c      	movs	r3, #60	; 0x3c
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	18d3      	adds	r3, r2, r3
 8001870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001872:	18d3      	adds	r3, r2, r3
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 8001876:	2324      	movs	r3, #36	; 0x24
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	78db      	ldrb	r3, [r3, #3]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d009      	beq.n	8001894 <VL53L0X_setMeasurementTimingBudget+0x100>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001880:	230c      	movs	r3, #12
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	2336      	movs	r3, #54	; 0x36
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001890:	18d3      	adds	r3, r2, r3
 8001892:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 8001894:	2324      	movs	r3, #36	; 0x24
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03a      	beq.n	8001914 <VL53L0X_setMeasurementTimingBudget+0x180>
  {
    used_budget_us += FinalRangeOverhead;
 800189e:	2334      	movs	r3, #52	; 0x34
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018a6:	18d3      	adds	r3, r2, r3
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80018aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d901      	bls.n	80018b6 <VL53L0X_setMeasurementTimingBudget+0x122>
    {
      // "Requested timeout too big."
      return false;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e02f      	b.n	8001916 <VL53L0X_setMeasurementTimingBudget+0x182>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    // "For the final range timeout, the pre-range timeout
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 80018be:	230c      	movs	r3, #12
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	885b      	ldrh	r3, [r3, #2]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	0011      	movs	r1, r2
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 fd2d 	bl	800232a <VL53L0X_timeoutMicrosecondsToMclks>
 80018d0:	0002      	movs	r2, r0
 80018d2:	2342      	movs	r3, #66	; 0x42
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	801a      	strh	r2, [r3, #0]

    if (enables.pre_range)
 80018d8:	2324      	movs	r3, #36	; 0x24
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	78db      	ldrb	r3, [r3, #3]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <VL53L0X_setMeasurementTimingBudget+0x160>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80018e2:	230c      	movs	r3, #12
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	88d9      	ldrh	r1, [r3, #6]
 80018e8:	2242      	movs	r2, #66	; 0x42
 80018ea:	18bb      	adds	r3, r7, r2
 80018ec:	18ba      	adds	r2, r7, r2
 80018ee:	8812      	ldrh	r2, [r2, #0]
 80018f0:	188a      	adds	r2, r1, r2
 80018f2:	801a      	strh	r2, [r3, #0]
    }

    VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(final_range_timeout_mclks));
 80018f4:	2342      	movs	r3, #66	; 0x42
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 fcb1 	bl	8002262 <VL53L0X_encodeTimeout>
 8001900:	0003      	movs	r3, r0
 8001902:	001a      	movs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2171      	movs	r1, #113	; 0x71
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fde3 	bl	80014d4 <VL53L0X_writeReg16Bit>

    // set_sequence_step_timeout() end

    dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	615a      	str	r2, [r3, #20]
  }
  return true;
 8001914:	2301      	movs	r3, #1
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b013      	add	sp, #76	; 0x4c
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	0000024e 	.word	0x0000024e
 8001924:	000002b2 	.word	0x000002b2
 8001928:	00000226 	.word	0x00000226
 800192c:	00004e20 	.word	0x00004e20

08001930 <VL53L0X_getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X_getMeasurementTimingBudget(struct VL53L0X* dev)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b08f      	sub	sp, #60	; 0x3c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  struct VL53L0X_SequenceStepEnables enables;
  struct VL53L0X_SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8001938:	2132      	movs	r1, #50	; 0x32
 800193a:	187b      	adds	r3, r7, r1
 800193c:	4a42      	ldr	r2, [pc, #264]	; (8001a48 <VL53L0X_getMeasurementTimingBudget+0x118>)
 800193e:	801a      	strh	r2, [r3, #0]
  uint16_t const EndOverhead        = 960;
 8001940:	2030      	movs	r0, #48	; 0x30
 8001942:	183b      	adds	r3, r7, r0
 8001944:	22f0      	movs	r2, #240	; 0xf0
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	801a      	strh	r2, [r3, #0]
  uint16_t const MsrcOverhead       = 660;
 800194a:	232e      	movs	r3, #46	; 0x2e
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	22a5      	movs	r2, #165	; 0xa5
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	801a      	strh	r2, [r3, #0]
  uint16_t const TccOverhead        = 590;
 8001954:	232c      	movs	r3, #44	; 0x2c
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	4a3c      	ldr	r2, [pc, #240]	; (8001a4c <VL53L0X_getMeasurementTimingBudget+0x11c>)
 800195a:	801a      	strh	r2, [r3, #0]
  uint16_t const DssOverhead        = 690;
 800195c:	232a      	movs	r3, #42	; 0x2a
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <VL53L0X_getMeasurementTimingBudget+0x120>)
 8001962:	801a      	strh	r2, [r3, #0]
  uint16_t const PreRangeOverhead   = 660;
 8001964:	2328      	movs	r3, #40	; 0x28
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	22a5      	movs	r2, #165	; 0xa5
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	801a      	strh	r2, [r3, #0]
  uint16_t const FinalRangeOverhead = 550;
 800196e:	2326      	movs	r3, #38	; 0x26
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	4a38      	ldr	r2, [pc, #224]	; (8001a54 <VL53L0X_getMeasurementTimingBudget+0x124>)
 8001974:	801a      	strh	r2, [r3, #0]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8001976:	187b      	adds	r3, r7, r1
 8001978:	881a      	ldrh	r2, [r3, #0]
 800197a:	183b      	adds	r3, r7, r0
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	18d3      	adds	r3, r2, r3
 8001980:	637b      	str	r3, [r7, #52]	; 0x34

  VL53L0X_getSequenceStepEnables(dev, &enables);
 8001982:	2420      	movs	r4, #32
 8001984:	193a      	adds	r2, r7, r4
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0011      	movs	r1, r2
 800198a:	0018      	movs	r0, r3
 800198c:	f000 fb92 	bl	80020b4 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 8001990:	2308      	movs	r3, #8
 8001992:	18fa      	adds	r2, r7, r3
 8001994:	1939      	adds	r1, r7, r4
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f000 fbdb 	bl	8002154 <VL53L0X_getSequenceStepTimeouts>

  if (enables.tcc)
 800199e:	193b      	adds	r3, r7, r4
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <VL53L0X_getMeasurementTimingBudget+0x8a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80019a6:	2308      	movs	r3, #8
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	232c      	movs	r3, #44	; 0x2c
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	18d3      	adds	r3, r2, r3
 80019b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019b6:	18d3      	adds	r3, r2, r3
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 80019ba:	2320      	movs	r3, #32
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	789b      	ldrb	r3, [r3, #2]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00b      	beq.n	80019dc <VL53L0X_getMeasurementTimingBudget+0xac>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80019c4:	2308      	movs	r3, #8
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	232a      	movs	r3, #42	; 0x2a
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	18d3      	adds	r3, r2, r3
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d6:	18d3      	adds	r3, r2, r3
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
 80019da:	e00e      	b.n	80019fa <VL53L0X_getMeasurementTimingBudget+0xca>
  }
  else if (enables.msrc)
 80019dc:	2320      	movs	r3, #32
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <VL53L0X_getMeasurementTimingBudget+0xca>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80019e6:	2308      	movs	r3, #8
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	232e      	movs	r3, #46	; 0x2e
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019f6:	18d3      	adds	r3, r2, r3
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 80019fa:	2320      	movs	r3, #32
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	78db      	ldrb	r3, [r3, #3]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d009      	beq.n	8001a18 <VL53L0X_getMeasurementTimingBudget+0xe8>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8001a04:	2308      	movs	r3, #8
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	2328      	movs	r3, #40	; 0x28
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 8001a18:	2320      	movs	r3, #32
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	791b      	ldrb	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <VL53L0X_getMeasurementTimingBudget+0x106>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001a22:	2308      	movs	r3, #8
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	2326      	movs	r3, #38	; 0x26
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	18d3      	adds	r3, r2, r3
 8001a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a32:	18d3      	adds	r3, r2, r3
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
  }

  dev->measurement_timing_budget_us = budget_us; // store for internal reuse
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a3a:	615a      	str	r2, [r3, #20]
  return budget_us;
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b00f      	add	sp, #60	; 0x3c
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	00000776 	.word	0x00000776
 8001a4c:	0000024e 	.word	0x0000024e
 8001a50:	000002b2 	.word	0x000002b2
 8001a54:	00000226 	.word	0x00000226

08001a58 <VL53L0X_setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool VL53L0X_setVcselPulsePeriod(struct VL53L0X* dev, enum VL53L0X_vcselPeriodType type, uint8_t period_pclks)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	0008      	movs	r0, r1
 8001a62:	0011      	movs	r1, r2
 8001a64:	1cfb      	adds	r3, r7, #3
 8001a66:	1c02      	adds	r2, r0, #0
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	1cbb      	adds	r3, r7, #2
 8001a6c:	1c0a      	adds	r2, r1, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8001a70:	1cbb      	adds	r3, r7, #2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	232d      	movs	r3, #45	; 0x2d
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	3a01      	subs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]

  struct VL53L0X_SequenceStepEnables enables;
  struct VL53L0X_SequenceStepTimeouts timeouts;

  VL53L0X_getSequenceStepEnables(dev, &enables);
 8001a80:	2420      	movs	r4, #32
 8001a82:	193a      	adds	r2, r7, r4
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	0011      	movs	r1, r2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 fb13 	bl	80020b4 <VL53L0X_getSequenceStepEnables>
  VL53L0X_getSequenceStepTimeouts(dev, &enables, &timeouts);
 8001a8e:	2308      	movs	r3, #8
 8001a90:	18fa      	adds	r2, r7, r3
 8001a92:	1939      	adds	r1, r7, r4
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 fb5c 	bl	8002154 <VL53L0X_getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001a9c:	1cfb      	adds	r3, r7, #3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d000      	beq.n	8001aa6 <VL53L0X_setVcselPulsePeriod+0x4e>
 8001aa4:	e071      	b.n	8001b8a <VL53L0X_setVcselPulsePeriod+0x132>
  {
    // "Set phase check limits"
    switch (period_pclks)
 8001aa6:	1cbb      	adds	r3, r7, #2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b0e      	cmp	r3, #14
 8001aac:	d00f      	beq.n	8001ace <VL53L0X_setVcselPulsePeriod+0x76>
 8001aae:	dc02      	bgt.n	8001ab6 <VL53L0X_setVcselPulsePeriod+0x5e>
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	d005      	beq.n	8001ac0 <VL53L0X_setVcselPulsePeriod+0x68>
 8001ab4:	e020      	b.n	8001af8 <VL53L0X_setVcselPulsePeriod+0xa0>
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d010      	beq.n	8001adc <VL53L0X_setVcselPulsePeriod+0x84>
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d015      	beq.n	8001aea <VL53L0X_setVcselPulsePeriod+0x92>
 8001abe:	e01b      	b.n	8001af8 <VL53L0X_setVcselPulsePeriod+0xa0>
    {
      case 12:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2218      	movs	r2, #24
 8001ac4:	2157      	movs	r1, #87	; 0x57
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff fcd8 	bl	800147c <VL53L0X_writeReg>
        break;
 8001acc:	e016      	b.n	8001afc <VL53L0X_setVcselPulsePeriod+0xa4>

      case 14:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2230      	movs	r2, #48	; 0x30
 8001ad2:	2157      	movs	r1, #87	; 0x57
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fcd1 	bl	800147c <VL53L0X_writeReg>
        break;
 8001ada:	e00f      	b.n	8001afc <VL53L0X_setVcselPulsePeriod+0xa4>

      case 16:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2240      	movs	r2, #64	; 0x40
 8001ae0:	2157      	movs	r1, #87	; 0x57
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7ff fcca 	bl	800147c <VL53L0X_writeReg>
        break;
 8001ae8:	e008      	b.n	8001afc <VL53L0X_setVcselPulsePeriod+0xa4>

      case 18:
        VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2250      	movs	r2, #80	; 0x50
 8001aee:	2157      	movs	r1, #87	; 0x57
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff fcc3 	bl	800147c <VL53L0X_writeReg>
        break;
 8001af6:	e001      	b.n	8001afc <VL53L0X_setVcselPulsePeriod+0xa4>

      default:
        // invalid period
        return false;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e15d      	b.n	8001db8 <VL53L0X_setVcselPulsePeriod+0x360>
    }
    VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2208      	movs	r2, #8
 8001b00:	2156      	movs	r1, #86	; 0x56
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff fcba 	bl	800147c <VL53L0X_writeReg>

    // apply new VCSEL period
    VL53L0X_writeReg(dev, PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001b08:	232d      	movs	r3, #45	; 0x2d
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2150      	movs	r1, #80	; 0x50
 8001b12:	0018      	movs	r0, r3
 8001b14:	f7ff fcb2 	bl	800147c <VL53L0X_writeReg>
    // update timeouts

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8001b18:	2408      	movs	r4, #8
 8001b1a:	193b      	adds	r3, r7, r4
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	1cbb      	adds	r3, r7, #2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	0019      	movs	r1, r3
 8001b24:	0010      	movs	r0, r2
 8001b26:	f000 fc00 	bl	800232a <VL53L0X_timeoutMicrosecondsToMclks>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	212a      	movs	r1, #42	; 0x2a
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	801a      	strh	r2, [r3, #0]

    VL53L0X_writeReg16Bit(dev, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(new_pre_range_timeout_mclks));
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 fb93 	bl	8002262 <VL53L0X_encodeTimeout>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	001a      	movs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2151      	movs	r1, #81	; 0x51
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff fcc5 	bl	80014d4 <VL53L0X_writeReg16Bit>
    // set_sequence_step_timeout() end

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	0019      	movs	r1, r3
 8001b54:	0010      	movs	r0, r2
 8001b56:	f000 fbe8 	bl	800232a <VL53L0X_timeoutMicrosecondsToMclks>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	2128      	movs	r1, #40	; 0x28
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	801a      	strh	r2, [r3, #0]

    VL53L0X_writeReg(dev, MSRC_CONFIG_TIMEOUT_MACROP, (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	881a      	ldrh	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d806      	bhi.n	8001b7c <VL53L0X_setVcselPulsePeriod+0x124>
 8001b6e:	2328      	movs	r3, #40	; 0x28
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	e000      	b.n	8001b7e <VL53L0X_setVcselPulsePeriod+0x126>
 8001b7c:	23ff      	movs	r3, #255	; 0xff
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	001a      	movs	r2, r3
 8001b82:	2146      	movs	r1, #70	; 0x46
 8001b84:	f7ff fc7a 	bl	800147c <VL53L0X_writeReg>
 8001b88:	e0f3      	b.n	8001d72 <VL53L0X_setVcselPulsePeriod+0x31a>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001b8a:	1cfb      	adds	r3, r7, #3
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d000      	beq.n	8001b94 <VL53L0X_setVcselPulsePeriod+0x13c>
 8001b92:	e0ec      	b.n	8001d6e <VL53L0X_setVcselPulsePeriod+0x316>
  {
    switch (period_pclks)
 8001b94:	1cbb      	adds	r3, r7, #2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b0a      	cmp	r3, #10
 8001b9a:	d034      	beq.n	8001c06 <VL53L0X_setVcselPulsePeriod+0x1ae>
 8001b9c:	dc02      	bgt.n	8001ba4 <VL53L0X_setVcselPulsePeriod+0x14c>
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d006      	beq.n	8001bb0 <VL53L0X_setVcselPulsePeriod+0x158>
 8001ba2:	e0b1      	b.n	8001d08 <VL53L0X_setVcselPulsePeriod+0x2b0>
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d059      	beq.n	8001c5c <VL53L0X_setVcselPulsePeriod+0x204>
 8001ba8:	2b0e      	cmp	r3, #14
 8001baa:	d100      	bne.n	8001bae <VL53L0X_setVcselPulsePeriod+0x156>
 8001bac:	e081      	b.n	8001cb2 <VL53L0X_setVcselPulsePeriod+0x25a>
 8001bae:	e0ab      	b.n	8001d08 <VL53L0X_setVcselPulsePeriod+0x2b0>
    {
      case 8:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	2148      	movs	r1, #72	; 0x48
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff fc60 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	2147      	movs	r1, #71	; 0x47
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f7ff fc5a 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	2132      	movs	r1, #50	; 0x32
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7ff fc54 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	2130      	movs	r1, #48	; 0x30
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7ff fc4e 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	21ff      	movs	r1, #255	; 0xff
 8001be6:	0018      	movs	r0, r3
 8001be8:	f7ff fc48 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x30);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2230      	movs	r2, #48	; 0x30
 8001bf0:	2130      	movs	r1, #48	; 0x30
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7ff fc42 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	21ff      	movs	r1, #255	; 0xff
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff fc3c 	bl	800147c <VL53L0X_writeReg>
        break;
 8001c04:	e082      	b.n	8001d0c <VL53L0X_setVcselPulsePeriod+0x2b4>

      case 10:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2228      	movs	r2, #40	; 0x28
 8001c0a:	2148      	movs	r1, #72	; 0x48
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff fc35 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2208      	movs	r2, #8
 8001c16:	2147      	movs	r1, #71	; 0x47
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff fc2f 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2203      	movs	r2, #3
 8001c22:	2132      	movs	r1, #50	; 0x32
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff fc29 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2209      	movs	r2, #9
 8001c2e:	2130      	movs	r1, #48	; 0x30
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff fc23 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	21ff      	movs	r1, #255	; 0xff
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fc1d 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	2130      	movs	r1, #48	; 0x30
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff fc17 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	21ff      	movs	r1, #255	; 0xff
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff fc11 	bl	800147c <VL53L0X_writeReg>
        break;
 8001c5a:	e057      	b.n	8001d0c <VL53L0X_setVcselPulsePeriod+0x2b4>

      case 12:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2238      	movs	r2, #56	; 0x38
 8001c60:	2148      	movs	r1, #72	; 0x48
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff fc0a 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	2147      	movs	r1, #71	; 0x47
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7ff fc04 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	2132      	movs	r1, #50	; 0x32
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7ff fbfe 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2208      	movs	r2, #8
 8001c84:	2130      	movs	r1, #48	; 0x30
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7ff fbf8 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	21ff      	movs	r1, #255	; 0xff
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7ff fbf2 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	2130      	movs	r1, #48	; 0x30
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff fbec 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	21ff      	movs	r1, #255	; 0xff
 8001caa:	0018      	movs	r0, r3
 8001cac:	f7ff fbe6 	bl	800147c <VL53L0X_writeReg>
        break;
 8001cb0:	e02c      	b.n	8001d0c <VL53L0X_setVcselPulsePeriod+0x2b4>

      case 14:
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2248      	movs	r2, #72	; 0x48
 8001cb6:	2148      	movs	r1, #72	; 0x48
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fbdf 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	2147      	movs	r1, #71	; 0x47
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fbd9 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	2132      	movs	r1, #50	; 0x32
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff fbd3 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2207      	movs	r2, #7
 8001cda:	2130      	movs	r1, #48	; 0x30
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff fbcd 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	21ff      	movs	r1, #255	; 0xff
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff fbc7 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, ALGO_PHASECAL_LIM, 0x20);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	2130      	movs	r1, #48	; 0x30
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fbc1 	bl	800147c <VL53L0X_writeReg>
        VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	21ff      	movs	r1, #255	; 0xff
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff fbbb 	bl	800147c <VL53L0X_writeReg>
        break;
 8001d06:	e001      	b.n	8001d0c <VL53L0X_setVcselPulsePeriod+0x2b4>

      default:
        // invalid period
        return false;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e055      	b.n	8001db8 <VL53L0X_setVcselPulsePeriod+0x360>
    }

    // apply new VCSEL period
    VL53L0X_writeReg(dev, FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001d0c:	232d      	movs	r3, #45	; 0x2d
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2170      	movs	r1, #112	; 0x70
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7ff fbb0 	bl	800147c <VL53L0X_writeReg>
    // "For the final range timeout, the pre-range timeout
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks = VL53L0X_timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	1cbb      	adds	r3, r7, #2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	0019      	movs	r1, r3
 8001d28:	0010      	movs	r0, r2
 8001d2a:	f000 fafe 	bl	800232a <VL53L0X_timeoutMicrosecondsToMclks>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	232e      	movs	r3, #46	; 0x2e
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	801a      	strh	r2, [r3, #0]

    if (enables.pre_range)
 8001d36:	2320      	movs	r3, #32
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	78db      	ldrb	r3, [r3, #3]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <VL53L0X_setVcselPulsePeriod+0x2fa>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001d40:	2308      	movs	r3, #8
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	88d9      	ldrh	r1, [r3, #6]
 8001d46:	222e      	movs	r2, #46	; 0x2e
 8001d48:	18bb      	adds	r3, r7, r2
 8001d4a:	18ba      	adds	r2, r7, r2
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	188a      	adds	r2, r1, r2
 8001d50:	801a      	strh	r2, [r3, #0]
    }

    VL53L0X_writeReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, VL53L0X_encodeTimeout(new_final_range_timeout_mclks));
 8001d52:	232e      	movs	r3, #46	; 0x2e
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 fa82 	bl	8002262 <VL53L0X_encodeTimeout>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	001a      	movs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2171      	movs	r1, #113	; 0x71
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff fbb4 	bl	80014d4 <VL53L0X_writeReg16Bit>
 8001d6c:	e001      	b.n	8001d72 <VL53L0X_setVcselPulsePeriod+0x31a>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e022      	b.n	8001db8 <VL53L0X_setVcselPulsePeriod+0x360>
  }

  // "Finally, the timing budget must be re-applied"

  VL53L0X_setMeasurementTimingBudget(dev, dev->measurement_timing_budget_us);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0011      	movs	r1, r2
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff fd0a 	bl	8001794 <VL53L0X_setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = VL53L0X_readReg(dev,  SYSTEM_SEQUENCE_CONFIG);
 8001d80:	2527      	movs	r5, #39	; 0x27
 8001d82:	197c      	adds	r4, r7, r5
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2101      	movs	r1, #1
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fc11 	bl	80015b0 <VL53L0X_readReg>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	7023      	strb	r3, [r4, #0]
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	2101      	movs	r1, #1
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff fb6f 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_performSingleRefCalibration(dev, 0x0);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2100      	movs	r1, #0
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 faf2 	bl	800238c <VL53L0X_performSingleRefCalibration>
  VL53L0X_writeReg(dev, SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8001da8:	197b      	adds	r3, r7, r5
 8001daa:	781a      	ldrb	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2101      	movs	r1, #1
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff fb63 	bl	800147c <VL53L0X_writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b00c      	add	sp, #48	; 0x30
 8001dbe:	bdb0      	pop	{r4, r5, r7, pc}

08001dc0 <VL53L0X_getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X_getVcselPulsePeriod(struct VL53L0X* dev, enum VL53L0X_vcselPeriodType type)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	000a      	movs	r2, r1
 8001dca:	1cfb      	adds	r3, r7, #3
 8001dcc:	701a      	strb	r2, [r3, #0]
  if (type == VcselPeriodPreRange)
 8001dce:	1cfb      	adds	r3, r7, #3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10a      	bne.n	8001dec <VL53L0X_getVcselPulsePeriod+0x2c>
  {
    return decodeVcselPeriod(VL53L0X_readReg(dev,  PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2150      	movs	r1, #80	; 0x50
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff fbe8 	bl	80015b0 <VL53L0X_readReg>
 8001de0:	0003      	movs	r3, r0
 8001de2:	3301      	adds	r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	18db      	adds	r3, r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	e00f      	b.n	8001e0c <VL53L0X_getVcselPulsePeriod+0x4c>
  }
  else if (type == VcselPeriodFinalRange)
 8001dec:	1cfb      	adds	r3, r7, #3
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10a      	bne.n	8001e0a <VL53L0X_getVcselPulsePeriod+0x4a>
  {
    return decodeVcselPeriod(VL53L0X_readReg(dev,  FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2170      	movs	r1, #112	; 0x70
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff fbd9 	bl	80015b0 <VL53L0X_readReg>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	3301      	adds	r3, #1
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	18db      	adds	r3, r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	e000      	b.n	8001e0c <VL53L0X_getVcselPulsePeriod+0x4c>
  }
  else { return 255; }
 8001e0a:	23ff      	movs	r3, #255	; 0xff
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(struct VL53L0X* dev, uint32_t period_ms)
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  VL53L0X_writeReg(dev, 0x80, 0x01);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fb29 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	21ff      	movs	r1, #255	; 0xff
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff fb23 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff fb1d 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x91, dev->stop_variable);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7c1a      	ldrb	r2, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2191      	movs	r1, #145	; 0x91
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7ff fb16 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	2100      	movs	r1, #0
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7ff fb10 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	21ff      	movs	r1, #255	; 0xff
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff fb0a 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f7ff fb04 	bl	800147c <VL53L0X_writeReg>

  if (period_ms != 0)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d01f      	beq.n	8001eba <VL53L0X_startContinuous+0xa6>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = VL53L0X_readReg16Bit(dev, OSC_CALIBRATE_VAL);
 8001e7a:	250e      	movs	r5, #14
 8001e7c:	197c      	adds	r4, r7, r5
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	21f8      	movs	r1, #248	; 0xf8
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff fbbc 	bl	8001600 <VL53L0X_readReg16Bit>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	8023      	strh	r3, [r4, #0]

    if (osc_calibrate_val != 0)
 8001e8c:	197b      	adds	r3, r7, r5
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <VL53L0X_startContinuous+0x8c>
    {
      period_ms *= osc_calibrate_val;
 8001e94:	230e      	movs	r3, #14
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	4353      	muls	r3, r2
 8001e9e:	603b      	str	r3, [r7, #0]
    }

    VL53L0X_writeReg32Bit(dev, SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7ff fb48 	bl	800153c <VL53L0X_writeReg32Bit>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    VL53L0X_writeReg(dev, SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7ff fae2 	bl	800147c <VL53L0X_writeReg>
  else
  {
    // continuous back-to-back mode
    VL53L0X_writeReg(dev, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8001eb8:	e005      	b.n	8001ec6 <VL53L0X_startContinuous+0xb2>
    VL53L0X_writeReg(dev, SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff fadb 	bl	800147c <VL53L0X_writeReg>
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b004      	add	sp, #16
 8001ecc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ed0 <VL53L0X_readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X_readRangeContinuousMillimeters(struct VL53L0X* dev)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  VL53L0X_startTimeout(dev);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 fa90 	bl	8002400 <VL53L0X_startTimeout>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001ee0:	e00a      	b.n	8001ef8 <VL53L0X_readRangeContinuousMillimeters+0x28>
  {
    if (VL53L0X_checkTimeoutExpired(dev))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f000 fa99 	bl	800241c <VL53L0X_checkTimeoutExpired>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d004      	beq.n	8001ef8 <VL53L0X_readRangeContinuousMillimeters+0x28>
    {
      dev->did_timeout = true;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	721a      	strb	r2, [r3, #8]
      return 65535;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <VL53L0X_readRangeContinuousMillimeters+0x68>)
 8001ef6:	e01a      	b.n	8001f2e <VL53L0X_readRangeContinuousMillimeters+0x5e>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2113      	movs	r1, #19
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff fb57 	bl	80015b0 <VL53L0X_readReg>
 8001f02:	0003      	movs	r3, r0
 8001f04:	001a      	movs	r2, r3
 8001f06:	2307      	movs	r3, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d0ea      	beq.n	8001ee2 <VL53L0X_readRangeContinuousMillimeters+0x12>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = VL53L0X_readReg16Bit(dev, RESULT_RANGE_STATUS + 10);
 8001f0c:	250e      	movs	r5, #14
 8001f0e:	197c      	adds	r4, r7, r5
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	211e      	movs	r1, #30
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff fb73 	bl	8001600 <VL53L0X_readReg16Bit>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	8023      	strh	r3, [r4, #0]

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	210b      	movs	r1, #11
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff faa9 	bl	800147c <VL53L0X_writeReg>

  return range;
 8001f2a:	197b      	adds	r3, r7, r5
 8001f2c:	881b      	ldrh	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	0000ffff 	.word	0x0000ffff

08001f3c <VL53L0X_getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X_getSpadInfo(struct VL53L0X* dev, uint8_t * count, bool * type_is_aperture)
{
 8001f3c:	b5b0      	push	{r4, r5, r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2180      	movs	r1, #128	; 0x80
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7ff fa94 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	21ff      	movs	r1, #255	; 0xff
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f7ff fa8e 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x00);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7ff fa88 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x06);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2206      	movs	r2, #6
 8001f70:	21ff      	movs	r1, #255	; 0xff
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7ff fa82 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83) | 0x04);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2183      	movs	r1, #131	; 0x83
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7ff fb17 	bl	80015b0 <VL53L0X_readReg>
 8001f82:	0003      	movs	r3, r0
 8001f84:	001a      	movs	r2, r3
 8001f86:	2304      	movs	r3, #4
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2183      	movs	r1, #131	; 0x83
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7ff fa73 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x07);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2207      	movs	r2, #7
 8001f9a:	21ff      	movs	r1, #255	; 0xff
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff fa6d 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x81, 0x01);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2181      	movs	r1, #129	; 0x81
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff fa67 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x80, 0x01);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2180      	movs	r1, #128	; 0x80
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff fa61 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0x94, 0x6b);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	226b      	movs	r2, #107	; 0x6b
 8001fbe:	2194      	movs	r1, #148	; 0x94
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff fa5b 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, 0x00);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2183      	movs	r1, #131	; 0x83
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff fa55 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_startTimeout(dev);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 fa13 	bl	8002400 <VL53L0X_startTimeout>
  while (VL53L0X_readReg(dev,  0x83) == 0x00)
 8001fda:	e007      	b.n	8001fec <VL53L0X_getSpadInfo+0xb0>
  {
    if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fa1c 	bl	800241c <VL53L0X_checkTimeoutExpired>
 8001fe4:	1e03      	subs	r3, r0, #0
 8001fe6:	d001      	beq.n	8001fec <VL53L0X_getSpadInfo+0xb0>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e05f      	b.n	80020ac <VL53L0X_getSpadInfo+0x170>
  while (VL53L0X_readReg(dev,  0x83) == 0x00)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2183      	movs	r1, #131	; 0x83
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff fadd 	bl	80015b0 <VL53L0X_readReg>
 8001ff6:	1e03      	subs	r3, r0, #0
 8001ff8:	d0f0      	beq.n	8001fdc <VL53L0X_getSpadInfo+0xa0>
  }
  VL53L0X_writeReg(dev, 0x83, 0x01);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2183      	movs	r1, #131	; 0x83
 8002000:	0018      	movs	r0, r3
 8002002:	f7ff fa3b 	bl	800147c <VL53L0X_writeReg>
  tmp = VL53L0X_readReg(dev,  0x92);
 8002006:	2117      	movs	r1, #23
 8002008:	000d      	movs	r5, r1
 800200a:	187c      	adds	r4, r7, r1
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2192      	movs	r1, #146	; 0x92
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff facd 	bl	80015b0 <VL53L0X_readReg>
 8002016:	0003      	movs	r3, r0
 8002018:	7023      	strb	r3, [r4, #0]

  *count = tmp & 0x7f;
 800201a:	0029      	movs	r1, r5
 800201c:	187b      	adds	r3, r7, r1
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	227f      	movs	r2, #127	; 0x7f
 8002022:	4013      	ands	r3, r2
 8002024:	b2da      	uxtb	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 800202a:	187b      	adds	r3, r7, r1
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	09db      	lsrs	r3, r3, #7
 8002030:	b2db      	uxtb	r3, r3
 8002032:	001a      	movs	r2, r3
 8002034:	2301      	movs	r3, #1
 8002036:	4013      	ands	r3, r2
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	4193      	sbcs	r3, r2
 800203c:	b2da      	uxtb	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	701a      	strb	r2, [r3, #0]

  VL53L0X_writeReg(dev, 0x81, 0x00);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	2181      	movs	r1, #129	; 0x81
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff fa17 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x06);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2206      	movs	r2, #6
 8002052:	21ff      	movs	r1, #255	; 0xff
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff fa11 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x83, VL53L0X_readReg(dev,  0x83)  & ~0x04);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2183      	movs	r1, #131	; 0x83
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff faa6 	bl	80015b0 <VL53L0X_readReg>
 8002064:	0003      	movs	r3, r0
 8002066:	001a      	movs	r2, r3
 8002068:	2304      	movs	r3, #4
 800206a:	439a      	bics	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	b2da      	uxtb	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2183      	movs	r1, #131	; 0x83
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff fa01 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0xFF, 0x01);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	21ff      	movs	r1, #255	; 0xff
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff f9fb 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x00, 0x01);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	2100      	movs	r1, #0
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff f9f5 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, 0xFF, 0x00);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	21ff      	movs	r1, #255	; 0xff
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff f9ef 	bl	800147c <VL53L0X_writeReg>
  VL53L0X_writeReg(dev, 0x80, 0x00);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff f9e9 	bl	800147c <VL53L0X_writeReg>

  return true;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b006      	add	sp, #24
 80020b2:	bdb0      	pop	{r4, r5, r7, pc}

080020b4 <VL53L0X_getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X_getSequenceStepEnables(struct VL53L0X* dev, struct VL53L0X_SequenceStepEnables* enables)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = VL53L0X_readReg(dev,  SYSTEM_SEQUENCE_CONFIG);
 80020be:	210f      	movs	r1, #15
 80020c0:	000d      	movs	r5, r1
 80020c2:	187c      	adds	r4, r7, r1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2101      	movs	r1, #1
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff fa71 	bl	80015b0 <VL53L0X_readReg>
 80020ce:	0003      	movs	r3, r0
 80020d0:	7023      	strb	r3, [r4, #0]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 80020d2:	0029      	movs	r1, r5
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	001a      	movs	r2, r3
 80020de:	2301      	movs	r3, #1
 80020e0:	4013      	ands	r3, r2
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	4193      	sbcs	r3, r2
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	08db      	lsrs	r3, r3, #3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	001a      	movs	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	1e5a      	subs	r2, r3, #1
 80020fc:	4193      	sbcs	r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8002104:	187b      	adds	r3, r7, r1
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	b2db      	uxtb	r3, r3
 800210c:	001a      	movs	r2, r3
 800210e:	2301      	movs	r3, #1
 8002110:	4013      	ands	r3, r2
 8002112:	1e5a      	subs	r2, r3, #1
 8002114:	4193      	sbcs	r3, r2
 8002116:	b2da      	uxtb	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 800211c:	187b      	adds	r3, r7, r1
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	b2db      	uxtb	r3, r3
 8002124:	001a      	movs	r2, r3
 8002126:	2301      	movs	r3, #1
 8002128:	4013      	ands	r3, r2
 800212a:	1e5a      	subs	r2, r3, #1
 800212c:	4193      	sbcs	r3, r2
 800212e:	b2da      	uxtb	r2, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	09db      	lsrs	r3, r3, #7
 800213a:	b2db      	uxtb	r3, r3
 800213c:	001a      	movs	r2, r3
 800213e:	2301      	movs	r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	1e5a      	subs	r2, r3, #1
 8002144:	4193      	sbcs	r3, r2
 8002146:	b2da      	uxtb	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	711a      	strb	r2, [r3, #4]
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bdb0      	pop	{r4, r5, r7, pc}

08002154 <VL53L0X_getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X_getSequenceStepTimeouts(struct VL53L0X* dev, struct VL53L0X_SequenceStepEnables* enables, struct VL53L0X_SequenceStepTimeouts* timeouts)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodPreRange);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2100      	movs	r1, #0
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff fe2b 	bl	8001dc0 <VL53L0X_getVcselPulsePeriod>
 800216a:	0003      	movs	r3, r0
 800216c:	b29a      	uxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = VL53L0X_readReg(dev,  MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2146      	movs	r1, #70	; 0x46
 8002176:	0018      	movs	r0, r3
 8002178:	f7ff fa1a 	bl	80015b0 <VL53L0X_readReg>
 800217c:	0003      	movs	r3, r0
 800217e:	b29b      	uxth	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	889a      	ldrh	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	0019      	movs	r1, r3
 8002194:	0010      	movs	r0, r2
 8002196:	f000 f898 	bl	80022ca <VL53L0X_timeoutMclksToMicroseconds>
 800219a:	0002      	movs	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2151      	movs	r1, #81	; 0x51
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff fa2b 	bl	8001600 <VL53L0X_readReg16Bit>
 80021aa:	0003      	movs	r3, r0
 80021ac:	0018      	movs	r0, r3
 80021ae:	f000 f842 	bl	8002236 <VL53L0X_decodeTimeout>
 80021b2:	0003      	movs	r3, r0
 80021b4:	001a      	movs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	88da      	ldrh	r2, [r3, #6]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	0019      	movs	r1, r3
 80021c6:	0010      	movs	r0, r2
 80021c8:	f000 f87f 	bl	80022ca <VL53L0X_timeoutMclksToMicroseconds>
 80021cc:	0002      	movs	r2, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(dev, VcselPeriodFinalRange);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2101      	movs	r1, #1
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7ff fdf2 	bl	8001dc0 <VL53L0X_getVcselPulsePeriod>
 80021dc:	0003      	movs	r3, r0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks = VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(dev, FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2171      	movs	r1, #113	; 0x71
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff fa09 	bl	8001600 <VL53L0X_readReg16Bit>
 80021ee:	0003      	movs	r3, r0
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 f820 	bl	8002236 <VL53L0X_decodeTimeout>
 80021f6:	0003      	movs	r3, r0
 80021f8:	001a      	movs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	78db      	ldrb	r3, [r3, #3]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <VL53L0X_getSequenceStepTimeouts+0xc2>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	891a      	ldrh	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	88db      	ldrh	r3, [r3, #6]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us = VL53L0X_timeoutMclksToMicroseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	891a      	ldrh	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	885b      	ldrh	r3, [r3, #2]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	0019      	movs	r1, r3
 8002222:	0010      	movs	r0, r2
 8002224:	f000 f851 	bl	80022ca <VL53L0X_timeoutMclksToMicroseconds>
 8002228:	0002      	movs	r2, r0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	615a      	str	r2, [r3, #20]
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bd80      	pop	{r7, pc}

08002236 <VL53L0X_decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X_decodeTimeout(uint16_t reg_val)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	0002      	movs	r2, r0
 800223e:	1dbb      	adds	r3, r7, #6
 8002240:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002242:	1dbb      	adds	r3, r7, #6
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	4013      	ands	r3, r2
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800224a:	1dba      	adds	r2, r7, #6
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	0a12      	lsrs	r2, r2, #8
 8002250:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002252:	4093      	lsls	r3, r2
 8002254:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002256:	3301      	adds	r3, #1
 8002258:	b29b      	uxth	r3, r3
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b002      	add	sp, #8
 8002260:	bd80      	pop	{r7, pc}

08002262 <VL53L0X_encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t VL53L0X_encodeTimeout(uint16_t timeout_mclks)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	0002      	movs	r2, r0
 800226a:	1dbb      	adds	r3, r7, #6
 800226c:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8002272:	230a      	movs	r3, #10
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2200      	movs	r2, #0
 8002278:	801a      	strh	r2, [r3, #0]

  if (timeout_mclks > 0)
 800227a:	1dbb      	adds	r3, r7, #6
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01e      	beq.n	80022c0 <VL53L0X_encodeTimeout+0x5e>
  {
    ls_byte = timeout_mclks - 1;
 8002282:	1dbb      	adds	r3, r7, #6
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	3b01      	subs	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 800228a:	e008      	b.n	800229e <VL53L0X_encodeTimeout+0x3c>
    {
      ls_byte >>= 1;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8002292:	210a      	movs	r1, #10
 8002294:	187b      	adds	r3, r7, r1
 8002296:	881a      	ldrh	r2, [r3, #0]
 8002298:	187b      	adds	r3, r7, r1
 800229a:	3201      	adds	r2, #1
 800229c:	801a      	strh	r2, [r3, #0]
    while ((ls_byte & 0xFFFFFF00) > 0)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	22ff      	movs	r2, #255	; 0xff
 80022a2:	4393      	bics	r3, r2
 80022a4:	d1f2      	bne.n	800228c <VL53L0X_encodeTimeout+0x2a>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80022a6:	230a      	movs	r3, #10
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	21ff      	movs	r1, #255	; 0xff
 80022b6:	400b      	ands	r3, r1
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	e000      	b.n	80022c2 <VL53L0X_encodeTimeout+0x60>
  }
  else { return 0; }
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}

080022ca <VL53L0X_timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X_timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	0002      	movs	r2, r0
 80022d2:	1dbb      	adds	r3, r7, #6
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	1d7b      	adds	r3, r7, #5
 80022d8:	1c0a      	adds	r2, r1, #0
 80022da:	701a      	strb	r2, [r3, #0]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80022dc:	1d7b      	adds	r3, r7, #5
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	0013      	movs	r3, r2
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	189b      	adds	r3, r3, r2
 80022ea:	011a      	lsls	r2, r3, #4
 80022ec:	1ad2      	subs	r2, r2, r3
 80022ee:	0213      	lsls	r3, r2, #8
 80022f0:	001a      	movs	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	33f5      	adds	r3, #245	; 0xf5
 80022f6:	33ff      	adds	r3, #255	; 0xff
 80022f8:	001a      	movs	r2, r3
 80022fa:	23fa      	movs	r3, #250	; 0xfa
 80022fc:	0099      	lsls	r1, r3, #2
 80022fe:	0010      	movs	r0, r2
 8002300:	f7fd ff02 	bl	8000108 <__udivsi3>
 8002304:	0003      	movs	r3, r0
 8002306:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8002308:	1dbb      	adds	r3, r7, #6
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	435a      	muls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	18d2      	adds	r2, r2, r3
 8002316:	23fa      	movs	r3, #250	; 0xfa
 8002318:	0099      	lsls	r1, r3, #2
 800231a:	0010      	movs	r0, r2
 800231c:	f7fd fef4 	bl	8000108 <__udivsi3>
 8002320:	0003      	movs	r3, r0
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b004      	add	sp, #16
 8002328:	bd80      	pop	{r7, pc}

0800232a <VL53L0X_timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X_timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	000a      	movs	r2, r1
 8002334:	1cfb      	adds	r3, r7, #3
 8002336:	701a      	strb	r2, [r3, #0]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002338:	1cfb      	adds	r3, r7, #3
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	0013      	movs	r3, r2
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	015b      	lsls	r3, r3, #5
 8002344:	189b      	adds	r3, r3, r2
 8002346:	011a      	lsls	r2, r3, #4
 8002348:	1ad2      	subs	r2, r2, r3
 800234a:	0213      	lsls	r3, r2, #8
 800234c:	001a      	movs	r2, r3
 800234e:	0013      	movs	r3, r2
 8002350:	33f5      	adds	r3, #245	; 0xf5
 8002352:	33ff      	adds	r3, #255	; 0xff
 8002354:	001a      	movs	r2, r3
 8002356:	23fa      	movs	r3, #250	; 0xfa
 8002358:	0099      	lsls	r1, r3, #2
 800235a:	0010      	movs	r0, r2
 800235c:	f7fd fed4 	bl	8000108 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	0013      	movs	r3, r2
 8002368:	015b      	lsls	r3, r3, #5
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	189b      	adds	r3, r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	001a      	movs	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	18d3      	adds	r3, r2, r3
 800237a:	68f9      	ldr	r1, [r7, #12]
 800237c:	0018      	movs	r0, r3
 800237e:	f7fd fec3 	bl	8000108 <__udivsi3>
 8002382:	0003      	movs	r3, r0
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b004      	add	sp, #16
 800238a:	bd80      	pop	{r7, pc}

0800238c <VL53L0X_performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X_performSingleRefCalibration(struct VL53L0X* dev, uint8_t vhv_init_byte)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	000a      	movs	r2, r1
 8002396:	1cfb      	adds	r3, r7, #3
 8002398:	701a      	strb	r2, [r3, #0]
  VL53L0X_writeReg(dev, SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800239a:	1cfb      	adds	r3, r7, #3
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2201      	movs	r2, #1
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2100      	movs	r1, #0
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff f867 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_startTimeout(dev);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f825 	bl	8002400 <VL53L0X_startTimeout>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80023b6:	e007      	b.n	80023c8 <VL53L0X_performSingleRefCalibration+0x3c>
  {
    if (VL53L0X_checkTimeoutExpired(dev)) { return false; }
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 f82e 	bl	800241c <VL53L0X_checkTimeoutExpired>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d001      	beq.n	80023c8 <VL53L0X_performSingleRefCalibration+0x3c>
 80023c4:	2300      	movs	r3, #0
 80023c6:	e016      	b.n	80023f6 <VL53L0X_performSingleRefCalibration+0x6a>
  while ((VL53L0X_readReg(dev,  RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2113      	movs	r1, #19
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff f8ef 	bl	80015b0 <VL53L0X_readReg>
 80023d2:	0003      	movs	r3, r0
 80023d4:	001a      	movs	r2, r3
 80023d6:	2307      	movs	r3, #7
 80023d8:	4013      	ands	r3, r2
 80023da:	d0ed      	beq.n	80023b8 <VL53L0X_performSingleRefCalibration+0x2c>
  }

  VL53L0X_writeReg(dev, SYSTEM_INTERRUPT_CLEAR, 0x01);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	210b      	movs	r1, #11
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7ff f84a 	bl	800147c <VL53L0X_writeReg>

  VL53L0X_writeReg(dev, SYSRANGE_START, 0x00);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7ff f844 	bl	800147c <VL53L0X_writeReg>

  return true;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b002      	add	sp, #8
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <VL53L0X_startTimeout>:


void VL53L0X_startTimeout(struct VL53L0X* dev){
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	dev->timeout_start_ms = sysTick_Time;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <VL53L0X_startTimeout+0x18>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000048 	.word	0x20000048

0800241c <VL53L0X_checkTimeoutExpired>:

bool VL53L0X_checkTimeoutExpired(struct VL53L0X* dev){
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	return (dev->io_timeout > 0 && (sysTick_Time - dev->timeout_start_ms) > dev->io_timeout);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <VL53L0X_checkTimeoutExpired+0x26>
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <VL53L0X_checkTimeoutExpired+0x38>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	1ad2      	subs	r2, r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d901      	bls.n	8002442 <VL53L0X_checkTimeoutExpired+0x26>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <VL53L0X_checkTimeoutExpired+0x28>
 8002442:	2300      	movs	r3, #0
 8002444:	1c1a      	adds	r2, r3, #0
 8002446:	2301      	movs	r3, #1
 8002448:	4013      	ands	r3, r2
 800244a:	b2db      	uxtb	r3, r3
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000048 	.word	0x20000048

08002458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800245c:	f000 fba4 	bl	8002ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002460:	f000 f8a8 	bl	80025b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002464:	f000 f9d2 	bl	800280c <MX_GPIO_Init>
  MX_CAN_Init();
 8002468:	f000 f908 	bl	800267c <MX_CAN_Init>
  MX_I2C1_Init();
 800246c:	f000 f93c 	bl	80026e8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002470:	f000 f97a 	bl	8002768 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(VL53L0X_init(&myTOFsensor1)) {
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <main+0x12c>)
 8002476:	0018      	movs	r0, r3
 8002478:	f7fe fcb6 	bl	8000de8 <VL53L0X_init>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d003      	beq.n	8002488 <main+0x30>
      aa = 2;
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <main+0x130>)
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	e002      	b.n	800248e <main+0x36>
  }
  else {
	  aa = 1;
 8002488:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <main+0x130>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
  }

  #ifdef LONG_RANGE
	// lower the return signal rate limit (default is 0.25 MCPS)
  VL53L0X_setSignalRateLimit(&myTOFsensor1, 0.1);
 800248e:	4a3f      	ldr	r2, [pc, #252]	; (800258c <main+0x134>)
 8002490:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <main+0x12c>)
 8002492:	1c11      	adds	r1, r2, #0
 8002494:	0018      	movs	r0, r3
 8002496:	f7ff f94d 	bl	8001734 <VL53L0X_setSignalRateLimit>
	// increase laser pulse periods (defaults are 14 and 10 PCLKs)
  VL53L0X_setVcselPulsePeriod(&myTOFsensor1, VcselPeriodPreRange, 18);
 800249a:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <main+0x12c>)
 800249c:	2212      	movs	r2, #18
 800249e:	2100      	movs	r1, #0
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff fad9 	bl	8001a58 <VL53L0X_setVcselPulsePeriod>
  VL53L0X_setVcselPulsePeriod(&myTOFsensor1, VcselPeriodFinalRange, 14);
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <main+0x12c>)
 80024a8:	220e      	movs	r2, #14
 80024aa:	2101      	movs	r1, #1
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff fad3 	bl	8001a58 <VL53L0X_setVcselPulsePeriod>
	// lower the return signal rate limit (default is 0.25 MCPS)
  #endif
  #ifdef HIGH_SPEED
	// reduce timing budget to 20 ms (default is about 33 ms)
  VL53L0X_setMeasurementTimingBudget(&myTOFsensor1, 33000);
 80024b2:	4a37      	ldr	r2, [pc, #220]	; (8002590 <main+0x138>)
 80024b4:	4b33      	ldr	r3, [pc, #204]	; (8002584 <main+0x12c>)
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff f96b 	bl	8001794 <VL53L0X_setMeasurementTimingBudget>
  #else //HIGH_ACCURACY
	// increase timing budget to 200 ms
  VL53L0X_setMeasurementTimingBudget(&myTOFsensor1, 200000);
  #endif

  VL53L0X_startContinuous(&myTOFsensor1, 0);
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <main+0x12c>)
 80024c0:	2100      	movs	r1, #0
 80024c2:	0018      	movs	r0, r3
 80024c4:	f7ff fca6 	bl	8001e14 <VL53L0X_startContinuous>

  pHeader.DLC = 1;
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <main+0x13c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	611a      	str	r2, [r3, #16]
  pHeader.IDE = CAN_ID_STD;
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <main+0x13c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 80024d4:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <main+0x13c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  pHeader.StdId = 0x8D;
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <main+0x13c>)
 80024dc:	228d      	movs	r2, #141	; 0x8d
 80024de:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <main+0x140>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <main+0x140>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 80024ec:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <main+0x140>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <main+0x140>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <main+0x140>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <main+0x140>)
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <main+0x140>)
 8002506:	2201      	movs	r2, #1
 8002508:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterActivation = ENABLE;
 800250a:	4b23      	ldr	r3, [pc, #140]	; (8002598 <main+0x140>)
 800250c:	2201      	movs	r2, #1
 800250e:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8002510:	4a21      	ldr	r2, [pc, #132]	; (8002598 <main+0x140>)
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <main+0x144>)
 8002514:	0011      	movs	r1, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f000 fca8 	bl	8002e6c <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <main+0x144>)
 800251e:	0018      	movs	r0, r3
 8002520:	f000 fd96 	bl	8003050 <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	measureValue = ((VL53L0X_readRangeContinuousMillimeters(&myTOFsensor1)/10 > 200)||(VL53L0X_readRangeContinuousMillimeters(&myTOFsensor1) >= 8190)) ? 0 : VL53L0X_readRangeContinuousMillimeters(&myTOFsensor1)/10;
 8002524:	4b17      	ldr	r3, [pc, #92]	; (8002584 <main+0x12c>)
 8002526:	0018      	movs	r0, r3
 8002528:	f7ff fcd2 	bl	8001ed0 <VL53L0X_readRangeContinuousMillimeters>
 800252c:	0003      	movs	r3, r0
 800252e:	001a      	movs	r2, r3
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <main+0x148>)
 8002532:	429a      	cmp	r2, r3
 8002534:	d814      	bhi.n	8002560 <main+0x108>
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <main+0x12c>)
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff fcc9 	bl	8001ed0 <VL53L0X_readRangeContinuousMillimeters>
 800253e:	0003      	movs	r3, r0
 8002540:	001a      	movs	r2, r3
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <main+0x14c>)
 8002544:	429a      	cmp	r2, r3
 8002546:	d80b      	bhi.n	8002560 <main+0x108>
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <main+0x12c>)
 800254a:	0018      	movs	r0, r3
 800254c:	f7ff fcc0 	bl	8001ed0 <VL53L0X_readRangeContinuousMillimeters>
 8002550:	0003      	movs	r3, r0
 8002552:	210a      	movs	r1, #10
 8002554:	0018      	movs	r0, r3
 8002556:	f7fd fdd7 	bl	8000108 <__udivsi3>
 800255a:	0003      	movs	r3, r0
 800255c:	b29a      	uxth	r2, r3
 800255e:	e000      	b.n	8002562 <main+0x10a>
 8002560:	2200      	movs	r2, #0
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <main+0x150>)
 8002564:	801a      	strh	r2, [r3, #0]
	if (measureValue <= 200) {measureValueToSm = measureValue;}
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <main+0x150>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	2bc8      	cmp	r3, #200	; 0xc8
 800256c:	d804      	bhi.n	8002578 <main+0x120>
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <main+0x150>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <main+0x154>)
 8002576:	701a      	strb	r2, [r3, #0]
	//if (VL53L0X_timeoutOccurred(&myTOFsensor1)) {
	vl53l0x_data[0] = measureValueToSm;
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <main+0x154>)
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <main+0x158>)
 800257e:	701a      	strb	r2, [r3, #0]
	measureValue = ((VL53L0X_readRangeContinuousMillimeters(&myTOFsensor1)/10 > 200)||(VL53L0X_readRangeContinuousMillimeters(&myTOFsensor1) >= 8190)) ? 0 : VL53L0X_readRangeContinuousMillimeters(&myTOFsensor1)/10;
 8002580:	e7d0      	b.n	8002524 <main+0xcc>
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	20000000 	.word	0x20000000
 8002588:	20000040 	.word	0x20000040
 800258c:	3dcccccd 	.word	0x3dcccccd
 8002590:	000080e8 	.word	0x000080e8
 8002594:	20000150 	.word	0x20000150
 8002598:	2000004c 	.word	0x2000004c
 800259c:	200000c0 	.word	0x200000c0
 80025a0:	000007d9 	.word	0x000007d9
 80025a4:	00001ffd 	.word	0x00001ffd
 80025a8:	20000042 	.word	0x20000042
 80025ac:	20000041 	.word	0x20000041
 80025b0:	200000e8 	.word	0x200000e8

080025b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b099      	sub	sp, #100	; 0x64
 80025b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ba:	242c      	movs	r4, #44	; 0x2c
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	0018      	movs	r0, r3
 80025c0:	2334      	movs	r3, #52	; 0x34
 80025c2:	001a      	movs	r2, r3
 80025c4:	2100      	movs	r1, #0
 80025c6:	f002 ffa1 	bl	800550c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025ca:	231c      	movs	r3, #28
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	0018      	movs	r0, r3
 80025d0:	2310      	movs	r3, #16
 80025d2:	001a      	movs	r2, r3
 80025d4:	2100      	movs	r1, #0
 80025d6:	f002 ff99 	bl	800550c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	0018      	movs	r0, r3
 80025de:	2318      	movs	r3, #24
 80025e0:	001a      	movs	r2, r3
 80025e2:	2100      	movs	r1, #0
 80025e4:	f002 ff92 	bl	800550c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80025e8:	0021      	movs	r1, r4
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	2222      	movs	r2, #34	; 0x22
 80025ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	2201      	movs	r2, #1
 80025f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	2201      	movs	r2, #1
 80025fa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	2210      	movs	r2, #16
 8002600:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002602:	187b      	adds	r3, r7, r1
 8002604:	2202      	movs	r2, #2
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8002608:	187b      	adds	r3, r7, r1
 800260a:	22c0      	movs	r2, #192	; 0xc0
 800260c:	0252      	lsls	r2, r2, #9
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2200      	movs	r2, #0
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2201      	movs	r2, #1
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800261c:	187b      	adds	r3, r7, r1
 800261e:	0018      	movs	r0, r3
 8002620:	f001 fde4 	bl	80041ec <HAL_RCC_OscConfig>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002628:	f000 f938 	bl	800289c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262c:	211c      	movs	r1, #28
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002634:	187b      	adds	r3, r7, r1
 8002636:	2202      	movs	r2, #2
 8002638:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800263a:	187b      	adds	r3, r7, r1
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002640:	187b      	adds	r3, r7, r1
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002646:	187b      	adds	r3, r7, r1
 8002648:	2101      	movs	r1, #1
 800264a:	0018      	movs	r0, r3
 800264c:	f002 f954 	bl	80048f8 <HAL_RCC_ClockConfig>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d001      	beq.n	8002658 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002654:	f000 f922 	bl	800289c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2220      	movs	r2, #32
 800265c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	0018      	movs	r0, r3
 8002668:	f002 fa9e 	bl	8004ba8 <HAL_RCCEx_PeriphCLKConfig>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d001      	beq.n	8002674 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002670:	f000 f914 	bl	800289c <Error_Handler>
  }
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b019      	add	sp, #100	; 0x64
 800267a:	bd90      	pop	{r4, r7, pc}

0800267c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <MX_CAN_Init+0x64>)
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <MX_CAN_Init+0x68>)
 8002684:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <MX_CAN_Init+0x64>)
 8002688:	2204      	movs	r2, #4
 800268a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <MX_CAN_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002692:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <MX_CAN_Init+0x64>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_CAN_Init+0x64>)
 800269a:	2290      	movs	r2, #144	; 0x90
 800269c:	0312      	lsls	r2, r2, #12
 800269e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_CAN_Init+0x64>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_CAN_Init+0x64>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <MX_CAN_Init+0x64>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <MX_CAN_Init+0x64>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_CAN_Init+0x64>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <MX_CAN_Init+0x64>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_CAN_Init+0x64>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <MX_CAN_Init+0x64>)
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 facf 	bl	8002c70 <HAL_CAN_Init>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d001      	beq.n	80026da <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80026d6:	f000 f8e1 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200000c0 	.word	0x200000c0
 80026e4:	40006400 	.word	0x40006400

080026e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <MX_I2C1_Init+0x74>)
 80026ee:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <MX_I2C1_Init+0x78>)
 80026f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <MX_I2C1_Init+0x74>)
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <MX_I2C1_Init+0x7c>)
 80026f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <MX_I2C1_Init+0x74>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <MX_I2C1_Init+0x74>)
 8002700:	2201      	movs	r2, #1
 8002702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <MX_I2C1_Init+0x74>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <MX_I2C1_Init+0x74>)
 800270c:	2200      	movs	r2, #0
 800270e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <MX_I2C1_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_I2C1_Init+0x74>)
 8002718:	2200      	movs	r2, #0
 800271a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <MX_I2C1_Init+0x74>)
 800271e:	2200      	movs	r2, #0
 8002720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_I2C1_Init+0x74>)
 8002724:	0018      	movs	r0, r3
 8002726:	f001 f81d 	bl	8003764 <HAL_I2C_Init>
 800272a:	1e03      	subs	r3, r0, #0
 800272c:	d001      	beq.n	8002732 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800272e:	f000 f8b5 	bl	800289c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <MX_I2C1_Init+0x74>)
 8002734:	2100      	movs	r1, #0
 8002736:	0018      	movs	r0, r3
 8002738:	f001 fcc0 	bl	80040bc <HAL_I2CEx_ConfigAnalogFilter>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d001      	beq.n	8002744 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002740:	f000 f8ac 	bl	800289c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <MX_I2C1_Init+0x74>)
 8002746:	2100      	movs	r1, #0
 8002748:	0018      	movs	r0, r3
 800274a:	f001 fd03 	bl	8004154 <HAL_I2CEx_ConfigDigitalFilter>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d001      	beq.n	8002756 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002752:	f000 f8a3 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000074 	.word	0x20000074
 8002760:	40005400 	.word	0x40005400
 8002764:	2000090e 	.word	0x2000090e

08002768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276e:	2308      	movs	r3, #8
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	0018      	movs	r0, r3
 8002774:	2310      	movs	r3, #16
 8002776:	001a      	movs	r2, r3
 8002778:	2100      	movs	r1, #0
 800277a:	f002 fec7 	bl	800550c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277e:	003b      	movs	r3, r7
 8002780:	0018      	movs	r0, r3
 8002782:	2308      	movs	r3, #8
 8002784:	001a      	movs	r2, r3
 8002786:	2100      	movs	r1, #0
 8002788:	f002 fec0 	bl	800550c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <MX_TIM2_Init+0xa0>)
 800278e:	2280      	movs	r2, #128	; 0x80
 8002790:	05d2      	lsls	r2, r2, #23
 8002792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <MX_TIM2_Init+0xa0>)
 8002796:	2200      	movs	r2, #0
 8002798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <MX_TIM2_Init+0xa0>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <MX_TIM2_Init+0xa0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <MX_TIM2_Init+0xa0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <MX_TIM2_Init+0xa0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <MX_TIM2_Init+0xa0>)
 80027b4:	0018      	movs	r0, r3
 80027b6:	f002 fae5 	bl	8004d84 <HAL_TIM_Base_Init>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80027be:	f000 f86d 	bl	800289c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c2:	2108      	movs	r1, #8
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	0152      	lsls	r2, r2, #5
 80027ca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027cc:	187a      	adds	r2, r7, r1
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_TIM2_Init+0xa0>)
 80027d0:	0011      	movs	r1, r2
 80027d2:	0018      	movs	r0, r3
 80027d4:	f002 fc18 	bl	8005008 <HAL_TIM_ConfigClockSource>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80027dc:	f000 f85e 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	003b      	movs	r3, r7
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e6:	003b      	movs	r3, r7
 80027e8:	2200      	movs	r2, #0
 80027ea:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027ec:	003a      	movs	r2, r7
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_TIM2_Init+0xa0>)
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f002 fdfe 	bl	80053f4 <HAL_TIMEx_MasterConfigSynchronization>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80027fc:	f000 f84e 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b006      	add	sp, #24
 8002806:	bd80      	pop	{r7, pc}
 8002808:	200000f4 	.word	0x200000f4

0800280c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002812:	240c      	movs	r4, #12
 8002814:	193b      	adds	r3, r7, r4
 8002816:	0018      	movs	r0, r3
 8002818:	2314      	movs	r3, #20
 800281a:	001a      	movs	r2, r3
 800281c:	2100      	movs	r1, #0
 800281e:	f002 fe75 	bl	800550c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <MX_GPIO_Init+0x8c>)
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <MX_GPIO_Init+0x8c>)
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	03c9      	lsls	r1, r1, #15
 800282c:	430a      	orrs	r2, r1
 800282e:	615a      	str	r2, [r3, #20]
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <MX_GPIO_Init+0x8c>)
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	03db      	lsls	r3, r3, #15
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MX_GPIO_Init+0x8c>)
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <MX_GPIO_Init+0x8c>)
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0289      	lsls	r1, r1, #10
 8002848:	430a      	orrs	r2, r1
 800284a:	615a      	str	r2, [r3, #20]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <MX_GPIO_Init+0x8c>)
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	029b      	lsls	r3, r3, #10
 8002854:	4013      	ands	r3, r2
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800285a:	2390      	movs	r3, #144	; 0x90
 800285c:	05db      	lsls	r3, r3, #23
 800285e:	2200      	movs	r2, #0
 8002860:	2107      	movs	r1, #7
 8002862:	0018      	movs	r0, r3
 8002864:	f000 ff60 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002868:	0021      	movs	r1, r4
 800286a:	187b      	adds	r3, r7, r1
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2201      	movs	r2, #1
 8002874:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	187a      	adds	r2, r7, r1
 8002884:	2390      	movs	r3, #144	; 0x90
 8002886:	05db      	lsls	r3, r3, #23
 8002888:	0011      	movs	r1, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f000 fde4 	bl	8003458 <HAL_GPIO_Init>

}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b009      	add	sp, #36	; 0x24
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	40021000 	.word	0x40021000

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <HAL_MspInit+0x50>)
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_MspInit+0x50>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	619a      	str	r2, [r3, #24]
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <HAL_MspInit+0x50>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2201      	movs	r2, #1
 80028c0:	4013      	ands	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_MspInit+0x50>)
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_MspInit+0x50>)
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0549      	lsls	r1, r1, #21
 80028d0:	430a      	orrs	r2, r1
 80028d2:	61da      	str	r2, [r3, #28]
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_MspInit+0x50>)
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	055b      	lsls	r3, r3, #21
 80028dc:	4013      	ands	r3, r2
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_MspInit+0x54>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_MspInit+0x54>)
 80028e8:	2110      	movs	r1, #16
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010000 	.word	0x40010000

08002900 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	2314      	movs	r3, #20
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	0018      	movs	r0, r3
 800290e:	2314      	movs	r3, #20
 8002910:	001a      	movs	r2, r3
 8002912:	2100      	movs	r1, #0
 8002914:	f002 fdfa 	bl	800550c <memset>
  if(hcan->Instance==CAN)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_CAN_MspInit+0x94>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d133      	bne.n	800298a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_CAN_MspInit+0x98>)
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <HAL_CAN_MspInit+0x98>)
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	0489      	lsls	r1, r1, #18
 800292c:	430a      	orrs	r2, r1
 800292e:	61da      	str	r2, [r3, #28]
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_CAN_MspInit+0x98>)
 8002932:	69da      	ldr	r2, [r3, #28]
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	049b      	lsls	r3, r3, #18
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_CAN_MspInit+0x98>)
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_CAN_MspInit+0x98>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0289      	lsls	r1, r1, #10
 8002948:	430a      	orrs	r2, r1
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_CAN_MspInit+0x98>)
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	029b      	lsls	r3, r3, #10
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800295a:	2114      	movs	r1, #20
 800295c:	187b      	adds	r3, r7, r1
 800295e:	22c0      	movs	r2, #192	; 0xc0
 8002960:	0152      	lsls	r2, r2, #5
 8002962:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	187b      	adds	r3, r7, r1
 8002966:	2202      	movs	r2, #2
 8002968:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002970:	187b      	adds	r3, r7, r1
 8002972:	2203      	movs	r2, #3
 8002974:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002976:	187b      	adds	r3, r7, r1
 8002978:	2204      	movs	r2, #4
 800297a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297c:	187a      	adds	r2, r7, r1
 800297e:	2390      	movs	r3, #144	; 0x90
 8002980:	05db      	lsls	r3, r3, #23
 8002982:	0011      	movs	r1, r2
 8002984:	0018      	movs	r0, r3
 8002986:	f000 fd67 	bl	8003458 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b00a      	add	sp, #40	; 0x28
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	40006400 	.word	0x40006400
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	2314      	movs	r3, #20
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	0018      	movs	r0, r3
 80029aa:	2314      	movs	r3, #20
 80029ac:	001a      	movs	r2, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	f002 fdac 	bl	800550c <memset>
  if(hi2c->Instance==I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_I2C_MspInit+0x90>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d131      	bne.n	8002a22 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_I2C_MspInit+0x94>)
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_I2C_MspInit+0x94>)
 80029c4:	2180      	movs	r1, #128	; 0x80
 80029c6:	03c9      	lsls	r1, r1, #15
 80029c8:	430a      	orrs	r2, r1
 80029ca:	615a      	str	r2, [r3, #20]
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_I2C_MspInit+0x94>)
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	03db      	lsls	r3, r3, #15
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029da:	2114      	movs	r1, #20
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2203      	movs	r2, #3
 80029e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	2212      	movs	r2, #18
 80029e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	2201      	movs	r2, #1
 80029ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2203      	movs	r2, #3
 80029f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2201      	movs	r2, #1
 80029f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <HAL_I2C_MspInit+0x98>)
 80029fe:	0019      	movs	r1, r3
 8002a00:	0010      	movs	r0, r2
 8002a02:	f000 fd29 	bl	8003458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_I2C_MspInit+0x94>)
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_I2C_MspInit+0x94>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0389      	lsls	r1, r1, #14
 8002a10:	430a      	orrs	r2, r1
 8002a12:	61da      	str	r2, [r3, #28]
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_I2C_MspInit+0x94>)
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	039b      	lsls	r3, r3, #14
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b00a      	add	sp, #40	; 0x28
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	40005400 	.word	0x40005400
 8002a30:	40021000 	.word	0x40021000
 8002a34:	48001400 	.word	0x48001400

08002a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d113      	bne.n	8002a74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_TIM_Base_MspInit+0x44>)
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_TIM_Base_MspInit+0x44>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	430a      	orrs	r2, r1
 8002a56:	61da      	str	r2, [r3, #28]
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_TIM_Base_MspInit+0x44>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2100      	movs	r1, #0
 8002a68:	200f      	movs	r0, #15
 8002a6a:	f000 fcc3 	bl	80033f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f000 fcd5 	bl	800341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000

08002a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <HardFault_Handler+0x4>

08002a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  sysTick_Time++;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <SysTick_Handler+0x44>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <SysTick_Handler+0x44>)
 8002ab0:	601a      	str	r2, [r3, #0]
  if (HAL_GetTick()%20 == 0) {
 8002ab2:	f000 f8d3 	bl	8002c5c <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	2114      	movs	r1, #20
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fd fbaa 	bl	8000214 <__aeabi_uidivmod>
 8002ac0:	1e0b      	subs	r3, r1, #0
 8002ac2:	d10c      	bne.n	8002ade <SysTick_Handler+0x3a>
	  if (HAL_CAN_AddTxMessage(&hcan, &pHeader, vl53l0x_data, &TxMailbox) == HAL_OK) {
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <SysTick_Handler+0x48>)
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <SysTick_Handler+0x4c>)
 8002ac8:	490a      	ldr	r1, [pc, #40]	; (8002af4 <SysTick_Handler+0x50>)
 8002aca:	480b      	ldr	r0, [pc, #44]	; (8002af8 <SysTick_Handler+0x54>)
 8002acc:	f000 fb06 	bl	80030dc <HAL_CAN_AddTxMessage>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d104      	bne.n	8002ade <SysTick_Handler+0x3a>
		  //HAL_CAN_AddTxMessage(&hcan, &pHeader, vl53l0x_data, &TxMailbox);
		  count++;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <SysTick_Handler+0x58>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <SysTick_Handler+0x58>)
 8002adc:	601a      	str	r2, [r3, #0]
	  }
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ade:	f000 f8ab 	bl	8002c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000048 	.word	0x20000048
 8002aec:	200000f0 	.word	0x200000f0
 8002af0:	200000e8 	.word	0x200000e8
 8002af4:	20000150 	.word	0x20000150
 8002af8:	200000c0 	.word	0x200000c0
 8002afc:	20000044 	.word	0x20000044

08002b00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <TIM2_IRQHandler+0x14>)
 8002b06:	0018      	movs	r0, r3
 8002b08:	f002 f968 	bl	8004ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	200000f4 	.word	0x200000f4

08002b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b24:	4813      	ldr	r0, [pc, #76]	; (8002b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b26:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002b28:	4813      	ldr	r0, [pc, #76]	; (8002b78 <LoopForever+0x6>)
    LDR R1, [R0]
 8002b2a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002b2c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002b2e:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <LoopForever+0xa>)
    CMP R1, R2
 8002b30:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002b32:	d105      	bne.n	8002b40 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002b34:	4812      	ldr	r0, [pc, #72]	; (8002b80 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002b36:	4913      	ldr	r1, [pc, #76]	; (8002b84 <LoopForever+0x12>)
    STR R1, [R0]
 8002b38:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002b3a:	4813      	ldr	r0, [pc, #76]	; (8002b88 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002b3c:	4913      	ldr	r1, [pc, #76]	; (8002b8c <LoopForever+0x1a>)
    STR R1, [R0]
 8002b3e:	6001      	str	r1, [r0, #0]

08002b40 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b40:	4813      	ldr	r0, [pc, #76]	; (8002b90 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002b42:	4914      	ldr	r1, [pc, #80]	; (8002b94 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <LoopForever+0x26>)
  movs r3, #0
 8002b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b48:	e002      	b.n	8002b50 <LoopCopyDataInit>

08002b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4e:	3304      	adds	r3, #4

08002b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b54:	d3f9      	bcc.n	8002b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b56:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002b58:	4c11      	ldr	r4, [pc, #68]	; (8002ba0 <LoopForever+0x2e>)
  movs r3, #0
 8002b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b5c:	e001      	b.n	8002b62 <LoopFillZerobss>

08002b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b60:	3204      	adds	r2, #4

08002b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b64:	d3fb      	bcc.n	8002b5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b66:	f7ff ffd7 	bl	8002b18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b6a:	f002 fcab 	bl	80054c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b6e:	f7ff fc73 	bl	8002458 <main>

08002b72 <LoopForever>:

LoopForever:
    b LoopForever
 8002b72:	e7fe      	b.n	8002b72 <LoopForever>
  ldr   r0, =_estack
 8002b74:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002b78:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002b7c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002b80:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002b84:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002b88:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002b8c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002b98:	080055ac 	.word	0x080055ac
  ldr r2, =_sbss
 8002b9c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002ba0:	2000016c 	.word	0x2000016c

08002ba4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC1_IRQHandler>
	...

08002ba8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_Init+0x24>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_Init+0x24>)
 8002bb2:	2110      	movs	r1, #16
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f000 f809 	bl	8002bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbe:	f7ff fe73 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_InitTick+0x5c>)
 8002bda:	681c      	ldr	r4, [r3, #0]
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <HAL_InitTick+0x60>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	0019      	movs	r1, r3
 8002be2:	23fa      	movs	r3, #250	; 0xfa
 8002be4:	0098      	lsls	r0, r3, #2
 8002be6:	f7fd fa8f 	bl	8000108 <__udivsi3>
 8002bea:	0003      	movs	r3, r0
 8002bec:	0019      	movs	r1, r3
 8002bee:	0020      	movs	r0, r4
 8002bf0:	f7fd fa8a 	bl	8000108 <__udivsi3>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f000 fc21 	bl	800343e <HAL_SYSTICK_Config>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e00f      	b.n	8002c24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d80b      	bhi.n	8002c22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	425b      	negs	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 fbee 	bl	80033f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_InitTick+0x64>)
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e000      	b.n	8002c24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b003      	add	sp, #12
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	20000018 	.word	0x20000018
 8002c30:	20000020 	.word	0x20000020
 8002c34:	2000001c 	.word	0x2000001c

08002c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_IncTick+0x1c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	001a      	movs	r2, r3
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_IncTick+0x20>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	18d2      	adds	r2, r2, r3
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_IncTick+0x20>)
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	20000020 	.word	0x20000020
 8002c58:	20000168 	.word	0x20000168

08002c5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c60:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <HAL_GetTick+0x10>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	20000168 	.word	0x20000168

08002c70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0f0      	b.n	8002e64 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	5c9b      	ldrb	r3, [r3, r2]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff fe35 	bl	8002900 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	438a      	bics	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca6:	f7ff ffd9 	bl	8002c5c <HAL_GetTick>
 8002caa:	0003      	movs	r3, r0
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cae:	e013      	b.n	8002cd8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cb0:	f7ff ffd4 	bl	8002c5c <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b0a      	cmp	r3, #10
 8002cbc:	d90c      	bls.n	8002cd8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	0292      	lsls	r2, r2, #10
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	2105      	movs	r1, #5
 8002cd2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0c5      	b.n	8002e64 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d1e5      	bne.n	8002cb0 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf4:	f7ff ffb2 	bl	8002c5c <HAL_GetTick>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cfc:	e013      	b.n	8002d26 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cfe:	f7ff ffad 	bl	8002c5c <HAL_GetTick>
 8002d02:	0002      	movs	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b0a      	cmp	r3, #10
 8002d0a:	d90c      	bls.n	8002d26 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	0292      	lsls	r2, r2, #10
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	2105      	movs	r1, #5
 8002d20:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e09e      	b.n	8002e64 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d0e5      	beq.n	8002cfe <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7e1b      	ldrb	r3, [r3, #24]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2180      	movs	r1, #128	; 0x80
 8002d46:	430a      	orrs	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e007      	b.n	8002d5c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	438a      	bics	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7e5b      	ldrb	r3, [r3, #25]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2140      	movs	r1, #64	; 0x40
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e007      	b.n	8002d86 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2140      	movs	r1, #64	; 0x40
 8002d82:	438a      	bics	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7e9b      	ldrb	r3, [r3, #26]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2120      	movs	r1, #32
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e007      	b.n	8002db0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2120      	movs	r1, #32
 8002dac:	438a      	bics	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7edb      	ldrb	r3, [r3, #27]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2110      	movs	r1, #16
 8002dc4:	438a      	bics	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e007      	b.n	8002dda <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7f1b      	ldrb	r3, [r3, #28]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d108      	bne.n	8002df4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2108      	movs	r1, #8
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e007      	b.n	8002e04 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2108      	movs	r1, #8
 8002e00:	438a      	bics	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	7f5b      	ldrb	r3, [r3, #29]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d108      	bne.n	8002e1e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2104      	movs	r1, #4
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e007      	b.n	8002e2e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2104      	movs	r1, #4
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	0011      	movs	r1, r2
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	1e5a      	subs	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	2101      	movs	r1, #1
 8002e60:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e7c:	2013      	movs	r0, #19
 8002e7e:	183b      	adds	r3, r7, r0
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	2120      	movs	r1, #32
 8002e84:	5c52      	ldrb	r2, [r2, r1]
 8002e86:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e88:	183b      	adds	r3, r7, r0
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d005      	beq.n	8002e9c <HAL_CAN_ConfigFilter+0x30>
 8002e90:	2313      	movs	r3, #19
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d000      	beq.n	8002e9c <HAL_CAN_ConfigFilter+0x30>
 8002e9a:	e0cd      	b.n	8003038 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	58d3      	ldr	r3, [r2, r3]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	221f      	movs	r2, #31
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2201      	movs	r2, #1
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	0013      	movs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	2387      	movs	r3, #135	; 0x87
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	58d3      	ldr	r3, [r2, r3]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	43d2      	mvns	r2, r2
 8002ece:	401a      	ands	r2, r3
 8002ed0:	0011      	movs	r1, r2
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	2387      	movs	r3, #135	; 0x87
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d129      	bne.n	8002f36 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	2383      	movs	r3, #131	; 0x83
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	58d3      	ldr	r3, [r2, r3]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	43d2      	mvns	r2, r2
 8002eee:	401a      	ands	r2, r3
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	2383      	movs	r3, #131	; 0x83
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f0c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	3248      	adds	r2, #72	; 0x48
 8002f12:	00d2      	lsls	r2, r2, #3
 8002f14:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	3348      	adds	r3, #72	; 0x48
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	18cb      	adds	r3, r1, r3
 8002f32:	3304      	adds	r3, #4
 8002f34:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d128      	bne.n	8002f90 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	2383      	movs	r3, #131	; 0x83
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	58d2      	ldr	r2, [r2, r3]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	2383      	movs	r3, #131	; 0x83
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f66:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3248      	adds	r2, #72	; 0x48
 8002f6c:	00d2      	lsls	r2, r2, #3
 8002f6e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f84:	6979      	ldr	r1, [r7, #20]
 8002f86:	3348      	adds	r3, #72	; 0x48
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	18cb      	adds	r3, r1, r3
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10c      	bne.n	8002fb2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	2381      	movs	r3, #129	; 0x81
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	58d3      	ldr	r3, [r2, r3]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	43d2      	mvns	r2, r2
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	2381      	movs	r3, #129	; 0x81
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	50d1      	str	r1, [r2, r3]
 8002fb0:	e00a      	b.n	8002fc8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	2381      	movs	r3, #129	; 0x81
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	58d2      	ldr	r2, [r2, r3]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	2381      	movs	r3, #129	; 0x81
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10c      	bne.n	8002fea <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	2385      	movs	r3, #133	; 0x85
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	58d3      	ldr	r3, [r2, r3]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	43d2      	mvns	r2, r2
 8002fdc:	401a      	ands	r2, r3
 8002fde:	0011      	movs	r1, r2
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	2385      	movs	r3, #133	; 0x85
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	50d1      	str	r1, [r2, r3]
 8002fe8:	e00a      	b.n	8003000 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	2385      	movs	r3, #133	; 0x85
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	58d2      	ldr	r2, [r2, r3]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	0011      	movs	r1, r2
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	2385      	movs	r3, #133	; 0x85
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10a      	bne.n	800301e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	2387      	movs	r3, #135	; 0x87
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	58d2      	ldr	r2, [r2, r3]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	431a      	orrs	r2, r3
 8003014:	0011      	movs	r1, r2
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	2387      	movs	r3, #135	; 0x87
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	58d3      	ldr	r3, [r2, r3]
 8003026:	2201      	movs	r2, #1
 8003028:	4393      	bics	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e007      	b.n	8003048 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	02d2      	lsls	r2, r2, #11
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
  }
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b006      	add	sp, #24
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	5c9b      	ldrb	r3, [r3, r2]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d12f      	bne.n	80030c4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	2102      	movs	r1, #2
 800306a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2101      	movs	r1, #1
 8003078:	438a      	bics	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800307c:	f7ff fdee 	bl	8002c5c <HAL_GetTick>
 8003080:	0003      	movs	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003084:	e013      	b.n	80030ae <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003086:	f7ff fde9 	bl	8002c5c <HAL_GetTick>
 800308a:	0002      	movs	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b0a      	cmp	r3, #10
 8003092:	d90c      	bls.n	80030ae <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	2280      	movs	r2, #128	; 0x80
 800309a:	0292      	lsls	r2, r2, #10
 800309c:	431a      	orrs	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	2105      	movs	r1, #5
 80030a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e012      	b.n	80030d4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	d1e5      	bne.n	8003086 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e007      	b.n	80030d4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	0312      	lsls	r2, r2, #12
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
  }
}
 80030d4:	0018      	movs	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b004      	add	sp, #16
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80030ea:	201f      	movs	r0, #31
 80030ec:	183b      	adds	r3, r7, r0
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	2120      	movs	r1, #32
 80030f2:	5c52      	ldrb	r2, [r2, r1]
 80030f4:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80030fe:	183b      	adds	r3, r7, r0
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d005      	beq.n	8003112 <HAL_CAN_AddTxMessage+0x36>
 8003106:	231f      	movs	r3, #31
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d000      	beq.n	8003112 <HAL_CAN_AddTxMessage+0x36>
 8003110:	e0b7      	b.n	8003282 <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	04db      	lsls	r3, r3, #19
 8003118:	4013      	ands	r3, r2
 800311a:	d10a      	bne.n	8003132 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	051b      	lsls	r3, r3, #20
 8003122:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003124:	d105      	bne.n	8003132 <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	055b      	lsls	r3, r3, #21
 800312c:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800312e:	d100      	bne.n	8003132 <HAL_CAN_AddTxMessage+0x56>
 8003130:	e09e      	b.n	8003270 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	0e1b      	lsrs	r3, r3, #24
 8003136:	2203      	movs	r2, #3
 8003138:	4013      	ands	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d908      	bls.n	8003154 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	0412      	lsls	r2, r2, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e09e      	b.n	8003292 <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003154:	2201      	movs	r2, #1
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	409a      	lsls	r2, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4311      	orrs	r1, r2
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	3218      	adds	r2, #24
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	50d1      	str	r1, [r2, r3]
 800317e:	e00f      	b.n	80031a0 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800318a:	431a      	orrs	r2, r3
 800318c:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8003196:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	3218      	adds	r2, #24
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3318      	adds	r3, #24
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	18cb      	adds	r3, r1, r3
 80031b0:	3304      	adds	r3, #4
 80031b2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	7d1b      	ldrb	r3, [r3, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d112      	bne.n	80031e2 <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3318      	adds	r3, #24
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	18d3      	adds	r3, r2, r3
 80031c8:	3304      	adds	r3, #4
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	431a      	orrs	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3318      	adds	r3, #24
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	18cb      	adds	r3, r1, r3
 80031de:	3304      	adds	r3, #4
 80031e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3307      	adds	r3, #7
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	061a      	lsls	r2, r3, #24
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3306      	adds	r3, #6
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3305      	adds	r3, #5
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	0019      	movs	r1, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	6979      	ldr	r1, [r7, #20]
 800320e:	23c6      	movs	r3, #198	; 0xc6
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	0109      	lsls	r1, r1, #4
 8003214:	1841      	adds	r1, r0, r1
 8003216:	18cb      	adds	r3, r1, r3
 8003218:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3303      	adds	r3, #3
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	061a      	lsls	r2, r3, #24
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3302      	adds	r3, #2
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3301      	adds	r3, #1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	0019      	movs	r1, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	23c4      	movs	r3, #196	; 0xc4
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	0109      	lsls	r1, r1, #4
 800324a:	1841      	adds	r1, r0, r1
 800324c:	18cb      	adds	r3, r1, r3
 800324e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	3218      	adds	r2, #24
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	58d2      	ldr	r2, [r2, r3]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	4311      	orrs	r1, r2
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	3218      	adds	r2, #24
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e010      	b.n	8003292 <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	0392      	lsls	r2, r2, #14
 8003278:	431a      	orrs	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e007      	b.n	8003292 <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	02d2      	lsls	r2, r2, #11
 800328a:	431a      	orrs	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
  }
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b008      	add	sp, #32
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	0002      	movs	r2, r0
 80032a4:	1dfb      	adds	r3, r7, #7
 80032a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b7f      	cmp	r3, #127	; 0x7f
 80032ae:	d809      	bhi.n	80032c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b0:	1dfb      	adds	r3, r7, #7
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	001a      	movs	r2, r3
 80032b6:	231f      	movs	r3, #31
 80032b8:	401a      	ands	r2, r3
 80032ba:	4b04      	ldr	r3, [pc, #16]	; (80032cc <__NVIC_EnableIRQ+0x30>)
 80032bc:	2101      	movs	r1, #1
 80032be:	4091      	lsls	r1, r2
 80032c0:	000a      	movs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
  }
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	0002      	movs	r2, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b7f      	cmp	r3, #127	; 0x7f
 80032e4:	d828      	bhi.n	8003338 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e6:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <__NVIC_SetPriority+0xd4>)
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	33c0      	adds	r3, #192	; 0xc0
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	589b      	ldr	r3, [r3, r2]
 80032f6:	1dfa      	adds	r2, r7, #7
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	0011      	movs	r1, r2
 80032fc:	2203      	movs	r2, #3
 80032fe:	400a      	ands	r2, r1
 8003300:	00d2      	lsls	r2, r2, #3
 8003302:	21ff      	movs	r1, #255	; 0xff
 8003304:	4091      	lsls	r1, r2
 8003306:	000a      	movs	r2, r1
 8003308:	43d2      	mvns	r2, r2
 800330a:	401a      	ands	r2, r3
 800330c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	019b      	lsls	r3, r3, #6
 8003312:	22ff      	movs	r2, #255	; 0xff
 8003314:	401a      	ands	r2, r3
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	0018      	movs	r0, r3
 800331c:	2303      	movs	r3, #3
 800331e:	4003      	ands	r3, r0
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003324:	481f      	ldr	r0, [pc, #124]	; (80033a4 <__NVIC_SetPriority+0xd4>)
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b25b      	sxtb	r3, r3
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	430a      	orrs	r2, r1
 8003330:	33c0      	adds	r3, #192	; 0xc0
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003336:	e031      	b.n	800339c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <__NVIC_SetPriority+0xd8>)
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	0019      	movs	r1, r3
 8003340:	230f      	movs	r3, #15
 8003342:	400b      	ands	r3, r1
 8003344:	3b08      	subs	r3, #8
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	3306      	adds	r3, #6
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	3304      	adds	r3, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	1dfa      	adds	r2, r7, #7
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	0011      	movs	r1, r2
 8003358:	2203      	movs	r2, #3
 800335a:	400a      	ands	r2, r1
 800335c:	00d2      	lsls	r2, r2, #3
 800335e:	21ff      	movs	r1, #255	; 0xff
 8003360:	4091      	lsls	r1, r2
 8003362:	000a      	movs	r2, r1
 8003364:	43d2      	mvns	r2, r2
 8003366:	401a      	ands	r2, r3
 8003368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	401a      	ands	r2, r3
 8003372:	1dfb      	adds	r3, r7, #7
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	0018      	movs	r0, r3
 8003378:	2303      	movs	r3, #3
 800337a:	4003      	ands	r3, r0
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003380:	4809      	ldr	r0, [pc, #36]	; (80033a8 <__NVIC_SetPriority+0xd8>)
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	001c      	movs	r4, r3
 8003388:	230f      	movs	r3, #15
 800338a:	4023      	ands	r3, r4
 800338c:	3b08      	subs	r3, #8
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	430a      	orrs	r2, r1
 8003392:	3306      	adds	r3, #6
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	18c3      	adds	r3, r0, r3
 8003398:	3304      	adds	r3, #4
 800339a:	601a      	str	r2, [r3, #0]
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	b003      	add	sp, #12
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <SysTick_Config+0x40>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033be:	2301      	movs	r3, #1
 80033c0:	e010      	b.n	80033e4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <SysTick_Config+0x44>)
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	3a01      	subs	r2, #1
 80033c8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ca:	2301      	movs	r3, #1
 80033cc:	425b      	negs	r3, r3
 80033ce:	2103      	movs	r1, #3
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff ff7d 	bl	80032d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <SysTick_Config+0x44>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SysTick_Config+0x44>)
 80033de:	2207      	movs	r2, #7
 80033e0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b002      	add	sp, #8
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	00ffffff 	.word	0x00ffffff
 80033f0:	e000e010 	.word	0xe000e010

080033f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	210f      	movs	r1, #15
 8003400:	187b      	adds	r3, r7, r1
 8003402:	1c02      	adds	r2, r0, #0
 8003404:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	187b      	adds	r3, r7, r1
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b25b      	sxtb	r3, r3
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ff5d 	bl	80032d0 <__NVIC_SetPriority>
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b004      	add	sp, #16
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	0002      	movs	r2, r0
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800342a:	1dfb      	adds	r3, r7, #7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b25b      	sxtb	r3, r3
 8003430:	0018      	movs	r0, r3
 8003432:	f7ff ff33 	bl	800329c <__NVIC_EnableIRQ>
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b002      	add	sp, #8
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff ffaf 	bl	80033ac <SysTick_Config>
 800344e:	0003      	movs	r3, r0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003466:	e149      	b.n	80036fc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2101      	movs	r1, #1
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4091      	lsls	r1, r2
 8003472:	000a      	movs	r2, r1
 8003474:	4013      	ands	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d100      	bne.n	8003480 <HAL_GPIO_Init+0x28>
 800347e:	e13a      	b.n	80036f6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x38>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b12      	cmp	r3, #18
 800348e:	d123      	bne.n	80034d8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	0092      	lsls	r2, r2, #2
 800349a:	58d3      	ldr	r3, [r2, r3]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2207      	movs	r2, #7
 80034a2:	4013      	ands	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	409a      	lsls	r2, r3
 80034aa:	0013      	movs	r3, r2
 80034ac:	43da      	mvns	r2, r3
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2107      	movs	r1, #7
 80034bc:	400b      	ands	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	409a      	lsls	r2, r3
 80034c2:	0013      	movs	r3, r2
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	6939      	ldr	r1, [r7, #16]
 80034d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	409a      	lsls	r2, r3
 80034e6:	0013      	movs	r3, r2
 80034e8:	43da      	mvns	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	409a      	lsls	r2, r3
 80034fe:	0013      	movs	r3, r2
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d00b      	beq.n	800352c <HAL_GPIO_Init+0xd4>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d007      	beq.n	800352c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003520:	2b11      	cmp	r3, #17
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b12      	cmp	r3, #18
 800352a:	d130      	bne.n	800358e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	409a      	lsls	r2, r3
 800353a:	0013      	movs	r3, r2
 800353c:	43da      	mvns	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	0013      	movs	r3, r2
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003562:	2201      	movs	r2, #1
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	409a      	lsls	r2, r3
 8003568:	0013      	movs	r3, r2
 800356a:	43da      	mvns	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	2201      	movs	r2, #1
 800357a:	401a      	ands	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	409a      	lsls	r2, r3
 8003580:	0013      	movs	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	2203      	movs	r2, #3
 800359a:	409a      	lsls	r2, r3
 800359c:	0013      	movs	r3, r2
 800359e:	43da      	mvns	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	409a      	lsls	r2, r3
 80035b0:	0013      	movs	r3, r2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	055b      	lsls	r3, r3, #21
 80035c6:	4013      	ands	r3, r2
 80035c8:	d100      	bne.n	80035cc <HAL_GPIO_Init+0x174>
 80035ca:	e094      	b.n	80036f6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035cc:	4b51      	ldr	r3, [pc, #324]	; (8003714 <HAL_GPIO_Init+0x2bc>)
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_GPIO_Init+0x2bc>)
 80035d2:	2101      	movs	r1, #1
 80035d4:	430a      	orrs	r2, r1
 80035d6:	619a      	str	r2, [r3, #24]
 80035d8:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_GPIO_Init+0x2bc>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2201      	movs	r2, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035e4:	4a4c      	ldr	r2, [pc, #304]	; (8003718 <HAL_GPIO_Init+0x2c0>)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	3302      	adds	r3, #2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	589b      	ldr	r3, [r3, r2]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2203      	movs	r2, #3
 80035f6:	4013      	ands	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	220f      	movs	r2, #15
 80035fc:	409a      	lsls	r2, r3
 80035fe:	0013      	movs	r3, r2
 8003600:	43da      	mvns	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	2390      	movs	r3, #144	; 0x90
 800360c:	05db      	lsls	r3, r3, #23
 800360e:	429a      	cmp	r2, r3
 8003610:	d00d      	beq.n	800362e <HAL_GPIO_Init+0x1d6>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a41      	ldr	r2, [pc, #260]	; (800371c <HAL_GPIO_Init+0x2c4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_GPIO_Init+0x1d2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a40      	ldr	r2, [pc, #256]	; (8003720 <HAL_GPIO_Init+0x2c8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_GPIO_Init+0x1ce>
 8003622:	2302      	movs	r3, #2
 8003624:	e004      	b.n	8003630 <HAL_GPIO_Init+0x1d8>
 8003626:	2305      	movs	r3, #5
 8003628:	e002      	b.n	8003630 <HAL_GPIO_Init+0x1d8>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x1d8>
 800362e:	2300      	movs	r3, #0
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	2103      	movs	r1, #3
 8003634:	400a      	ands	r2, r1
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	4093      	lsls	r3, r2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003640:	4935      	ldr	r1, [pc, #212]	; (8003718 <HAL_GPIO_Init+0x2c0>)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800364e:	4b35      	ldr	r3, [pc, #212]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	43da      	mvns	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	025b      	lsls	r3, r3, #9
 8003666:	4013      	ands	r3, r2
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003672:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003678:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	43da      	mvns	r2, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4013      	ands	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	029b      	lsls	r3, r3, #10
 8003690:	4013      	ands	r3, r2
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	035b      	lsls	r3, r3, #13
 80036ba:	4013      	ands	r3, r2
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	43da      	mvns	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	039b      	lsls	r3, r3, #14
 80036e4:	4013      	ands	r3, r2
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_GPIO_Init+0x2cc>)
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	40da      	lsrs	r2, r3
 8003704:	1e13      	subs	r3, r2, #0
 8003706:	d000      	beq.n	800370a <HAL_GPIO_Init+0x2b2>
 8003708:	e6ae      	b.n	8003468 <HAL_GPIO_Init+0x10>
  } 
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b006      	add	sp, #24
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	40021000 	.word	0x40021000
 8003718:	40010000 	.word	0x40010000
 800371c:	48000400 	.word	0x48000400
 8003720:	48000800 	.word	0x48000800
 8003724:	40010400 	.word	0x40010400

08003728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	0008      	movs	r0, r1
 8003732:	0011      	movs	r1, r2
 8003734:	1cbb      	adds	r3, r7, #2
 8003736:	1c02      	adds	r2, r0, #0
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	1c7b      	adds	r3, r7, #1
 800373c:	1c0a      	adds	r2, r1, #0
 800373e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003740:	1c7b      	adds	r3, r7, #1
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003748:	1cbb      	adds	r3, r7, #2
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003750:	e003      	b.n	800375a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003752:	1cbb      	adds	r3, r7, #2
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e082      	b.n	800387c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2241      	movs	r2, #65	; 0x41
 800377a:	5c9b      	ldrb	r3, [r3, r2]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff f905 	bl	800299c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2241      	movs	r2, #65	; 0x41
 8003796:	2124      	movs	r1, #36	; 0x24
 8003798:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	438a      	bics	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4934      	ldr	r1, [pc, #208]	; (8003884 <HAL_I2C_Init+0x120>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4931      	ldr	r1, [pc, #196]	; (8003888 <HAL_I2C_Init+0x124>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d108      	bne.n	80037e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	0209      	lsls	r1, r1, #8
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	e007      	b.n	80037f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2184      	movs	r1, #132	; 0x84
 80037ec:	0209      	lsls	r1, r1, #8
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d104      	bne.n	8003804 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	491f      	ldr	r1, [pc, #124]	; (800388c <HAL_I2C_Init+0x128>)
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	491a      	ldr	r1, [pc, #104]	; (8003888 <HAL_I2C_Init+0x124>)
 8003820:	400a      	ands	r2, r1
 8003822:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	431a      	orrs	r2, r3
 800382e:	0011      	movs	r1, r2
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	021a      	lsls	r2, r3, #8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69d9      	ldr	r1, [r3, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1a      	ldr	r2, [r3, #32]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2241      	movs	r2, #65	; 0x41
 8003868:	2120      	movs	r1, #32
 800386a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2242      	movs	r2, #66	; 0x42
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}
 8003884:	f0ffffff 	.word	0xf0ffffff
 8003888:	ffff7fff 	.word	0xffff7fff
 800388c:	02008000 	.word	0x02008000

08003890 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b089      	sub	sp, #36	; 0x24
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	0008      	movs	r0, r1
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	0019      	movs	r1, r3
 800389e:	230a      	movs	r3, #10
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	1c02      	adds	r2, r0, #0
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	2308      	movs	r3, #8
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	1c0a      	adds	r2, r1, #0
 80038ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2241      	movs	r2, #65	; 0x41
 80038b2:	5c9b      	ldrb	r3, [r3, r2]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d000      	beq.n	80038bc <HAL_I2C_Master_Transmit+0x2c>
 80038ba:	e0e7      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2240      	movs	r2, #64	; 0x40
 80038c0:	5c9b      	ldrb	r3, [r3, r2]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_I2C_Master_Transmit+0x3a>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e0e1      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1fe>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	2101      	movs	r1, #1
 80038d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038d2:	f7ff f9c3 	bl	8002c5c <HAL_GetTick>
 80038d6:	0003      	movs	r3, r0
 80038d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	0219      	lsls	r1, r3, #8
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2319      	movs	r3, #25
 80038e6:	2201      	movs	r2, #1
 80038e8:	f000 fa92 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0cc      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2241      	movs	r2, #65	; 0x41
 80038f8:	2121      	movs	r1, #33	; 0x21
 80038fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2242      	movs	r2, #66	; 0x42
 8003900:	2110      	movs	r1, #16
 8003902:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2208      	movs	r2, #8
 8003914:	18ba      	adds	r2, r7, r2
 8003916:	8812      	ldrh	r2, [r2, #0]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2bff      	cmp	r3, #255	; 0xff
 8003928:	d911      	bls.n	800394e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	22ff      	movs	r2, #255	; 0xff
 800392e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	b2da      	uxtb	r2, r3
 8003936:	2380      	movs	r3, #128	; 0x80
 8003938:	045c      	lsls	r4, r3, #17
 800393a:	230a      	movs	r3, #10
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	8819      	ldrh	r1, [r3, #0]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	4b55      	ldr	r3, [pc, #340]	; (8003a98 <HAL_I2C_Master_Transmit+0x208>)
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	0023      	movs	r3, r4
 8003948:	f000 fb82 	bl	8004050 <I2C_TransferConfig>
 800394c:	e075      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	b2da      	uxtb	r2, r3
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	049c      	lsls	r4, r3, #18
 8003962:	230a      	movs	r3, #10
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	8819      	ldrh	r1, [r3, #0]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_I2C_Master_Transmit+0x208>)
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	0023      	movs	r3, r4
 8003970:	f000 fb6e 	bl	8004050 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003974:	e061      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	0018      	movs	r0, r3
 800397e:	f000 fa86 	bl	8003e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e081      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03a      	beq.n	8003a3a <HAL_I2C_Master_Transmit+0x1aa>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d136      	bne.n	8003a3a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	0013      	movs	r3, r2
 80039d6:	2200      	movs	r2, #0
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	f000 fa19 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e053      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2bff      	cmp	r3, #255	; 0xff
 80039ee:	d911      	bls.n	8003a14 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	045c      	lsls	r4, r3, #17
 8003a00:	230a      	movs	r3, #10
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	8819      	ldrh	r1, [r3, #0]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	0023      	movs	r3, r4
 8003a0e:	f000 fb1f 	bl	8004050 <I2C_TransferConfig>
 8003a12:	e012      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	049c      	lsls	r4, r3, #18
 8003a28:	230a      	movs	r3, #10
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	8819      	ldrh	r1, [r3, #0]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	2300      	movs	r3, #0
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	0023      	movs	r3, r4
 8003a36:	f000 fb0b 	bl	8004050 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d198      	bne.n	8003976 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 fa5e 	bl	8003f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a50:	1e03      	subs	r3, r0, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e01a      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	490c      	ldr	r1, [pc, #48]	; (8003a9c <HAL_I2C_Master_Transmit+0x20c>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2241      	movs	r2, #65	; 0x41
 8003a74:	2120      	movs	r1, #32
 8003a76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2242      	movs	r2, #66	; 0x42
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2240      	movs	r2, #64	; 0x40
 8003a84:	2100      	movs	r1, #0
 8003a86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b007      	add	sp, #28
 8003a94:	bd90      	pop	{r4, r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	80002000 	.word	0x80002000
 8003a9c:	fe00e800 	.word	0xfe00e800

08003aa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	000c      	movs	r4, r1
 8003aaa:	0010      	movs	r0, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	230a      	movs	r3, #10
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	1c22      	adds	r2, r4, #0
 8003ab4:	801a      	strh	r2, [r3, #0]
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	1c02      	adds	r2, r0, #0
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	1dbb      	adds	r3, r7, #6
 8003ac0:	1c0a      	adds	r2, r1, #0
 8003ac2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2241      	movs	r2, #65	; 0x41
 8003ac8:	5c9b      	ldrb	r3, [r3, r2]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d000      	beq.n	8003ad2 <HAL_I2C_Mem_Read+0x32>
 8003ad0:	e110      	b.n	8003cf4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <HAL_I2C_Mem_Read+0x42>
 8003ad8:	232c      	movs	r3, #44	; 0x2c
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	0092      	lsls	r2, r2, #2
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e103      	b.n	8003cf6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2240      	movs	r2, #64	; 0x40
 8003af2:	5c9b      	ldrb	r3, [r3, r2]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_I2C_Mem_Read+0x5c>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0fc      	b.n	8003cf6 <HAL_I2C_Mem_Read+0x256>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	; 0x40
 8003b00:	2101      	movs	r1, #1
 8003b02:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b04:	f7ff f8aa 	bl	8002c5c <HAL_GetTick>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	0219      	lsls	r1, r3, #8
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2319      	movs	r3, #25
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f000 f979 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0e7      	b.n	8003cf6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2241      	movs	r2, #65	; 0x41
 8003b2a:	2122      	movs	r1, #34	; 0x22
 8003b2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2242      	movs	r2, #66	; 0x42
 8003b32:	2140      	movs	r1, #64	; 0x40
 8003b34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	222c      	movs	r2, #44	; 0x2c
 8003b46:	18ba      	adds	r2, r7, r2
 8003b48:	8812      	ldrh	r2, [r2, #0]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b52:	1dbb      	adds	r3, r7, #6
 8003b54:	881c      	ldrh	r4, [r3, #0]
 8003b56:	2308      	movs	r3, #8
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	881a      	ldrh	r2, [r3, #0]
 8003b5c:	230a      	movs	r3, #10
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	8819      	ldrh	r1, [r3, #0]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	0023      	movs	r3, r4
 8003b6e:	f000 f8cb 	bl	8003d08 <I2C_RequestMemoryRead>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2240      	movs	r2, #64	; 0x40
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0b9      	b.n	8003cf6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2bff      	cmp	r3, #255	; 0xff
 8003b8a:	d911      	bls.n	8003bb0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	045c      	lsls	r4, r3, #17
 8003b9c:	230a      	movs	r3, #10
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	8819      	ldrh	r1, [r3, #0]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <HAL_I2C_Mem_Read+0x260>)
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	0023      	movs	r3, r4
 8003baa:	f000 fa51 	bl	8004050 <I2C_TransferConfig>
 8003bae:	e012      	b.n	8003bd6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	049c      	lsls	r4, r3, #18
 8003bc4:	230a      	movs	r3, #10
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	8819      	ldrh	r1, [r3, #0]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <HAL_I2C_Mem_Read+0x260>)
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	0023      	movs	r3, r4
 8003bd2:	f000 fa3d 	bl	8004050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	0013      	movs	r3, r2
 8003be0:	2200      	movs	r2, #0
 8003be2:	2104      	movs	r1, #4
 8003be4:	f000 f914 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e082      	b.n	8003cf6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d03a      	beq.n	8003ca2 <HAL_I2C_Mem_Read+0x202>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d136      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	f000 f8e5 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout>
 8003c46:	1e03      	subs	r3, r0, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e053      	b.n	8003cf6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2bff      	cmp	r3, #255	; 0xff
 8003c56:	d911      	bls.n	8003c7c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	22ff      	movs	r2, #255	; 0xff
 8003c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	045c      	lsls	r4, r3, #17
 8003c68:	230a      	movs	r3, #10
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	8819      	ldrh	r1, [r3, #0]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	0023      	movs	r3, r4
 8003c76:	f000 f9eb 	bl	8004050 <I2C_TransferConfig>
 8003c7a:	e012      	b.n	8003ca2 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	049c      	lsls	r4, r3, #18
 8003c90:	230a      	movs	r3, #10
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	8819      	ldrh	r1, [r3, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	0023      	movs	r3, r4
 8003c9e:	f000 f9d7 	bl	8004050 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d194      	bne.n	8003bd6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f92a 	bl	8003f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e01a      	b.n	8003cf6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	490c      	ldr	r1, [pc, #48]	; (8003d04 <HAL_I2C_Mem_Read+0x264>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2241      	movs	r2, #65	; 0x41
 8003cdc:	2120      	movs	r1, #32
 8003cde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2242      	movs	r2, #66	; 0x42
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	2100      	movs	r1, #0
 8003cee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b007      	add	sp, #28
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	80002400 	.word	0x80002400
 8003d04:	fe00e800 	.word	0xfe00e800

08003d08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b5b0      	push	{r4, r5, r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	000c      	movs	r4, r1
 8003d12:	0010      	movs	r0, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	250a      	movs	r5, #10
 8003d18:	197b      	adds	r3, r7, r5
 8003d1a:	1c22      	adds	r2, r4, #0
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	2308      	movs	r3, #8
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	1c02      	adds	r2, r0, #0
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	1dbb      	adds	r3, r7, #6
 8003d28:	1c0a      	adds	r2, r1, #0
 8003d2a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d2c:	1dbb      	adds	r3, r7, #6
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	197b      	adds	r3, r7, r5
 8003d34:	8819      	ldrh	r1, [r3, #0]
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <I2C_RequestMemoryRead+0xc0>)
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f000 f987 	bl	8004050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f000 f8a0 	bl	8003e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d4e:	1e03      	subs	r3, r0, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e033      	b.n	8003dbe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d56:	1dbb      	adds	r3, r7, #6
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d107      	bne.n	8003d6e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5e:	2308      	movs	r3, #8
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d6c:	e019      	b.n	8003da2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d6e:	2308      	movs	r3, #8
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d82:	6a39      	ldr	r1, [r7, #32]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 f881 	bl	8003e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e014      	b.n	8003dbe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d94:	2308      	movs	r3, #8
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003da2:	6a3a      	ldr	r2, [r7, #32]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	0013      	movs	r3, r2
 8003dac:	2200      	movs	r2, #0
 8003dae:	2140      	movs	r1, #64	; 0x40
 8003db0:	f000 f82e 	bl	8003e10 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d001      	beq.n	8003dbc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b004      	add	sp, #16
 8003dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	80002000 	.word	0x80002000

08003dcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d103      	bne.n	8003dea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d007      	beq.n	8003e08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2101      	movs	r1, #1
 8003e04:	430a      	orrs	r2, r1
 8003e06:	619a      	str	r2, [r3, #24]
  }
}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b002      	add	sp, #8
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	1dfb      	adds	r3, r7, #7
 8003e1e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e20:	e021      	b.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	d01e      	beq.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e28:	f7fe ff18 	bl	8002c5c <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d302      	bcc.n	8003e3e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d113      	bne.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	2220      	movs	r2, #32
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2241      	movs	r2, #65	; 0x41
 8003e4e:	2120      	movs	r1, #32
 8003e50:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2242      	movs	r2, #66	; 0x42
 8003e56:	2100      	movs	r1, #0
 8003e58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2240      	movs	r2, #64	; 0x40
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	425a      	negs	r2, r3
 8003e76:	4153      	adcs	r3, r2
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	1dfb      	adds	r3, r7, #7
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d0ce      	beq.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b004      	add	sp, #16
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e9a:	e02b      	b.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 f86e 	bl	8003f84 <I2C_IsAcknowledgeFailed>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e029      	b.n	8003f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	d01e      	beq.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb6:	f7fe fed1 	bl	8002c5c <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d302      	bcc.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d113      	bne.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2241      	movs	r2, #65	; 0x41
 8003edc:	2120      	movs	r1, #32
 8003ede:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2242      	movs	r2, #66	; 0x42
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2240      	movs	r2, #64	; 0x40
 8003eec:	2100      	movs	r1, #0
 8003eee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e007      	b.n	8003f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2202      	movs	r2, #2
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d1cc      	bne.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b004      	add	sp, #16
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f18:	e028      	b.n	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 f82f 	bl	8003f84 <I2C_IsAcknowledgeFailed>
 8003f26:	1e03      	subs	r3, r0, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e026      	b.n	8003f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2e:	f7fe fe95 	bl	8002c5c <HAL_GetTick>
 8003f32:	0002      	movs	r2, r0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d302      	bcc.n	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d113      	bne.n	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	2220      	movs	r2, #32
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2241      	movs	r2, #65	; 0x41
 8003f54:	2120      	movs	r1, #32
 8003f56:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2242      	movs	r2, #66	; 0x42
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2240      	movs	r2, #64	; 0x40
 8003f64:	2100      	movs	r1, #0
 8003f66:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e007      	b.n	8003f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2220      	movs	r2, #32
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d1cf      	bne.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b004      	add	sp, #16
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2210      	movs	r2, #16
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d151      	bne.n	8004042 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f9e:	e021      	b.n	8003fe4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	d01e      	beq.n	8003fe4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7fe fe59 	bl	8002c5c <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <I2C_IsAcknowledgeFailed+0x38>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d113      	bne.n	8003fe4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2241      	movs	r2, #65	; 0x41
 8003fcc:	2120      	movs	r1, #32
 8003fce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2242      	movs	r2, #66	; 0x42
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2240      	movs	r2, #64	; 0x40
 8003fdc:	2100      	movs	r1, #0
 8003fde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e02f      	b.n	8004044 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	2220      	movs	r2, #32
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d1d6      	bne.n	8003fa0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2210      	movs	r2, #16
 8003ff8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2220      	movs	r2, #32
 8004000:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	0018      	movs	r0, r3
 8004006:	f7ff fee1 	bl	8003dcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	490d      	ldr	r1, [pc, #52]	; (800404c <I2C_IsAcknowledgeFailed+0xc8>)
 8004016:	400a      	ands	r2, r1
 8004018:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	2204      	movs	r2, #4
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2241      	movs	r2, #65	; 0x41
 800402a:	2120      	movs	r1, #32
 800402c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2242      	movs	r2, #66	; 0x42
 8004032:	2100      	movs	r1, #0
 8004034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2240      	movs	r2, #64	; 0x40
 800403a:	2100      	movs	r1, #0
 800403c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b004      	add	sp, #16
 800404a:	bd80      	pop	{r7, pc}
 800404c:	fe00e800 	.word	0xfe00e800

08004050 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	0008      	movs	r0, r1
 800405a:	0011      	movs	r1, r2
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	240a      	movs	r4, #10
 8004060:	193b      	adds	r3, r7, r4
 8004062:	1c02      	adds	r2, r0, #0
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	2009      	movs	r0, #9
 8004068:	183b      	adds	r3, r7, r0
 800406a:	1c0a      	adds	r2, r1, #0
 800406c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	6a3a      	ldr	r2, [r7, #32]
 8004076:	0d51      	lsrs	r1, r2, #21
 8004078:	2280      	movs	r2, #128	; 0x80
 800407a:	00d2      	lsls	r2, r2, #3
 800407c:	400a      	ands	r2, r1
 800407e:	490e      	ldr	r1, [pc, #56]	; (80040b8 <I2C_TransferConfig+0x68>)
 8004080:	430a      	orrs	r2, r1
 8004082:	43d2      	mvns	r2, r2
 8004084:	401a      	ands	r2, r3
 8004086:	0011      	movs	r1, r2
 8004088:	193b      	adds	r3, r7, r4
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	059b      	lsls	r3, r3, #22
 800408e:	0d9a      	lsrs	r2, r3, #22
 8004090:	183b      	adds	r3, r7, r0
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	0418      	lsls	r0, r3, #16
 8004096:	23ff      	movs	r3, #255	; 0xff
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	4003      	ands	r3, r0
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b005      	add	sp, #20
 80040b4:	bd90      	pop	{r4, r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	03ff63ff 	.word	0x03ff63ff

080040bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2241      	movs	r2, #65	; 0x41
 80040ca:	5c9b      	ldrb	r3, [r3, r2]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d138      	bne.n	8004144 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040dc:	2302      	movs	r3, #2
 80040de:	e032      	b.n	8004146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	2101      	movs	r1, #1
 80040e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2241      	movs	r2, #65	; 0x41
 80040ec:	2124      	movs	r1, #36	; 0x24
 80040ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2101      	movs	r1, #1
 80040fc:	438a      	bics	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4911      	ldr	r1, [pc, #68]	; (8004150 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800410c:	400a      	ands	r2, r1
 800410e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	430a      	orrs	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2241      	movs	r2, #65	; 0x41
 8004134:	2120      	movs	r1, #32
 8004136:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2240      	movs	r2, #64	; 0x40
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e000      	b.n	8004146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
  }
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b002      	add	sp, #8
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	ffffefff 	.word	0xffffefff

08004154 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2241      	movs	r2, #65	; 0x41
 8004162:	5c9b      	ldrb	r3, [r3, r2]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	d139      	bne.n	80041de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2240      	movs	r2, #64	; 0x40
 800416e:	5c9b      	ldrb	r3, [r3, r2]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004174:	2302      	movs	r3, #2
 8004176:	e033      	b.n	80041e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	2101      	movs	r1, #1
 800417e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2241      	movs	r2, #65	; 0x41
 8004184:	2124      	movs	r1, #36	; 0x24
 8004186:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2101      	movs	r1, #1
 8004194:	438a      	bics	r2, r1
 8004196:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2101      	movs	r1, #1
 80041c6:	430a      	orrs	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2241      	movs	r2, #65	; 0x41
 80041ce:	2120      	movs	r1, #32
 80041d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2240      	movs	r2, #64	; 0x40
 80041d6:	2100      	movs	r1, #0
 80041d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b004      	add	sp, #16
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	fffff0ff 	.word	0xfffff0ff

080041ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f000 fb76 	bl	80048ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2201      	movs	r2, #1
 8004206:	4013      	ands	r3, r2
 8004208:	d100      	bne.n	800420c <HAL_RCC_OscConfig+0x20>
 800420a:	e08e      	b.n	800432a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800420c:	4bc5      	ldr	r3, [pc, #788]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	220c      	movs	r2, #12
 8004212:	4013      	ands	r3, r2
 8004214:	2b04      	cmp	r3, #4
 8004216:	d00e      	beq.n	8004236 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004218:	4bc2      	ldr	r3, [pc, #776]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	220c      	movs	r2, #12
 800421e:	4013      	ands	r3, r2
 8004220:	2b08      	cmp	r3, #8
 8004222:	d117      	bne.n	8004254 <HAL_RCC_OscConfig+0x68>
 8004224:	4bbf      	ldr	r3, [pc, #764]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	23c0      	movs	r3, #192	; 0xc0
 800422a:	025b      	lsls	r3, r3, #9
 800422c:	401a      	ands	r2, r3
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	025b      	lsls	r3, r3, #9
 8004232:	429a      	cmp	r2, r3
 8004234:	d10e      	bne.n	8004254 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004236:	4bbb      	ldr	r3, [pc, #748]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	2380      	movs	r3, #128	; 0x80
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	4013      	ands	r3, r2
 8004240:	d100      	bne.n	8004244 <HAL_RCC_OscConfig+0x58>
 8004242:	e071      	b.n	8004328 <HAL_RCC_OscConfig+0x13c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d000      	beq.n	800424e <HAL_RCC_OscConfig+0x62>
 800424c:	e06c      	b.n	8004328 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f000 fb4c 	bl	80048ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d107      	bne.n	800426c <HAL_RCC_OscConfig+0x80>
 800425c:	4bb1      	ldr	r3, [pc, #708]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4bb0      	ldr	r3, [pc, #704]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	0249      	lsls	r1, r1, #9
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e02f      	b.n	80042cc <HAL_RCC_OscConfig+0xe0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10c      	bne.n	800428e <HAL_RCC_OscConfig+0xa2>
 8004274:	4bab      	ldr	r3, [pc, #684]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4baa      	ldr	r3, [pc, #680]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800427a:	49ab      	ldr	r1, [pc, #684]	; (8004528 <HAL_RCC_OscConfig+0x33c>)
 800427c:	400a      	ands	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	4ba8      	ldr	r3, [pc, #672]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4ba7      	ldr	r3, [pc, #668]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004286:	49a9      	ldr	r1, [pc, #676]	; (800452c <HAL_RCC_OscConfig+0x340>)
 8004288:	400a      	ands	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e01e      	b.n	80042cc <HAL_RCC_OscConfig+0xe0>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b05      	cmp	r3, #5
 8004294:	d10e      	bne.n	80042b4 <HAL_RCC_OscConfig+0xc8>
 8004296:	4ba3      	ldr	r3, [pc, #652]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4ba2      	ldr	r3, [pc, #648]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	02c9      	lsls	r1, r1, #11
 80042a0:	430a      	orrs	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	4b9f      	ldr	r3, [pc, #636]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b9e      	ldr	r3, [pc, #632]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	0249      	lsls	r1, r1, #9
 80042ae:	430a      	orrs	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0xe0>
 80042b4:	4b9b      	ldr	r3, [pc, #620]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b9a      	ldr	r3, [pc, #616]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80042ba:	499b      	ldr	r1, [pc, #620]	; (8004528 <HAL_RCC_OscConfig+0x33c>)
 80042bc:	400a      	ands	r2, r1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	4b98      	ldr	r3, [pc, #608]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b97      	ldr	r3, [pc, #604]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80042c6:	4999      	ldr	r1, [pc, #612]	; (800452c <HAL_RCC_OscConfig+0x340>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d014      	beq.n	80042fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fe fcc2 	bl	8002c5c <HAL_GetTick>
 80042d8:	0003      	movs	r3, r0
 80042da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042de:	f7fe fcbd 	bl	8002c5c <HAL_GetTick>
 80042e2:	0002      	movs	r2, r0
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b64      	cmp	r3, #100	; 0x64
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e2fd      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f0:	4b8c      	ldr	r3, [pc, #560]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	4013      	ands	r3, r2
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0xf2>
 80042fc:	e015      	b.n	800432a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fe:	f7fe fcad 	bl	8002c5c <HAL_GetTick>
 8004302:	0003      	movs	r3, r0
 8004304:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004308:	f7fe fca8 	bl	8002c5c <HAL_GetTick>
 800430c:	0002      	movs	r2, r0
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e2e8      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431a:	4b82      	ldr	r3, [pc, #520]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	029b      	lsls	r3, r3, #10
 8004322:	4013      	ands	r3, r2
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x11c>
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2202      	movs	r2, #2
 8004330:	4013      	ands	r3, r2
 8004332:	d100      	bne.n	8004336 <HAL_RCC_OscConfig+0x14a>
 8004334:	e06c      	b.n	8004410 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004336:	4b7b      	ldr	r3, [pc, #492]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	220c      	movs	r2, #12
 800433c:	4013      	ands	r3, r2
 800433e:	d00e      	beq.n	800435e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004340:	4b78      	ldr	r3, [pc, #480]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	220c      	movs	r2, #12
 8004346:	4013      	ands	r3, r2
 8004348:	2b08      	cmp	r3, #8
 800434a:	d11f      	bne.n	800438c <HAL_RCC_OscConfig+0x1a0>
 800434c:	4b75      	ldr	r3, [pc, #468]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	23c0      	movs	r3, #192	; 0xc0
 8004352:	025b      	lsls	r3, r3, #9
 8004354:	401a      	ands	r2, r3
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	429a      	cmp	r2, r3
 800435c:	d116      	bne.n	800438c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435e:	4b71      	ldr	r3, [pc, #452]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	d005      	beq.n	8004374 <HAL_RCC_OscConfig+0x188>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e2bb      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b6b      	ldr	r3, [pc, #428]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	22f8      	movs	r2, #248	; 0xf8
 800437a:	4393      	bics	r3, r2
 800437c:	0019      	movs	r1, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	00da      	lsls	r2, r3, #3
 8004384:	4b67      	ldr	r3, [pc, #412]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004386:	430a      	orrs	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	e041      	b.n	8004410 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d024      	beq.n	80043de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004394:	4b63      	ldr	r3, [pc, #396]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b62      	ldr	r3, [pc, #392]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800439a:	2101      	movs	r1, #1
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fe fc5c 	bl	8002c5c <HAL_GetTick>
 80043a4:	0003      	movs	r3, r0
 80043a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043aa:	f7fe fc57 	bl	8002c5c <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e297      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043bc:	4b59      	ldr	r3, [pc, #356]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2202      	movs	r2, #2
 80043c2:	4013      	ands	r3, r2
 80043c4:	d0f1      	beq.n	80043aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b57      	ldr	r3, [pc, #348]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	22f8      	movs	r2, #248	; 0xf8
 80043cc:	4393      	bics	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	00da      	lsls	r2, r3, #3
 80043d6:	4b53      	ldr	r3, [pc, #332]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e018      	b.n	8004410 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043de:	4b51      	ldr	r3, [pc, #324]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b50      	ldr	r3, [pc, #320]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80043e4:	2101      	movs	r1, #1
 80043e6:	438a      	bics	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fe fc37 	bl	8002c5c <HAL_GetTick>
 80043ee:	0003      	movs	r3, r0
 80043f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fe fc32 	bl	8002c5c <HAL_GetTick>
 80043f8:	0002      	movs	r2, r0
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e272      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	4b47      	ldr	r3, [pc, #284]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2202      	movs	r2, #2
 800440c:	4013      	ands	r3, r2
 800440e:	d1f1      	bne.n	80043f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2208      	movs	r2, #8
 8004416:	4013      	ands	r3, r2
 8004418:	d036      	beq.n	8004488 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d019      	beq.n	8004456 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b40      	ldr	r3, [pc, #256]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004426:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004428:	2101      	movs	r1, #1
 800442a:	430a      	orrs	r2, r1
 800442c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fe fc15 	bl	8002c5c <HAL_GetTick>
 8004432:	0003      	movs	r3, r0
 8004434:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004438:	f7fe fc10 	bl	8002c5c <HAL_GetTick>
 800443c:	0002      	movs	r2, r0
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e250      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b36      	ldr	r3, [pc, #216]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	2202      	movs	r2, #2
 8004450:	4013      	ands	r3, r2
 8004452:	d0f1      	beq.n	8004438 <HAL_RCC_OscConfig+0x24c>
 8004454:	e018      	b.n	8004488 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800445a:	4b32      	ldr	r3, [pc, #200]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800445c:	2101      	movs	r1, #1
 800445e:	438a      	bics	r2, r1
 8004460:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004462:	f7fe fbfb 	bl	8002c5c <HAL_GetTick>
 8004466:	0003      	movs	r3, r0
 8004468:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800446c:	f7fe fbf6 	bl	8002c5c <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e236      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447e:	4b29      	ldr	r3, [pc, #164]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	2202      	movs	r2, #2
 8004484:	4013      	ands	r3, r2
 8004486:	d1f1      	bne.n	800446c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2204      	movs	r2, #4
 800448e:	4013      	ands	r3, r2
 8004490:	d100      	bne.n	8004494 <HAL_RCC_OscConfig+0x2a8>
 8004492:	e0b5      	b.n	8004600 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004494:	231f      	movs	r3, #31
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	055b      	lsls	r3, r3, #21
 80044a4:	4013      	ands	r3, r2
 80044a6:	d111      	bne.n	80044cc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	0549      	lsls	r1, r1, #21
 80044b2:	430a      	orrs	r2, r1
 80044b4:	61da      	str	r2, [r3, #28]
 80044b6:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	055b      	lsls	r3, r3, #21
 80044be:	4013      	ands	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044c4:	231f      	movs	r3, #31
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	4b18      	ldr	r3, [pc, #96]	; (8004530 <HAL_RCC_OscConfig+0x344>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4013      	ands	r3, r2
 80044d6:	d11a      	bne.n	800450e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_RCC_OscConfig+0x344>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b14      	ldr	r3, [pc, #80]	; (8004530 <HAL_RCC_OscConfig+0x344>)
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	0049      	lsls	r1, r1, #1
 80044e2:	430a      	orrs	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e6:	f7fe fbb9 	bl	8002c5c <HAL_GetTick>
 80044ea:	0003      	movs	r3, r0
 80044ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fe fbb4 	bl	8002c5c <HAL_GetTick>
 80044f4:	0002      	movs	r2, r0
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e1f4      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_OscConfig+0x344>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4013      	ands	r3, r2
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d10e      	bne.n	8004534 <HAL_RCC_OscConfig+0x348>
 8004516:	4b03      	ldr	r3, [pc, #12]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 8004518:	6a1a      	ldr	r2, [r3, #32]
 800451a:	4b02      	ldr	r3, [pc, #8]	; (8004524 <HAL_RCC_OscConfig+0x338>)
 800451c:	2101      	movs	r1, #1
 800451e:	430a      	orrs	r2, r1
 8004520:	621a      	str	r2, [r3, #32]
 8004522:	e035      	b.n	8004590 <HAL_RCC_OscConfig+0x3a4>
 8004524:	40021000 	.word	0x40021000
 8004528:	fffeffff 	.word	0xfffeffff
 800452c:	fffbffff 	.word	0xfffbffff
 8004530:	40007000 	.word	0x40007000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10c      	bne.n	8004556 <HAL_RCC_OscConfig+0x36a>
 800453c:	4bca      	ldr	r3, [pc, #808]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800453e:	6a1a      	ldr	r2, [r3, #32]
 8004540:	4bc9      	ldr	r3, [pc, #804]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004542:	2101      	movs	r1, #1
 8004544:	438a      	bics	r2, r1
 8004546:	621a      	str	r2, [r3, #32]
 8004548:	4bc7      	ldr	r3, [pc, #796]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	4bc6      	ldr	r3, [pc, #792]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800454e:	2104      	movs	r1, #4
 8004550:	438a      	bics	r2, r1
 8004552:	621a      	str	r2, [r3, #32]
 8004554:	e01c      	b.n	8004590 <HAL_RCC_OscConfig+0x3a4>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b05      	cmp	r3, #5
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0x38c>
 800455e:	4bc2      	ldr	r3, [pc, #776]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	4bc1      	ldr	r3, [pc, #772]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004564:	2104      	movs	r1, #4
 8004566:	430a      	orrs	r2, r1
 8004568:	621a      	str	r2, [r3, #32]
 800456a:	4bbf      	ldr	r3, [pc, #764]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800456c:	6a1a      	ldr	r2, [r3, #32]
 800456e:	4bbe      	ldr	r3, [pc, #760]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004570:	2101      	movs	r1, #1
 8004572:	430a      	orrs	r2, r1
 8004574:	621a      	str	r2, [r3, #32]
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0x3a4>
 8004578:	4bbb      	ldr	r3, [pc, #748]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	4bba      	ldr	r3, [pc, #744]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800457e:	2101      	movs	r1, #1
 8004580:	438a      	bics	r2, r1
 8004582:	621a      	str	r2, [r3, #32]
 8004584:	4bb8      	ldr	r3, [pc, #736]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	4bb7      	ldr	r3, [pc, #732]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800458a:	2104      	movs	r1, #4
 800458c:	438a      	bics	r2, r1
 800458e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d014      	beq.n	80045c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004598:	f7fe fb60 	bl	8002c5c <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a0:	e009      	b.n	80045b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a2:	f7fe fb5b 	bl	8002c5c <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	4aaf      	ldr	r2, [pc, #700]	; (800486c <HAL_RCC_OscConfig+0x680>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e19a      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b6:	4bac      	ldr	r3, [pc, #688]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	2202      	movs	r2, #2
 80045bc:	4013      	ands	r3, r2
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x3b6>
 80045c0:	e013      	b.n	80045ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fe fb4b 	bl	8002c5c <HAL_GetTick>
 80045c6:	0003      	movs	r3, r0
 80045c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ca:	e009      	b.n	80045e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045cc:	f7fe fb46 	bl	8002c5c <HAL_GetTick>
 80045d0:	0002      	movs	r2, r0
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	4aa5      	ldr	r2, [pc, #660]	; (800486c <HAL_RCC_OscConfig+0x680>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e185      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e0:	4ba1      	ldr	r3, [pc, #644]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	2202      	movs	r2, #2
 80045e6:	4013      	ands	r3, r2
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045ea:	231f      	movs	r3, #31
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f4:	4b9c      	ldr	r3, [pc, #624]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	4b9b      	ldr	r3, [pc, #620]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80045fa:	499d      	ldr	r1, [pc, #628]	; (8004870 <HAL_RCC_OscConfig+0x684>)
 80045fc:	400a      	ands	r2, r1
 80045fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2210      	movs	r2, #16
 8004606:	4013      	ands	r3, r2
 8004608:	d063      	beq.n	80046d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d12a      	bne.n	8004668 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004612:	4b95      	ldr	r3, [pc, #596]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004616:	4b94      	ldr	r3, [pc, #592]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004618:	2104      	movs	r1, #4
 800461a:	430a      	orrs	r2, r1
 800461c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800461e:	4b92      	ldr	r3, [pc, #584]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004622:	4b91      	ldr	r3, [pc, #580]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004624:	2101      	movs	r1, #1
 8004626:	430a      	orrs	r2, r1
 8004628:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462a:	f7fe fb17 	bl	8002c5c <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004634:	f7fe fb12 	bl	8002c5c <HAL_GetTick>
 8004638:	0002      	movs	r2, r0
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e152      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004646:	4b88      	ldr	r3, [pc, #544]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	2202      	movs	r2, #2
 800464c:	4013      	ands	r3, r2
 800464e:	d0f1      	beq.n	8004634 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004650:	4b85      	ldr	r3, [pc, #532]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	22f8      	movs	r2, #248	; 0xf8
 8004656:	4393      	bics	r3, r2
 8004658:	0019      	movs	r1, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	00da      	lsls	r2, r3, #3
 8004660:	4b81      	ldr	r3, [pc, #516]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004662:	430a      	orrs	r2, r1
 8004664:	635a      	str	r2, [r3, #52]	; 0x34
 8004666:	e034      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	3305      	adds	r3, #5
 800466e:	d111      	bne.n	8004694 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004670:	4b7d      	ldr	r3, [pc, #500]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004674:	4b7c      	ldr	r3, [pc, #496]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004676:	2104      	movs	r1, #4
 8004678:	438a      	bics	r2, r1
 800467a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800467c:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	22f8      	movs	r2, #248	; 0xf8
 8004682:	4393      	bics	r3, r2
 8004684:	0019      	movs	r1, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	00da      	lsls	r2, r3, #3
 800468c:	4b76      	ldr	r3, [pc, #472]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800468e:	430a      	orrs	r2, r1
 8004690:	635a      	str	r2, [r3, #52]	; 0x34
 8004692:	e01e      	b.n	80046d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004694:	4b74      	ldr	r3, [pc, #464]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004698:	4b73      	ldr	r3, [pc, #460]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800469a:	2104      	movs	r1, #4
 800469c:	430a      	orrs	r2, r1
 800469e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80046a0:	4b71      	ldr	r3, [pc, #452]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80046a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a4:	4b70      	ldr	r3, [pc, #448]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	438a      	bics	r2, r1
 80046aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ac:	f7fe fad6 	bl	8002c5c <HAL_GetTick>
 80046b0:	0003      	movs	r3, r0
 80046b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80046b6:	f7fe fad1 	bl	8002c5c <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e111      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80046c8:	4b67      	ldr	r3, [pc, #412]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	2202      	movs	r2, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	d1f1      	bne.n	80046b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2220      	movs	r2, #32
 80046d8:	4013      	ands	r3, r2
 80046da:	d05c      	beq.n	8004796 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80046dc:	4b62      	ldr	r3, [pc, #392]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	220c      	movs	r2, #12
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	d00e      	beq.n	8004706 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80046e8:	4b5f      	ldr	r3, [pc, #380]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	220c      	movs	r2, #12
 80046ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d114      	bne.n	800471e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80046f4:	4b5c      	ldr	r3, [pc, #368]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	23c0      	movs	r3, #192	; 0xc0
 80046fa:	025b      	lsls	r3, r3, #9
 80046fc:	401a      	ands	r2, r3
 80046fe:	23c0      	movs	r3, #192	; 0xc0
 8004700:	025b      	lsls	r3, r3, #9
 8004702:	429a      	cmp	r2, r3
 8004704:	d10b      	bne.n	800471e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004706:	4b58      	ldr	r3, [pc, #352]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	025b      	lsls	r3, r3, #9
 800470e:	4013      	ands	r3, r2
 8004710:	d040      	beq.n	8004794 <HAL_RCC_OscConfig+0x5a8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d03c      	beq.n	8004794 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e0e6      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01b      	beq.n	800475e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004726:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472a:	4b4f      	ldr	r3, [pc, #316]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800472c:	2180      	movs	r1, #128	; 0x80
 800472e:	0249      	lsls	r1, r1, #9
 8004730:	430a      	orrs	r2, r1
 8004732:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004734:	f7fe fa92 	bl	8002c5c <HAL_GetTick>
 8004738:	0003      	movs	r3, r0
 800473a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800473e:	f7fe fa8d 	bl	8002c5c <HAL_GetTick>
 8004742:	0002      	movs	r2, r0
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0cd      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004750:	4b45      	ldr	r3, [pc, #276]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004754:	2380      	movs	r3, #128	; 0x80
 8004756:	025b      	lsls	r3, r3, #9
 8004758:	4013      	ands	r3, r2
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x552>
 800475c:	e01b      	b.n	8004796 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800475e:	4b42      	ldr	r3, [pc, #264]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004762:	4b41      	ldr	r3, [pc, #260]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004764:	4943      	ldr	r1, [pc, #268]	; (8004874 <HAL_RCC_OscConfig+0x688>)
 8004766:	400a      	ands	r2, r1
 8004768:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476a:	f7fe fa77 	bl	8002c5c <HAL_GetTick>
 800476e:	0003      	movs	r3, r0
 8004770:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004774:	f7fe fa72 	bl	8002c5c <HAL_GetTick>
 8004778:	0002      	movs	r2, r0
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0b2      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004786:	4b38      	ldr	r3, [pc, #224]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	025b      	lsls	r3, r3, #9
 800478e:	4013      	ands	r3, r2
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x588>
 8004792:	e000      	b.n	8004796 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004794:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <HAL_RCC_OscConfig+0x5b4>
 800479e:	e0a4      	b.n	80048ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a0:	4b31      	ldr	r3, [pc, #196]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	220c      	movs	r2, #12
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d100      	bne.n	80047ae <HAL_RCC_OscConfig+0x5c2>
 80047ac:	e078      	b.n	80048a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d14c      	bne.n	8004850 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b6:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80047bc:	492e      	ldr	r1, [pc, #184]	; (8004878 <HAL_RCC_OscConfig+0x68c>)
 80047be:	400a      	ands	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fe fa4b 	bl	8002c5c <HAL_GetTick>
 80047c6:	0003      	movs	r3, r0
 80047c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fe fa46 	bl	8002c5c <HAL_GetTick>
 80047d0:	0002      	movs	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e086      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047de:	4b22      	ldr	r3, [pc, #136]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	049b      	lsls	r3, r3, #18
 80047e6:	4013      	ands	r3, r2
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ea:	4b1f      	ldr	r3, [pc, #124]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	220f      	movs	r2, #15
 80047f0:	4393      	bics	r3, r2
 80047f2:	0019      	movs	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 80047fa:	430a      	orrs	r2, r1
 80047fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4a1e      	ldr	r2, [pc, #120]	; (800487c <HAL_RCC_OscConfig+0x690>)
 8004804:	4013      	ands	r3, r2
 8004806:	0019      	movs	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	431a      	orrs	r2, r3
 8004812:	4b15      	ldr	r3, [pc, #84]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004818:	4b13      	ldr	r3, [pc, #76]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 800481e:	2180      	movs	r1, #128	; 0x80
 8004820:	0449      	lsls	r1, r1, #17
 8004822:	430a      	orrs	r2, r1
 8004824:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fe fa19 	bl	8002c5c <HAL_GetTick>
 800482a:	0003      	movs	r3, r0
 800482c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004830:	f7fe fa14 	bl	8002c5c <HAL_GetTick>
 8004834:	0002      	movs	r2, r0
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e054      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004842:	4b09      	ldr	r3, [pc, #36]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	049b      	lsls	r3, r3, #18
 800484a:	4013      	ands	r3, r2
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x644>
 800484e:	e04c      	b.n	80048ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <HAL_RCC_OscConfig+0x67c>)
 8004856:	4908      	ldr	r1, [pc, #32]	; (8004878 <HAL_RCC_OscConfig+0x68c>)
 8004858:	400a      	ands	r2, r1
 800485a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fe f9fe 	bl	8002c5c <HAL_GetTick>
 8004860:	0003      	movs	r3, r0
 8004862:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004864:	e015      	b.n	8004892 <HAL_RCC_OscConfig+0x6a6>
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	40021000 	.word	0x40021000
 800486c:	00001388 	.word	0x00001388
 8004870:	efffffff 	.word	0xefffffff
 8004874:	fffeffff 	.word	0xfffeffff
 8004878:	feffffff 	.word	0xfeffffff
 800487c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004880:	f7fe f9ec 	bl	8002c5c <HAL_GetTick>
 8004884:	0002      	movs	r2, r0
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e02c      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004892:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_RCC_OscConfig+0x708>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	049b      	lsls	r3, r3, #18
 800489a:	4013      	ands	r3, r2
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x694>
 800489e:	e024      	b.n	80048ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e01f      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_OscConfig+0x708>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <HAL_RCC_OscConfig+0x708>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	23c0      	movs	r3, #192	; 0xc0
 80048bc:	025b      	lsls	r3, r3, #9
 80048be:	401a      	ands	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d10e      	bne.n	80048e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	220f      	movs	r2, #15
 80048cc:	401a      	ands	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	23f0      	movs	r3, #240	; 0xf0
 80048da:	039b      	lsls	r3, r3, #14
 80048dc:	401a      	ands	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d001      	beq.n	80048ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b008      	add	sp, #32
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000

080048f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0bf      	b.n	8004a8c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <HAL_RCC_ClockConfig+0x19c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2201      	movs	r2, #1
 8004912:	4013      	ands	r3, r2
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d911      	bls.n	800493e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b5e      	ldr	r3, [pc, #376]	; (8004a94 <HAL_RCC_ClockConfig+0x19c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2201      	movs	r2, #1
 8004920:	4393      	bics	r3, r2
 8004922:	0019      	movs	r1, r3
 8004924:	4b5b      	ldr	r3, [pc, #364]	; (8004a94 <HAL_RCC_ClockConfig+0x19c>)
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492c:	4b59      	ldr	r3, [pc, #356]	; (8004a94 <HAL_RCC_ClockConfig+0x19c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2201      	movs	r2, #1
 8004932:	4013      	ands	r3, r2
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0a6      	b.n	8004a8c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2202      	movs	r2, #2
 8004944:	4013      	ands	r3, r2
 8004946:	d015      	beq.n	8004974 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2204      	movs	r2, #4
 800494e:	4013      	ands	r3, r2
 8004950:	d006      	beq.n	8004960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004952:	4b51      	ldr	r3, [pc, #324]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	4b50      	ldr	r3, [pc, #320]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004958:	21e0      	movs	r1, #224	; 0xe0
 800495a:	00c9      	lsls	r1, r1, #3
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b4d      	ldr	r3, [pc, #308]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	22f0      	movs	r2, #240	; 0xf0
 8004966:	4393      	bics	r3, r2
 8004968:	0019      	movs	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	4b4a      	ldr	r3, [pc, #296]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	4013      	ands	r3, r2
 800497c:	d04c      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d107      	bne.n	8004996 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b44      	ldr	r3, [pc, #272]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	029b      	lsls	r3, r3, #10
 800498e:	4013      	ands	r3, r2
 8004990:	d120      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e07a      	b.n	8004a8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499e:	4b3e      	ldr	r3, [pc, #248]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	049b      	lsls	r3, r3, #18
 80049a6:	4013      	ands	r3, r2
 80049a8:	d114      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06e      	b.n	8004a8c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d107      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80049b6:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 80049b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	025b      	lsls	r3, r3, #9
 80049be:	4013      	ands	r3, r2
 80049c0:	d108      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e062      	b.n	8004a8c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c6:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2202      	movs	r2, #2
 80049cc:	4013      	ands	r3, r2
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e05b      	b.n	8004a8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d4:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2203      	movs	r2, #3
 80049da:	4393      	bics	r3, r2
 80049dc:	0019      	movs	r1, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e8:	f7fe f938 	bl	8002c5c <HAL_GetTick>
 80049ec:	0003      	movs	r3, r0
 80049ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f0:	e009      	b.n	8004a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f2:	f7fe f933 	bl	8002c5c <HAL_GetTick>
 80049f6:	0002      	movs	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <HAL_RCC_ClockConfig+0x1a4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e042      	b.n	8004a8c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	220c      	movs	r2, #12
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1ec      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <HAL_RCC_ClockConfig+0x19c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	4013      	ands	r3, r2
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d211      	bcs.n	8004a4a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <HAL_RCC_ClockConfig+0x19c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4393      	bics	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <HAL_RCC_ClockConfig+0x19c>)
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a38:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <HAL_RCC_ClockConfig+0x19c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d001      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e020      	b.n	8004a8c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	4013      	ands	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <HAL_RCC_ClockConfig+0x1a8>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a68:	f000 f820 	bl	8004aac <HAL_RCC_GetSysClockFreq>
 8004a6c:	0001      	movs	r1, r0
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <HAL_RCC_ClockConfig+0x1a0>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	220f      	movs	r2, #15
 8004a76:	4013      	ands	r3, r2
 8004a78:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x1ac>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	000a      	movs	r2, r1
 8004a7e:	40da      	lsrs	r2, r3
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7fe f8a3 	bl	8002bd0 <HAL_InitTick>
  
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40022000 	.word	0x40022000
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	00001388 	.word	0x00001388
 8004aa0:	fffff8ff 	.word	0xfffff8ff
 8004aa4:	08005594 	.word	0x08005594
 8004aa8:	20000018 	.word	0x20000018

08004aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b08f      	sub	sp, #60	; 0x3c
 8004ab0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004ab2:	2314      	movs	r3, #20
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	4a37      	ldr	r2, [pc, #220]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004ab8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004aba:	c313      	stmia	r3!, {r0, r1, r4}
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	4a35      	ldr	r2, [pc, #212]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xec>)
 8004ac4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004ac6:	c313      	stmia	r3!, {r0, r1, r4}
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad8:	2300      	movs	r3, #0
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004ae0:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xf0>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	220c      	movs	r2, #12
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d006      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0x52>
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d043      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0xd0>
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d144      	bne.n	8004b82 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004afc:	e044      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	0c9b      	lsrs	r3, r3, #18
 8004b02:	220f      	movs	r2, #15
 8004b04:	4013      	ands	r3, r2
 8004b06:	2214      	movs	r2, #20
 8004b08:	18ba      	adds	r2, r7, r2
 8004b0a:	5cd3      	ldrb	r3, [r2, r3]
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004b0e:	4b23      	ldr	r3, [pc, #140]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xf0>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	220f      	movs	r2, #15
 8004b14:	4013      	ands	r3, r2
 8004b16:	1d3a      	adds	r2, r7, #4
 8004b18:	5cd3      	ldrb	r3, [r2, r3]
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b1e:	23c0      	movs	r3, #192	; 0xc0
 8004b20:	025b      	lsls	r3, r3, #9
 8004b22:	401a      	ands	r2, r3
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	025b      	lsls	r3, r3, #9
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d109      	bne.n	8004b40 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2e:	481c      	ldr	r0, [pc, #112]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b30:	f7fb faea 	bl	8000108 <__udivsi3>
 8004b34:	0003      	movs	r3, r0
 8004b36:	001a      	movs	r2, r3
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	4353      	muls	r3, r2
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3e:	e01a      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b42:	23c0      	movs	r3, #192	; 0xc0
 8004b44:	025b      	lsls	r3, r3, #9
 8004b46:	401a      	ands	r2, r3
 8004b48:	23c0      	movs	r3, #192	; 0xc0
 8004b4a:	025b      	lsls	r3, r3, #9
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d109      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b52:	4814      	ldr	r0, [pc, #80]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b54:	f7fb fad8 	bl	8000108 <__udivsi3>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	001a      	movs	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	4353      	muls	r3, r2
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b66:	480e      	ldr	r0, [pc, #56]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b68:	f7fb face 	bl	8000108 <__udivsi3>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	001a      	movs	r2, r3
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	4353      	muls	r3, r2
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b7a:	e005      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b80:	e002      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b82:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b86:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b00f      	add	sp, #60	; 0x3c
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	08005534 	.word	0x08005534
 8004b98:	08005544 	.word	0x08005544
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	007a1200 	.word	0x007a1200
 8004ba4:	02dc6c00 	.word	0x02dc6c00

08004ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	025b      	lsls	r3, r3, #9
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d100      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004bc4:	e08f      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004bc6:	2317      	movs	r3, #23
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bce:	4b67      	ldr	r3, [pc, #412]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	055b      	lsls	r3, r3, #21
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d111      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bda:	4b64      	ldr	r3, [pc, #400]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bdc:	69da      	ldr	r2, [r3, #28]
 8004bde:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	0549      	lsls	r1, r1, #21
 8004be4:	430a      	orrs	r2, r1
 8004be6:	61da      	str	r2, [r3, #28]
 8004be8:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	055b      	lsls	r3, r3, #21
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf6:	2317      	movs	r3, #23
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfe:	4b5c      	ldr	r3, [pc, #368]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	4013      	ands	r3, r2
 8004c08:	d11a      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0a:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b58      	ldr	r3, [pc, #352]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	0049      	lsls	r1, r1, #1
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c18:	f7fe f820 	bl	8002c5c <HAL_GetTick>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c20:	e008      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c22:	f7fe f81b 	bl	8002c5c <HAL_GetTick>
 8004c26:	0002      	movs	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b64      	cmp	r3, #100	; 0x64
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e097      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c34:	4b4e      	ldr	r3, [pc, #312]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c40:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c42:	6a1a      	ldr	r2, [r3, #32]
 8004c44:	23c0      	movs	r3, #192	; 0xc0
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d034      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	23c0      	movs	r3, #192	; 0xc0
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d02c      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c62:	4b42      	ldr	r3, [pc, #264]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4a43      	ldr	r2, [pc, #268]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c6c:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c72:	2180      	movs	r1, #128	; 0x80
 8004c74:	0249      	lsls	r1, r1, #9
 8004c76:	430a      	orrs	r2, r1
 8004c78:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7a:	4b3c      	ldr	r3, [pc, #240]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c7c:	6a1a      	ldr	r2, [r3, #32]
 8004c7e:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c80:	493d      	ldr	r1, [pc, #244]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	400a      	ands	r2, r1
 8004c84:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c86:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4013      	ands	r3, r2
 8004c92:	d013      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c94:	f7fd ffe2 	bl	8002c5c <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9c:	e009      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fd ffdd 	bl	8002c5c <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	4a34      	ldr	r2, [pc, #208]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e058      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb2:	4b2e      	ldr	r3, [pc, #184]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	4b28      	ldr	r3, [pc, #160]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cd0:	2317      	movs	r3, #23
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d105      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	4b23      	ldr	r3, [pc, #140]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004ce0:	4927      	ldr	r1, [pc, #156]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	4013      	ands	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	4393      	bics	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d00:	430a      	orrs	r2, r1
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	2210      	movs	r2, #16
 8004d14:	4393      	bics	r3, r2
 8004d16:	0019      	movs	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	4393      	bics	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695a      	ldr	r2, [r3, #20]
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	2380      	movs	r3, #128	; 0x80
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	2240      	movs	r2, #64	; 0x40
 8004d54:	4393      	bics	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b006      	add	sp, #24
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	40007000 	.word	0x40007000
 8004d74:	fffffcff 	.word	0xfffffcff
 8004d78:	fffeffff 	.word	0xfffeffff
 8004d7c:	00001388 	.word	0x00001388
 8004d80:	efffffff 	.word	0xefffffff

08004d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e01e      	b.n	8004dd4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	223d      	movs	r2, #61	; 0x3d
 8004d9a:	5c9b      	ldrb	r3, [r3, r2]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	223c      	movs	r2, #60	; 0x3c
 8004da6:	2100      	movs	r1, #0
 8004da8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f7fd fe43 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	223d      	movs	r2, #61	; 0x3d
 8004db6:	2102      	movs	r1, #2
 8004db8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	0010      	movs	r0, r2
 8004dc6:	f000 fa05 	bl	80051d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	223d      	movs	r2, #61	; 0x3d
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b002      	add	sp, #8
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2202      	movs	r2, #2
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d124      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d11d      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2203      	movs	r2, #3
 8004e06:	4252      	negs	r2, r2
 8004e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2203      	movs	r2, #3
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f000 f9c0 	bl	80051a4 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e007      	b.n	8004e36 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 f9b3 	bl	8005194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	0018      	movs	r0, r3
 8004e32:	f000 f9bf 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2204      	movs	r2, #4
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d125      	bne.n	8004e96 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2204      	movs	r2, #4
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d11e      	bne.n	8004e96 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2205      	movs	r2, #5
 8004e5e:	4252      	negs	r2, r2
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	23c0      	movs	r3, #192	; 0xc0
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4013      	ands	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f000 f993 	bl	80051a4 <HAL_TIM_IC_CaptureCallback>
 8004e7e:	e007      	b.n	8004e90 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	0018      	movs	r0, r3
 8004e84:	f000 f986 	bl	8005194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f000 f992 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d124      	bne.n	8004eee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2208      	movs	r2, #8
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d11d      	bne.n	8004eee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2209      	movs	r2, #9
 8004eb8:	4252      	negs	r2, r2
 8004eba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	2203      	movs	r2, #3
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 f967 	bl	80051a4 <HAL_TIM_IC_CaptureCallback>
 8004ed6:	e007      	b.n	8004ee8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	0018      	movs	r0, r3
 8004edc:	f000 f95a 	bl	8005194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f000 f966 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d125      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	2210      	movs	r2, #16
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d11e      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2211      	movs	r2, #17
 8004f10:	4252      	negs	r2, r2
 8004f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2208      	movs	r2, #8
 8004f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	23c0      	movs	r3, #192	; 0xc0
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4013      	ands	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f000 f93a 	bl	80051a4 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e007      	b.n	8004f42 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f000 f92d 	bl	8005194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f000 f939 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10f      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d108      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	4252      	negs	r2, r2
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 f907 	bl	8005184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2280      	movs	r2, #128	; 0x80
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b80      	cmp	r3, #128	; 0x80
 8004f82:	d10f      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2280      	movs	r2, #128	; 0x80
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b80      	cmp	r3, #128	; 0x80
 8004f90:	d108      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2281      	movs	r2, #129	; 0x81
 8004f98:	4252      	negs	r2, r2
 8004f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f000 fa88 	bl	80054b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	2240      	movs	r2, #64	; 0x40
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2240      	movs	r2, #64	; 0x40
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	d108      	bne.n	8004fd2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2241      	movs	r2, #65	; 0x41
 8004fc6:	4252      	negs	r2, r2
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 f8f9 	bl	80051c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d10f      	bne.n	8005000 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d108      	bne.n	8005000 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2221      	movs	r2, #33	; 0x21
 8004ff4:	4252      	negs	r2, r2
 8004ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f000 fa52 	bl	80054a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005000:	46c0      	nop			; (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b002      	add	sp, #8
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	223c      	movs	r2, #60	; 0x3c
 8005016:	5c9b      	ldrb	r3, [r3, r2]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIM_ConfigClockSource+0x18>
 800501c:	2302      	movs	r3, #2
 800501e:	e0ab      	b.n	8005178 <HAL_TIM_ConfigClockSource+0x170>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	223c      	movs	r2, #60	; 0x3c
 8005024:	2101      	movs	r1, #1
 8005026:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	223d      	movs	r2, #61	; 0x3d
 800502c:	2102      	movs	r1, #2
 800502e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2277      	movs	r2, #119	; 0x77
 800503c:	4393      	bics	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a4f      	ldr	r2, [pc, #316]	; (8005180 <HAL_TIM_ConfigClockSource+0x178>)
 8005044:	4013      	ands	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b40      	cmp	r3, #64	; 0x40
 8005056:	d100      	bne.n	800505a <HAL_TIM_ConfigClockSource+0x52>
 8005058:	e06b      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x12a>
 800505a:	d80e      	bhi.n	800507a <HAL_TIM_ConfigClockSource+0x72>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d100      	bne.n	8005062 <HAL_TIM_ConfigClockSource+0x5a>
 8005060:	e077      	b.n	8005152 <HAL_TIM_ConfigClockSource+0x14a>
 8005062:	d803      	bhi.n	800506c <HAL_TIM_ConfigClockSource+0x64>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d100      	bne.n	800506a <HAL_TIM_ConfigClockSource+0x62>
 8005068:	e073      	b.n	8005152 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800506a:	e07c      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800506c:	2b20      	cmp	r3, #32
 800506e:	d100      	bne.n	8005072 <HAL_TIM_ConfigClockSource+0x6a>
 8005070:	e06f      	b.n	8005152 <HAL_TIM_ConfigClockSource+0x14a>
 8005072:	2b30      	cmp	r3, #48	; 0x30
 8005074:	d100      	bne.n	8005078 <HAL_TIM_ConfigClockSource+0x70>
 8005076:	e06c      	b.n	8005152 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005078:	e075      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800507a:	2b70      	cmp	r3, #112	; 0x70
 800507c:	d00e      	beq.n	800509c <HAL_TIM_ConfigClockSource+0x94>
 800507e:	d804      	bhi.n	800508a <HAL_TIM_ConfigClockSource+0x82>
 8005080:	2b50      	cmp	r3, #80	; 0x50
 8005082:	d036      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0xea>
 8005084:	2b60      	cmp	r3, #96	; 0x60
 8005086:	d044      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005088:	e06d      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800508a:	2280      	movs	r2, #128	; 0x80
 800508c:	0152      	lsls	r2, r2, #5
 800508e:	4293      	cmp	r3, r2
 8005090:	d068      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0x15c>
 8005092:	2280      	movs	r2, #128	; 0x80
 8005094:	0192      	lsls	r2, r2, #6
 8005096:	4293      	cmp	r3, r2
 8005098:	d017      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800509a:	e064      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6899      	ldr	r1, [r3, #8]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f000 f982 	bl	80053b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2277      	movs	r2, #119	; 0x77
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	609a      	str	r2, [r3, #8]
      break;
 80050c8:	e04d      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6899      	ldr	r1, [r3, #8]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f000 f96b 	bl	80053b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2180      	movs	r1, #128	; 0x80
 80050ea:	01c9      	lsls	r1, r1, #7
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
      break;
 80050f0:	e039      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	001a      	movs	r2, r3
 8005100:	f000 f8de 	bl	80052c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2150      	movs	r1, #80	; 0x50
 800510a:	0018      	movs	r0, r3
 800510c:	f000 f938 	bl	8005380 <TIM_ITRx_SetConfig>
      break;
 8005110:	e029      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	001a      	movs	r2, r3
 8005120:	f000 f8fc 	bl	800531c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2160      	movs	r1, #96	; 0x60
 800512a:	0018      	movs	r0, r3
 800512c:	f000 f928 	bl	8005380 <TIM_ITRx_SetConfig>
      break;
 8005130:	e019      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	001a      	movs	r2, r3
 8005140:	f000 f8be 	bl	80052c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2140      	movs	r1, #64	; 0x40
 800514a:	0018      	movs	r0, r3
 800514c:	f000 f918 	bl	8005380 <TIM_ITRx_SetConfig>
      break;
 8005150:	e009      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	0019      	movs	r1, r3
 800515c:	0010      	movs	r0, r2
 800515e:	f000 f90f 	bl	8005380 <TIM_ITRx_SetConfig>
      break;
 8005162:	e000      	b.n	8005166 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005164:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	223d      	movs	r2, #61	; 0x3d
 800516a:	2101      	movs	r1, #1
 800516c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	223c      	movs	r2, #60	; 0x3c
 8005172:	2100      	movs	r1, #0
 8005174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	b004      	add	sp, #16
 800517e:	bd80      	pop	{r7, pc}
 8005180:	ffff00ff 	.word	0xffff00ff

08005184 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46bd      	mov	sp, r7
 8005190:	b002      	add	sp, #8
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	b002      	add	sp, #8
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b002      	add	sp, #8
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b002      	add	sp, #8
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051cc:	46c0      	nop			; (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b002      	add	sp, #8
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a30      	ldr	r2, [pc, #192]	; (80052a8 <TIM_Base_SetConfig+0xd4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d008      	beq.n	80051fe <TIM_Base_SetConfig+0x2a>
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	05db      	lsls	r3, r3, #23
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d003      	beq.n	80051fe <TIM_Base_SetConfig+0x2a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <TIM_Base_SetConfig+0xd8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2270      	movs	r2, #112	; 0x70
 8005202:	4393      	bics	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a25      	ldr	r2, [pc, #148]	; (80052a8 <TIM_Base_SetConfig+0xd4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d014      	beq.n	8005242 <TIM_Base_SetConfig+0x6e>
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	05db      	lsls	r3, r3, #23
 800521e:	429a      	cmp	r2, r3
 8005220:	d00f      	beq.n	8005242 <TIM_Base_SetConfig+0x6e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a21      	ldr	r2, [pc, #132]	; (80052ac <TIM_Base_SetConfig+0xd8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_Base_SetConfig+0x6e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <TIM_Base_SetConfig+0xdc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_Base_SetConfig+0x6e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <TIM_Base_SetConfig+0xe0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_Base_SetConfig+0x6e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <TIM_Base_SetConfig+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a1d      	ldr	r2, [pc, #116]	; (80052bc <TIM_Base_SetConfig+0xe8>)
 8005246:	4013      	ands	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	4393      	bics	r3, r2
 800525a:	001a      	movs	r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <TIM_Base_SetConfig+0xd4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_Base_SetConfig+0xbe>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a0b      	ldr	r2, [pc, #44]	; (80052b4 <TIM_Base_SetConfig+0xe0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_Base_SetConfig+0xbe>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <TIM_Base_SetConfig+0xe4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d103      	bne.n	800529a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	615a      	str	r2, [r3, #20]
}
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b004      	add	sp, #16
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40002000 	.word	0x40002000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	fffffcff 	.word	0xfffffcff

080052c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	2201      	movs	r2, #1
 80052d8:	4393      	bics	r3, r2
 80052da:	001a      	movs	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	22f0      	movs	r2, #240	; 0xf0
 80052ea:	4393      	bics	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	220a      	movs	r2, #10
 80052fc:	4393      	bics	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	46c0      	nop			; (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b006      	add	sp, #24
 800531a:	bd80      	pop	{r7, pc}

0800531c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	2210      	movs	r2, #16
 800532e:	4393      	bics	r3, r2
 8005330:	001a      	movs	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <TIM_TI2_ConfigInputStage+0x60>)
 8005346:	4013      	ands	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	031b      	lsls	r3, r3, #12
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	22a0      	movs	r2, #160	; 0xa0
 8005358:	4393      	bics	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	46bd      	mov	sp, r7
 8005376:	b006      	add	sp, #24
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	ffff0fff 	.word	0xffff0fff

08005380 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2270      	movs	r2, #112	; 0x70
 8005394:	4393      	bics	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	2207      	movs	r2, #7
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	609a      	str	r2, [r3, #8]
}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	46bd      	mov	sp, r7
 80053ae:	b004      	add	sp, #16
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <TIM_ETR_SetConfig+0x3c>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4313      	orrs	r3, r2
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	609a      	str	r2, [r3, #8]
}
 80053e8:	46c0      	nop			; (mov r8, r8)
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b006      	add	sp, #24
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	ffff00ff 	.word	0xffff00ff

080053f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	223c      	movs	r2, #60	; 0x3c
 8005402:	5c9b      	ldrb	r3, [r3, r2]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005408:	2302      	movs	r3, #2
 800540a:	e042      	b.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	223c      	movs	r2, #60	; 0x3c
 8005410:	2101      	movs	r1, #1
 8005412:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	223d      	movs	r2, #61	; 0x3d
 8005418:	2102      	movs	r1, #2
 800541a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2270      	movs	r2, #112	; 0x70
 8005430:	4393      	bics	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a14      	ldr	r2, [pc, #80]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00a      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	05db      	lsls	r3, r3, #23
 8005458:	429a      	cmp	r2, r3
 800545a:	d004      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0f      	ldr	r2, [pc, #60]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10c      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2280      	movs	r2, #128	; 0x80
 800546a:	4393      	bics	r3, r2
 800546c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4313      	orrs	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	223d      	movs	r2, #61	; 0x3d
 8005484:	2101      	movs	r1, #1
 8005486:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	223c      	movs	r2, #60	; 0x3c
 800548c:	2100      	movs	r1, #0
 800548e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	0018      	movs	r0, r3
 8005494:	46bd      	mov	sp, r7
 8005496:	b004      	add	sp, #16
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40000400 	.word	0x40000400

080054a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <__libc_init_array>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	2600      	movs	r6, #0
 80054c8:	4d0c      	ldr	r5, [pc, #48]	; (80054fc <__libc_init_array+0x38>)
 80054ca:	4c0d      	ldr	r4, [pc, #52]	; (8005500 <__libc_init_array+0x3c>)
 80054cc:	1b64      	subs	r4, r4, r5
 80054ce:	10a4      	asrs	r4, r4, #2
 80054d0:	42a6      	cmp	r6, r4
 80054d2:	d109      	bne.n	80054e8 <__libc_init_array+0x24>
 80054d4:	2600      	movs	r6, #0
 80054d6:	f000 f821 	bl	800551c <_init>
 80054da:	4d0a      	ldr	r5, [pc, #40]	; (8005504 <__libc_init_array+0x40>)
 80054dc:	4c0a      	ldr	r4, [pc, #40]	; (8005508 <__libc_init_array+0x44>)
 80054de:	1b64      	subs	r4, r4, r5
 80054e0:	10a4      	asrs	r4, r4, #2
 80054e2:	42a6      	cmp	r6, r4
 80054e4:	d105      	bne.n	80054f2 <__libc_init_array+0x2e>
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
 80054e8:	00b3      	lsls	r3, r6, #2
 80054ea:	58eb      	ldr	r3, [r5, r3]
 80054ec:	4798      	blx	r3
 80054ee:	3601      	adds	r6, #1
 80054f0:	e7ee      	b.n	80054d0 <__libc_init_array+0xc>
 80054f2:	00b3      	lsls	r3, r6, #2
 80054f4:	58eb      	ldr	r3, [r5, r3]
 80054f6:	4798      	blx	r3
 80054f8:	3601      	adds	r6, #1
 80054fa:	e7f2      	b.n	80054e2 <__libc_init_array+0x1e>
 80054fc:	080055a4 	.word	0x080055a4
 8005500:	080055a4 	.word	0x080055a4
 8005504:	080055a4 	.word	0x080055a4
 8005508:	080055a8 	.word	0x080055a8

0800550c <memset>:
 800550c:	0003      	movs	r3, r0
 800550e:	1812      	adds	r2, r2, r0
 8005510:	4293      	cmp	r3, r2
 8005512:	d100      	bne.n	8005516 <memset+0xa>
 8005514:	4770      	bx	lr
 8005516:	7019      	strb	r1, [r3, #0]
 8005518:	3301      	adds	r3, #1
 800551a:	e7f9      	b.n	8005510 <memset+0x4>

0800551c <_init>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005522:	bc08      	pop	{r3}
 8005524:	469e      	mov	lr, r3
 8005526:	4770      	bx	lr

08005528 <_fini>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr
